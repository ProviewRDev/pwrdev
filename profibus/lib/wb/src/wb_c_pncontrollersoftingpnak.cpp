/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2022 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* wb_c_pncontrollersoftingpnak.c -- work bench methods of the
 * PnControllerSoftingPNAK class. */

#include <string.h>
#include <iostream>
#include <sstream>

#include "pwr_baseclasses.h"
#include "pwr_profibusclasses.h"
#include "co_dcli.h"
#include "rt_pb_msg.h"

#include "wb_env.h"
#include "wb_pwrb_msg.h"
#include "wb_session.h"
#include "wb_wsx.h"

#include "cow_msgwindow.h"

//
//  Syntax check.
//

static pwr_tStatus SyntaxCheck(ldh_tSesContext Session,
                               pwr_tAttrRef Object, /* current object */
                               int* ErrorCount,  /* accumulated error count */
                               int* WarningCount /* accumulated waring count */
                               )
{
  return wsx_CheckIoDevice(Session, Object, ErrorCount, WarningCount,
                           wsx_mCardOption_None);
}
/*
  Called when the user removes a child of the PnControllerSoftingPNAK.
  We use it to remove the configuration file for this device.
*/
static pwr_tStatus PostUnadopt(
    ldh_tSesContext Session, pwr_tOid Object, pwr_tOid Source, pwr_tCid Class)
{
  
  if (cdh_ObjidIsNotNull(Source))
  {
    std::string oid_string(cdh_ObjidToFnString(0, Source));
    std::ostringstream pwr_pn_filename(std::ios_base::out);
    std::ostringstream rm_cmd(std::ios_base::out);

    pwr_pn_filename << "$pwrp_load/pwr_pn_" << oid_string << ".xml";
    std::cout << "-- Delete " << pwr_pn_filename.str() << std::endl;
    rm_cmd << "rm -f " << pwr_pn_filename.str();
    if (system(rm_cmd.str().c_str()) != EXIT_SUCCESS)
    {
      std::ostringstream msg(std::ios_base::out);
      msg << "Could not delete " << pwr_pn_filename.str() << "! You have to do it manually.";
      MsgWindow::message('E', msg.str().c_str());           
    }
  }
  
  return PWRB__SUCCESS;
}

//
//  Every method to be exported to the workbench should be registred here.
//

pwr_dExport pwr_BindMethods(PnControllerSoftingPNAK) = {
    pwr_BindMethod(SyntaxCheck), pwr_BindMethod(PostUnadopt),
    pwr_NullMethod};
