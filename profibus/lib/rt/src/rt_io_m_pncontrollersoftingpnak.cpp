/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2022 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* rt_io_m_pncontrollersoftingpnak.cpp -- io methods for the profinet master
   object
   The PnControllerSoftingPNAK object serves as agent for one Profinet network
   The profinet stack we use is a Profinet stack from Softing
*/

#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <iostream>

#include <arpa/inet.h>
#include <net/if.h>
#include <netinet/in.h>
#include <sys/ioctl.h>
#include <sys/socket.h>

#include "co_cdh.h"
#include "co_dcli.h"
#include "pwr_profibusclasses.h"

#include "rt_io_base.h"
#include "rt_io_bus.h"
#include "rt_io_msg.h"
#include "rt_io_agent_init.h"
#include "rt_pb_msg.h"
#include "rt_io_pnak_locals.h"
#include "rt_pn_iface.h"

static pwr_tStatus IoAgentInit(io_tCtx ctx, io_sAgent* ap);
static pwr_tStatus IoAgentRead(io_tCtx ctx, io_sAgent* ap);
static pwr_tStatus IoAgentWrite(io_tCtx ctx, io_sAgent* ap);
static pwr_tStatus IoAgentClose(io_tCtx ctx, io_sAgent* ap);
static pwr_tStatus IoAgentSwap(io_tCtx ctx, io_sAgent* ap, io_eEvent event);

/*----------------------------------------------------------------------------*\
   Init method for the Pb_profiboard agent
\*----------------------------------------------------------------------------*/
static pwr_tStatus IoAgentInit(io_tCtx ctx, io_sAgent* ap)
{
  io_sAgentLocal* local;
  pwr_sClass_PnControllerSoftingPNAK* op;

  /* Allocate area for local data structure */
  ap->Local = (io_sAgentLocal*)new io_sAgentLocal;
  if (!ap->Local)
  {
    //    errh_Error( "ERROR config Profibus DP Master %s - %s", ap->Name,
    //    "calloc");
    return IO__ERRINIDEVICE;
  }

  local = (io_sAgentLocal*)ap->Local;
  op = (pwr_sClass_PnControllerSoftingPNAK*)ap->op;

  pnak_init();

  /* Active supervision thread */

  pthread_attr_t attr;

  local->args.local = local;
  local->args.ap = ap;

  op->Status = PB__NOTINIT;

  pthread_mutexattr_t mutexattr;
  pthread_condattr_t condattr;

  pthread_mutexattr_init(&mutexattr);
  pthread_mutex_init(&local->mutex, &mutexattr);
  pthread_mutexattr_destroy(&mutexattr);

  pthread_condattr_init(&condattr);
  pthread_cond_init(&local->cond, &condattr);
  pthread_condattr_destroy(&condattr);

  pthread_mutex_lock(&local->mutex);

  pthread_attr_init(&attr);
  pthread_attr_setinheritsched(&attr, PTHREAD_INHERIT_SCHED);
  pthread_create(&local->handle_events, &attr, handle_events, &local->args);

  pthread_cond_wait(&local->cond, &local->mutex);
  pthread_mutex_unlock(&local->mutex);
  op->Status = PB__NORMAL;

  return IO__SUCCESS;
}

/*----------------------------------------------------------------------------*\
   Read method for the Pb_Profiboard agent
\*----------------------------------------------------------------------------*/
static pwr_tStatus IoAgentRead(io_tCtx ctx, io_sAgent* ap)
{
  io_sAgentLocal* local;
  // PnIOCRData* pn_iocr_data;
  pwr_tUInt16 sts;
  unsigned char* io_datap;
  unsigned char* clean_io_datap;
  unsigned char status_data = 0;
  // PnSubmoduleData* submodule;
  std::shared_ptr<ProfinetDevice> pn_device;
  unsigned char ioxs;
  unsigned short data_length = 0, i;

  local = (io_sAgentLocal*)ap->Local;
  io_sRack* device_list = NULL;

  /* Read i/o for all devices and move it to clean io data area */

  //  pthread_mutex_lock(&local->mutex);

  for (device_list = ap->racklist, i = 1; device_list != NULL || i < local->device_list.size();
       device_list = device_list->next, i++)
  {
    // pwr_sClass_PnDevice *device = (pwr_sClass_PnDevice*)(device_list->op);

    pn_device = local->device_list[i];

    if (pn_device->m_rt_device_state == PNAK_DEVICE_STATE_CONNECTED)
    {
      auto& iocr = pn_device->m_IOCR_map.at(PROFINET_IO_CR_TYPE_INPUT);
      //  TODO Implement iocrstate propagation to pn device. But as of now
      //  the status_data doesn't change according to what the data frames says
      //  in other words. It's showing normal operation even with all modules
      //  pulled from an IO...The "problem" bit is not present at all :/
      data_length = iocr.m_rt_io_data_length;
      sts = pnak_get_iocr_data(0, iocr.m_rt_identifier, iocr.m_rt_io_data, &data_length, &ioxs, &status_data);
      if (sts == PNAK_OK)
      {
        for (auto& slot : pn_device->m_slot_list)
        {
          for (auto& subslot : slot.m_subslot_map)
          {
            if (subslot.second.m_rt_io_submodule_type == PROFINET_IO_SUBMODULE_TYPE_INPUT ||
                subslot.second.m_rt_io_submodule_type == PROFINET_IO_SUBMODULE_TYPE_INPUT_AND_OUTPUT)
            {
              io_datap = iocr.m_rt_io_data + subslot.second.m_rt_offset_io_in;
              clean_io_datap = iocr.m_rt_clean_io_data + subslot.second.m_rt_offset_clean_io_in;
              memcpy(clean_io_datap, io_datap, subslot.second.m_io_input_length);
            }
          }
        }
      }
      else
      {
        printf("pnak_get_iocr_data failed!\n");
      }
    }
  }

  //  pthread_mutex_unlock(&local->mutex);

  return IO__SUCCESS;
}

/*----------------------------------------------------------------------------*\
   Write method for the Pb_Profiboard agent
\*----------------------------------------------------------------------------*/
static pwr_tStatus IoAgentWrite(io_tCtx ctx, io_sAgent* ap)
{
  io_sAgentLocal* local;
  pwr_tUInt16 sts;
  unsigned char* io_datap;
  unsigned char* clean_io_datap;
  io_sRack* device_list;
  pwr_sClass_PnDevice* sp = NULL;
  std::shared_ptr<ProfinetDevice> pn_device;

  unsigned short data_length, i;

  local = (io_sAgentLocal*)ap->Local;

  /* Write i/o for all devices fetch it first from clean io data area */

  /* Iterate over the slaves.  */
  device_list = ap->racklist;

  //  pthread_mutex_lock(&local->mutex);

  for (device_list = ap->racklist, i = 1; device_list != NULL || i < local->device_list.size();
       device_list = device_list->next, i++)
  {
    sp = (pwr_sClass_PnDevice*)device_list->op;
    pn_device = local->device_list[i]; // TODO Maybe we should map against certain names instead.

    if (pn_device->m_rt_device_state == PNAK_DEVICE_STATE_CONNECTED)
    {
      // The map index is the IOCR Type
      auto& iocr = pn_device->m_IOCR_map.at(PROFINET_IO_CR_TYPE_OUTPUT);
      data_length = iocr.m_rt_io_data_length;

      memset(iocr.m_rt_io_data, PNAK_IOXS_STATUS_DATA_GOOD, data_length);

      for (auto& slot : pn_device->m_slot_list)
      {
        for (auto& subslot : slot.m_subslot_map)
        {
          if (subslot.second.m_rt_io_submodule_type == PROFINET_IO_SUBMODULE_TYPE_OUTPUT ||
              subslot.second.m_rt_io_submodule_type == PROFINET_IO_SUBMODULE_TYPE_INPUT_AND_OUTPUT)
          {
            io_datap = iocr.m_rt_io_data + subslot.second.m_rt_offset_io_out;
            clean_io_datap = iocr.m_rt_clean_io_data + subslot.second.m_rt_offset_clean_io_out;
            memcpy(io_datap, clean_io_datap, subslot.second.m_io_output_length);
          }
        }
      }
      char ioxs = CYCLIC_DATA_STATUS_DATA_VALID | CYCLIC_DATA_STATUS_STATE_PRIMARY |
                  CYCLIC_DATA_STATUS_STATE_RUN | CYCLIC_DATA_STATUS_NORMAL_OPERATION;
      sts = pnak_set_iocr_data(0, iocr.m_rt_identifier, iocr.m_rt_io_data, iocr.m_rt_io_data_length, ioxs);
      if (sts != PNAK_OK)
      {
        printf("pnak_set_iocr_data failed!\n");
      }

      // Check if we have a read request, if so pack it and send it. We only
      // allow for one active "Read session" per device...
      if (sp->ReadReq.SendReq && sp->ReadReq.status == pwr_ePnDeviceReadWriteState_Ready)
      {
        // Check length, and alert if we are trying to read more than we can
        // carry...
        if (sp->ReadReq.Length <= sizeof(sp->ReadReq.response.Data))
        {
          pack_read_req(&local->service_req_res, pn_device->m_rt_device_ref, &sp->ReadReq);
          sp->ReadReq.status = pwr_ePnDeviceReadWriteState_Busy; // Reset later in response
          T_PNAK_RESULT pnak_result = pnak_send_service_req_res(0, &local->service_req_res);
          if (pnak_result == PNAK_OK)
          {
            sp->ReadReq.counter++;
            errh_Info("PROFINET: Async read request sent, dev: %d", pn_device->m_rt_device_ref);
          }
          else
          {
            errh_Warning("PROFINET: Async read request, send failed, dev: %d", pn_device->m_rt_device_ref);
          }
        }
        else
        {
          errh_Warning("PROFINET: Async read request not sent, data too large "
                       "for receiving buffer on device %d",
                       pn_device->m_rt_device_ref);
        }
        sp->ReadReq.SendReq = 0;
      }

      // Check if we have a write request, if so pack it and send it. We only
      // allow for one active "Write session" per device...
      if (sp->WriteReq.SendReq && sp->WriteReq.status == pwr_ePnDeviceReadWriteState_Ready)
      {
        // Check length, and alert if we are trying to read more than we can
        // carry...
        if (sp->WriteReq.Length <= sizeof(sp->WriteReq.Data))
        {
          pack_write_req(&local->service_req_res, pn_device->m_rt_device_ref, &sp->WriteReq);
          sp->WriteReq.status = pwr_ePnDeviceReadWriteState_Busy; // Reset later in response
          T_PNAK_RESULT pnak_result = pnak_send_service_req_res(0, &local->service_req_res);
          if (pnak_result == PNAK_OK)
          {
            sp->WriteReq.counter++;
            errh_Info("PROFINET: Async write request sent, dev: %d", pn_device->m_rt_device_ref);
          }
          else
          {
            errh_Warning("PROFINET: Async write request, send failed, dev: %d", pn_device->m_rt_device_ref);
          }
        }
        else
        {
          errh_Warning("PROFINET: Async write request not sent, data too large "
                       "for buffer on device %d",
                       pn_device->m_rt_device_ref);
        }
        sp->WriteReq.SendReq = 0;
      }
    }
  }

  //  pthread_mutex_unlock(&local->mutex);

  return IO__SUCCESS;
}

/*----------------------------------------------------------------------------*\

\*----------------------------------------------------------------------------*/
static pwr_tStatus IoAgentClose(io_tCtx ctx, io_sAgent* ap)
{
  io_sAgentLocal* local;
  int* exitcodep;
  int error;

  local = (io_sAgentLocal*)ap->Local;

  // Stop the supervision thread before shutting down PROFINET.
  local = (io_sAgentLocal*)ap->Local;
  if (!local)
    return IO__SUCCESS;

  // Start taking the stack down. A PNAK_WAIT_OBJECT_CHANNEL_CLOSED event will
  // be emitted and the supervision thread will exit
  pnak_stop_stack(0);

  // Wait for the thread to exit
  if ((error = pthread_join(local->handle_events, (void**)&exitcodep)))
    errh_Warning("PROFINET: Unable to wait for supervision thread!");
  else
    errh_Info("PROFINET: Supervision thread has exited. PROFINET stopped...");

  free(local);
  local = NULL;

  /* Clean data areas .... */

  return IO__SUCCESS;
}

static pwr_tStatus IoAgentSwap(io_tCtx ctx, io_sAgent* ap, io_eEvent event)
{
  switch (event)
  {
  // For now we just shut down regardless of what EmergBreakSelect says...safety
  // first :)
  case io_eEvent_EmergencyBreak:
    errh_Fatal("PROFINET: Emergency break detected! Shutting down PROFINET!");
    IoAgentClose(ctx, ap);
    // TODO We need a complete overhaul of EmergencyBreakTrue / EmergBreakSelect
    // / IOReadWriteFlag
    // switch (ctx->Node->EmergBreakSelect)
    // {
    // case pwr_eEmergBreakSelectEnum_StopIO:
    // case pwr_eEmergBreakSelectEnum_Reboot:
    //   errh_Fatal("PROFINET: Emergency break action (StopIO/Reboot) shutting
    //   down PROFINET"); IoAgentClose(ctx, ap); break;
    // case pwr_eEmergBreakSelectEnum_NoAction:
    //   errh_Warning("PROFINET: Emergency break action (NoAction).
    //   Continuing..."); break;
    // case pwr_eEmergBreakSelectEnum_FixedOutputValues:
    //   errh_Warning("PROFINET: Behaviour of FixedOutputValues should be
    //   configured on device level"); errh_Fatal("PROFINET: Emergency break
    //   action (Fixed Output Values)."); break;
    // }

    break;
  case io_eEvent_IoCommEmergencyBreak:
    break;
  default:
    break;
  }

  return IO__SUCCESS;
}

/*----------------------------------------------------------------------------*\
  Every method to be exported to the workbench should be registred here.
\*----------------------------------------------------------------------------*/

pwr_dExport pwr_BindIoMethods(PnControllerSoftingPNAK) = {
    pwr_BindIoMethod(IoAgentInit),  pwr_BindIoMethod(IoAgentRead), pwr_BindIoMethod(IoAgentWrite),
    pwr_BindIoMethod(IoAgentClose), pwr_BindIoMethod(IoAgentSwap), pwr_NullMethod};
