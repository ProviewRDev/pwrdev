/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* cow_pn_gsdml_attr_qt.cpp -- Display gsd attributes */

#include "co_string.h"

#include "rt_pb_msg.h"

#include "cow_qt_helpers.h"

#include "cow_pn_gsdml_attr_qt.h"
#include "cow_pn_gsdml_attrnav_qt.h"

#include <QDialogButtonBox>
#include <QMenuBar>
#include <QPushButton>
#include <QVBoxLayout>

CoWowRecall GsdmlAttrQt::value_recall;

void GsdmlAttrQt::message(char severity, const char* message)
{
  msg_label->setText(fl(message));
}

void GsdmlAttrQt::attr_help_text(const char* text)
{
  help_text->setText(fl(text));
  help_text->setVisible(strlen(text) > 0);
}

void GsdmlAttrQt::set_prompt(const char* prompt)
{
  if (streq(prompt, "")) {
    cmd_prompt->setVisible(false);
    msg_label->setVisible(true);
  } else {
    msg_label->setVisible(false);
    cmd_prompt->setVisible(true);
  }
}

void GsdmlAttrQt::change_value()
{
  if (input_open) {
    cmd_entry->setVisible(false);
    set_prompt("");
    input_open = 0;
    return;
  }

  if (!edit_mode) {
    message('E', "Not in edit mode");
    return;
  }

  char* value;
  int sts = attrnav->check_attr_value(&value);
  if (EVEN(sts)) {
    if (sts == PB__NOATTRSEL) {
      message('E', "No attribute is selected");
    } else {
      message('E', "Attribute can't be modified");
    }
    return;
  }

  cmd_entry->setVisible(true);

  message(' ', "");
  cmd_entry->setFocus();

  if (value) {
    cmd_entry->setText(fl(value));

    // Select the text
    cmd_entry->selectAll();
  } else {
    cmd_entry->setText("");
  }
  set_prompt("value >");
  input_open = 1;
}

//
//  Callbackfunctions from menu entries
//
void GsdmlAttrQtWidget::activate_change_value()
{
  attr->change_value();
}

void GsdmlAttrQtWidget::activate_ordermoduletype_default()
{
  attr->activate_ordermoduletype(attr_eOrderModuleType_Default);
}

void GsdmlAttrQtWidget::activate_ordermoduletype_name()
{
  attr->activate_ordermoduletype(attr_eOrderModuleType_Name);
}

void GsdmlAttrQtWidget::activate_ordermoduletype_number()
{
  attr->activate_ordermoduletype(attr_eOrderModuleType_Number);
}

void GsdmlAttrQtWidget::activate_exit()
{
  attr->activate_exit();
}

void GsdmlAttrQtWidget::activate_help()
{
  attr->activate_help();
}

void GsdmlAttrQtWidget::activate_copy()
{
  attr->activate_copy();
}

void GsdmlAttrQtWidget::activate_paste()
{
  attr->activate_paste();
}

void GsdmlAttrQtWidget::activate_viewio(bool set)
{
  attr->activate_viewio(set);
}

void GsdmlAttrQtWidget::activate_zoom_in()
{
  attr->activate_zoom_in();
}

void GsdmlAttrQtWidget::activate_zoom_out()
{
  attr->activate_zoom_out();
}

void GsdmlAttrQtWidget::activate_zoom_reset()
{
  attr->activate_zoom_reset();
}

void GsdmlAttrQtWidget::activate_collapse()
{
  attr->activate_collapse();
}

void GsdmlAttrQtWidget::activate_expand_all()
{
  attr->activate_expand_all();
}

void GsdmlAttrQtWidget::activate_print()
{
  attr->activate_print();
}

void GsdmlAttrQtWidget::activate_cmd_ok()
{
  attr->activate_cmd_ok();
}

void GsdmlAttrQtWidget::activate_cmd_apply()
{
  attr->activate_cmd_apply();
}

void GsdmlAttrQtWidget::activate_cmd_entry()
{
  attr->cmd_prompt->setVisible(false);
  attr->cmd_entry->setVisible(false);

  attr->attrnav->set_inputfocus();

  if (attr->input_open) {
    attr->attrnav->set_attr_value(qPrintable(attr->cmd_entry->text()));
    attr->cmd_entry->setVisible(false);
    attr->set_prompt("");
    attr->input_open = 0;
  }
}

void GsdmlAttrQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!attr->focustimer.disabled()) {
    if (attr->cmd_entry->isVisible()) {
      attr->cmd_entry->setFocus();
    } else if (attr->attrnav) {
      attr->attrnav->set_inputfocus();
    }

    attr->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void GsdmlAttrQtWidget::closeEvent(QCloseEvent* event)
{
  attr->activate_exit();
  QWidget::closeEvent(event);
}

GsdmlAttrQt::~GsdmlAttrQt()
{
  delete attrnav;
}

GsdmlAttrQt::GsdmlAttrQt(void* a_parent_ctx, void* a_object, pn_gsdml* a_gsdml,
    int a_edit_mode, const char* a_data_filename, pwr_tStatus* a_sts)
    : GsdmlAttr(a_parent_ctx, a_object, a_gsdml, a_edit_mode, a_data_filename)
{
  int sts;

  toplevel = new GsdmlAttrQtWidget(this);
  toplevel->setMinimumSize(800, 600);
  toplevel->setWindowTitle(fl("PROFINET Device Configurator"));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  // Menu
  QMenuBar* menu_bar = new QMenuBar();

  // File entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(
      toplevel, file, "&Print", SLOT(activate_print()), "", "$pwr_exe/wb_print.png");
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "$pwr_exe/xtt_close.png");

  // Edit entry
  QMenu* edit = menu_bar->addMenu(translate_utf8("&Edit"));
  menubutton_copy = addMenuItem(
      toplevel, edit, "&Copy", SLOT(activate_copy()), "CTRL+C", "edit-copy");  
  menubutton_paste = addMenuItem(
      toplevel, edit, "&Paste", SLOT(activate_paste()), "CTRL+V", "edit-paste");
  addMenuItem(toplevel, edit, "C&ollapse", SLOT(activate_collapse()));
  addMenuItem(toplevel, edit, "&Expand All", SLOT(activate_expand_all()));

  // Functions entry
  QMenu* functions = menu_bar->addMenu(translate_utf8("F&unctions"));
  menubutton_changevalue = addMenuItem(toplevel, functions, "&Change Value",
      SLOT(activate_change_value()), "CTRL+Q");

  // Submenu Order module type
  QActionGroup* radio_group = new QActionGroup(toplevel);
  QMenu* func_ordermoduletype
      = functions->addMenu(translate_utf8("&Order ModuleType"));
  addMenuRadioItem(toplevel, func_ordermoduletype, "&Default",
      SLOT(activate_ordermoduletype_default()), radio_group);
  addMenuRadioItem(toplevel, func_ordermoduletype, "By &name",
      SLOT(activate_ordermoduletype_name()), radio_group);
  addMenuRadioItem(toplevel, func_ordermoduletype, "By n&umber",
      SLOT(activate_ordermoduletype_number()), radio_group);

  // View Entry
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addCheckableMenuItem(
      toplevel, view, "_View I/O", SLOT(activate_viewio(bool)));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "$pwr_exe/xtt_zoom_in.png");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "$pwr_exe/xtt_zoom_out.png");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
      "$pwr_exe/xtt_zoom_reset.png");

  // Help entry
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(
      toplevel, help, "&Help", SLOT(activate_help()), "CTRL+H", "$pwr_exe/xtt_help.png");

  // Navigator
  attrnav = new GsdmlAttrNavQt(this, "Plant", gsdml, edit_mode, &brow_widget,
      &sts);
  attrnav->message_cb = &GsdmlAttr::gsdmlattr_message;
  attrnav->change_value_cb = &GsdmlAttr::gsdmlattr_change_value_cb;

  help_text = new QTextEdit("");
  help_text->setFixedHeight(100);

  // Status bar and value input
  QStatusBar* statusbar = new QStatusBar();
  statusbar->setFixedHeight(25);
  msg_label = new QLabel("");
  cmd_prompt = new QLabel("value > ");

  cmd_entry = new CoWowEntryQt(&value_recall);
  QObject::connect(cmd_entry, SIGNAL(returnPressed()), toplevel,
      SLOT(valchanged_cmd_entry()));

  statusbar->addWidget(msg_label);
  statusbar->addWidget(cmd_prompt);
  add_expanding(statusbar, cmd_entry);

  // Apply and Ok buttons
  QDialogButtonBox* buttons = new QDialogButtonBox();
  buttons->addButton(QDialogButtonBox::Ok);
  buttons->addButton(QDialogButtonBox::Apply);
  buttons->addButton(QDialogButtonBox::Cancel);
  QObject::connect(buttons->button(QDialogButtonBox::Ok), SIGNAL(clicked()),
      toplevel, SLOT(activate_cmd_ok()));
  QObject::connect(buttons->button(QDialogButtonBox::Apply), SIGNAL(clicked()),
      toplevel, SLOT(activate_cmd_apply()));
  QObject::connect(buttons->button(QDialogButtonBox::Cancel), SIGNAL(clicked()),
      toplevel, SLOT(close()));

  QVBoxLayout* vbox = new QVBoxLayout(toplevel);
  vbox->setMenuBar(menu_bar);
  add_expanding(vbox, brow_widget);
  add_expanding(vbox, help_text);
  vbox->addWidget(statusbar);
  vbox->addWidget(separator(QFrame::HLine));
  vbox->addWidget(buttons);

  toplevel->setLayout(vbox);
  toplevel->show();

  cmd_prompt->setVisible(false);
  cmd_entry->setVisible(false);
  help_text->setVisible(false);

  if (!edit_mode) {
    buttons->button(QDialogButtonBox::Ok)->setEnabled(false);
    buttons->button(QDialogButtonBox::Apply)->setEnabled(false);
    menubutton_copy->setEnabled(false);    
    menubutton_paste->setEnabled(false);
    menubutton_changevalue->setEnabled(false);
  }

  wow = new CoWowQt(toplevel);

  *a_sts = attrnav->open(data_filename);
}