/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2023 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cow_pn_gsdml_h
#define cow_pn_gsdml_h

#include <fstream>
#include <vector>

#include "pwr_baseclasses.h"

#include "cow_pn_gsdml_classes.h"
namespace pugi
{
class xml_document;
class xml_node;
class xpath_node_set;
}

typedef struct
{
  char name[32];
  pwr_tCid cid;
} gsdml_sModuleClass;

class pn_gsdml
{  
public:
  pn_gsdml(); 
  ~pn_gsdml();

  gsdml_sModuleClass* module_classlist;
  pwr_tFileName m_gsdml_file;
  
  int read(const char* filename);    
  void set_classes(gsdml_sModuleClass* mclist) { module_classlist = mclist; }

  static int ostring_to_data(unsigned char** data, const char* str, int size,
                             int* rsize);
  static int data_to_ostring(unsigned char* data, int size, char* str,
                             int strsize);    
  
  // Our compiled lists
  std::unordered_map<ushort, GSDML::ChannelDiagItem>& getChannelDiagMap();
  std::unordered_map<ushort, GSDML::UnitDiagTypeItem>& getUnitDiagTypeMap();
  std::unordered_map<std::string, std::shared_ptr<GSDML::ModuleItem>>& getModuleMap();
  std::unordered_map<std::string, std::shared_ptr<GSDML::SubmoduleItem>>& getSubmoduleMap();
  std::unordered_map<std::string, std::shared_ptr<GSDML::ValueItem>>& getValueMap();
  std::unordered_map<std::string, std::shared_ptr<std::string>>& getTextIdMap();  
  std::unordered_map<std::string, std::shared_ptr<GSDML::DeviceAccessPointItem>>& getDeviceAccessPointMap();  

  /*
    Utility functions for finding references
  */
  std::shared_ptr<std::string> _get_TextId(std::string&&);
  std::shared_ptr<std::string> _get_CategoryTextRef(std::string&&);
  std::shared_ptr<std::string> _get_CategoryInfoTextRef(std::string&&);

  /*
    Global elements
  */
  std::unique_ptr<GSDML::DeviceIdentity> m_DeviceIdentity;
  std::unique_ptr<GSDML::DeviceFunction> m_DeviceFunction;

private:  
  /*
    Builders that generates "dereferenced" xml object structure
  */
  void _build_diagnostics();
  void _build_DAPs();
  void _build_moduleList();
  void _build_moduleList(pugi::xml_node&&);
  void _build_submoduleList();
  void _build_valueList();
  void _build_textIdList();

  //pwr_tFileName _filename;

  std::unique_ptr<pugi::xml_document> _doc;
  
  // Pointers for faster reference to all the lists
  std::shared_ptr<pugi::xml_node> _xmlTextIds;
  std::shared_ptr<pugi::xml_node> _xmlDeviceAccessPointList;
  std::shared_ptr<pugi::xml_node> _xmlCategoryList;
  /*
    ModuleList - List of ModuleItem
    Uses attribute ModuleItemTarget to point out what ID attribute of ModuleItem to use 
  */
  std::shared_ptr<pugi::xml_node> _xmlModuleList;
  std::shared_ptr<pugi::xml_node> _xmlSubmoduleList;
  std::shared_ptr<pugi::xml_node> _xmlValueList;
  std::shared_ptr<pugi::xml_node> _xmlChannelDiagList;
  std::shared_ptr<pugi::xml_node> _xmlUnitDiagTypeList;

  // "Dereferenced" data structures
  std::unordered_map<ushort, GSDML::ChannelDiagItem> _channelDiagMap;
  std::unordered_map<ushort, GSDML::UnitDiagTypeItem> _unitDiagTypeMap;
  std::unordered_map<std::string, std::shared_ptr<GSDML::ModuleItem>> _moduleMap;
  std::unordered_map<std::string, std::shared_ptr<GSDML::SubmoduleItem>> _submoduleMap;
  std::unordered_map<std::string, std::shared_ptr<GSDML::ValueItem>> _valueMap;
  std::unordered_map<std::string, std::shared_ptr<std::string>> _textIdMap;
  std::unordered_map<std::string, std::shared_ptr<GSDML::DeviceAccessPointItem>> _deviceAccessPointMap;  
};

#endif
