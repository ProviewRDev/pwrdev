function int ccm_CutObjectName(int log)
  int i;
  string ostr;
  string str = "h1-h2-h3-h4-h5";
  string r[7];

  r[0] = "";
  r[1] = "h5";
  r[2] = "h4-h5";
  r[3] = "h3-h4-h5";
  r[4] = "h2-h3-h4-h5";
  r[5] = "h1-h2-h3-h4-h5";
  r[6] = "h1-h2-h3-h4-h5";

  for (i = 0; i < 7; i++)
    ostr = CutObjectName(str, i);
    if (ostr != r[i])
      tstlog_vlog(log, "E", "CutObjectName, mismatch %d, %s != %s", i, r[i], ostr);
      return 0;
    endif
  endfor

  tstlog_log(log, "S", "CutObjectName: Successfull completion");

  return 1;
endfunction

function int ccm_GetAttribute(int log)
  int i;
  string d[39];
  int typ[39];
  int ival[39];
  float fval[39];
  string sval[39];
  int iret;
  float fret;
  string sret;

  d[0] = "Test01c-Pwrrt-Av1.ActualValue"; 
  fval[0] = 22.22;
  typ[0] = 2;
  d[1] = "Test01c-Pwrrt-Av1.NoSuchAttr"; 
  sval[1] = "NoSuchAttr";
  typ[1] = 0;
  d[2] = "Test01c-Pwrrt-Dv1.ActualValue"; 
  ival[2] = 0;
  typ[2] = 1;
  d[3] = "Test01c-Pwrrt-Dv2.ActualValue"; 
  ival[3] = 1;
  typ[3] = 1;
  d[4] = "Test01c-Pwrrt-L1.Value.ActualValue"; 
  fval[4] = 33.33;
  typ[4] = 2;
  d[5] = "Test01c-Pwrrt-L1.LimitHH.Limit"; 
  fval[5] = 95;
  typ[5] = 2;
  d[6] = "Test01c-Pwrrt-L1.Description"; 
  sval[6] = "BaseLevelSensor used for python tests";
  typ[6] = 0;
  d[7] = "Test01c-Pwrrt-Values.Boolean"; 
  ival[7] = 1;
  typ[7] = 1;
  d[8] = "Test01c-Pwrrt-Values.Int8"; 
  ival[8] = 22;
  typ[8] = 1;
  d[9] = "Test01c-Pwrrt-Values.Int16"; 
  ival[9] = 333;
  typ[9] = 1;
  d[10] = "Test01c-Pwrrt-Values.Int32"; 
  ival[10] = 4444;
  typ[10] = 1;
  d[11] = "Test01c-Pwrrt-Values.Int64"; 
  ival[11] = 55555;
  typ[11] = 1;
  d[12] = "Test01c-Pwrrt-Values.UInt8"; 
  ival[12] = 66;
  typ[12] = 1;
  d[13] = "Test01c-Pwrrt-Values.UInt16"; 
  ival[13] = 777;
  typ[13] = 1;
  d[14] = "Test01c-Pwrrt-Values.UInt32"; 
  ival[14] = 8888;
  typ[14] = 1;
  d[15] = "Test01c-Pwrrt-Values.UInt64"; 
  ival[15] = 99999;
  typ[15] = 1;
  d[16] = "Test01c-Pwrrt-Values.Float32"; 
  fval[16] = 22.22;
  typ[16] = 2;
  d[17] = "Test01c-Pwrrt-Values.Float64"; 
  fval[17] = 4444.4444;
  typ[17] = 2;
  d[18] = "Test01c-Pwrrt-Values.String80"; 
  sval[18] = "Why don't you have wings to fly with?";
  typ[18] = 0;
  d[19] = "Test01c-Pwrrt-Values.Time"; 
  sval[19] = "15-MAY-2020 08:27:50";
  typ[19] = 0;
  d[20] = "Test01c-Pwrrt-Values.DeltaTime"; 
  sval[20] = "27 8:27:50.05";
  typ[20] = 0;
  d[21] = "Test01c-Pwrrt-Values.Objid"; 
  sval[21] = "VolPwrTest01c:Test01c-Pwrrt-Values";
  typ[21] = 0;
  d[22] = "Test01c-Pwrrt-Values.AttrRef"; 
  sval[22] = "VolPwrTest01c:Test01c-Pwrrt-Values.AttrRef";
  typ[22] = 0;
  d[23] = "Test01c-Pwrrt-Values.BooleanArray[4]";
  ival[23] = 1;
  typ[23] = 1;
  d[24] = "Test01c-Pwrrt-Values.Int8Array[4]"; 
  ival[24] = 22;
  typ[24] = 1;
  d[25] = "Test01c-Pwrrt-Values.Int16Array[4]"; 
  ival[25] = 333;
  typ[25] = 1;
  d[26] = "Test01c-Pwrrt-Values.Int32Array[4]"; 
  ival[26] = 4444;
  typ[26] = 1;
  d[27] = "Test01c-Pwrrt-Values.Int64Array[4]"; 
  ival[27] = 55555;
  typ[27] = 1;
  d[28] = "Test01c-Pwrrt-Values.UInt8Array[4]"; 
  ival[28] = 66;
  typ[28] = 1;
  d[29] = "Test01c-Pwrrt-Values.UInt16Array[4]"; 
  ival[29] = 777;
  typ[29] = 1;
  d[30] = "Test01c-Pwrrt-Values.UInt32Array[4]"; 
  ival[30] = 8888;
  typ[30] = 1;
  d[31] = "Test01c-Pwrrt-Values.UInt64Array[4]"; 
  ival[31] = 99999;
  typ[31] = 1;
  d[32] = "Test01c-Pwrrt-Values.Float32Array[4]"; 
  fval[32] = 22.22;
  typ[32] = 2;
  d[33] = "Test01c-Pwrrt-Values.Float64Array[4]"; 
  fval[33] = 4444.4444;
  typ[33] = 2;
  d[34] = "Test01c-Pwrrt-Values.String80Array[4]"; 
  sval[34] = "Why don't you have wings to fly with?";
  typ[34] = 0;
  d[35] = "Test01c-Pwrrt-Values.TimeArray[4]"; 
  sval[35] = "15-MAY-2020 08:27:50";
  typ[35] = 0;
  d[36] = "Test01c-Pwrrt-Values.DeltaTimeArray[4]"; 
  sval[36] = "27 8:27:50.05";
  typ[36] = 0;
  d[37] = "Test01c-Pwrrt-Values.ObjidArray[4]"; 
  sval[37] = "VolPwrTest01c:Test01c-Pwrrt-Values";
  typ[37] = 0;
  d[38] = "Test01c-Pwrrt-Values.AttrRefArray[4]"; 
  sval[38] = "VolPwrTest01c:Test01c-Pwrrt-Values.AttrRefArray[4]";
  typ[38] = 0;

  for (i = 0; i < 39; i++)
    if (typ[i] == 0)
      sret = GetAttribute(d[i]);
      if (sret != sval[i])
	if (sval[i] != "NoSuchAttr")
          tstlog_vlog(log, "E", "GetAttribute, mismatch %d, %s != %s", i, sval[i], sret);
          return 0;
        endif
      endif
    endif
    if (typ[i] == 1)
      iret = GetAttribute(d[i]);
      if (iret != ival[i])
        tstlog_vlog(log, "E", "GetAttribute, mismatch %d, %d != %d", i, ival[i], iret);
        return 0;
      endif
    endif
    if (typ[i] == 2)
      fret = GetAttribute(d[i]);
      if (fret != fval[i])
        tstlog_vlog(log, "E", "GetAttribute, mismatch %d, %f != %f", i, fval[i], fret);
        return 0;
      endif
    endif
  endfor

  tstlog_log(log, "S", "GetAttribute: Successfull completion");

  return 1;
endfunction

function int ccm_SetAttribute(int log)
  int i;
  int sts;
  string d[32];
  int typ[32];
  int ival[32];
  float fval[32];
  string sval[32];
  int iret;
  float fret;
  string sret;

  d[0] = "Test01c-Pwrrt-SetValues.Boolean"; 
  ival[0] = 1;
  typ[0] = 1;
  d[1] = "Test01c-Pwrrt-SetValues.Int8"; 
  ival[1] = 22;
  typ[1] = 1;
  d[2] = "Test01c-Pwrrt-SetValues.Int16"; 
  ival[2] = 333;
  typ[2] = 1;
  d[3] = "Test01c-Pwrrt-SetValues.Int32"; 
  ival[3] = 4444;
  typ[3] = 1;
  d[4] = "Test01c-Pwrrt-SetValues.Int64"; 
  ival[4] = 55555;
  typ[4] = 1;
  d[5] = "Test01c-Pwrrt-SetValues.UInt8"; 
  ival[5] = 66;
  typ[5] = 1;
  d[6] = "Test01c-Pwrrt-SetValues.UInt16"; 
  ival[6] = 777;
  typ[6] = 1;
  d[7] = "Test01c-Pwrrt-SetValues.UInt32"; 
  ival[7] = 8888;
  typ[7] = 1;
  d[8] = "Test01c-Pwrrt-SetValues.UInt64"; 
  ival[8] = 99999;
  typ[8] = 1;
  d[9] = "Test01c-Pwrrt-SetValues.Float32"; 
  fval[9] = 22.22;
  typ[9] = 2;
  d[10] = "Test01c-Pwrrt-SetValues.Float64"; 
  fval[10] = 4444.4444;
  typ[10] = 2;
  d[11] = "Test01c-Pwrrt-SetValues.String80"; 
  sval[11] = "Why don't you have wings to fly with?";
  typ[11] = 0;
  d[12] = "Test01c-Pwrrt-SetValues.Time"; 
  sval[12] = "15-MAY-2020 08:27:50";
  typ[12] = 0;
  d[13] = "Test01c-Pwrrt-SetValues.DeltaTime"; 
  sval[13] = "27 8:27:50.05";
  typ[13] = 0;
  d[14] = "Test01c-Pwrrt-SetValues.Objid"; 
  sval[14] = "VolPwrTest01c:Test01c-Pwrrt-SetValues";
  typ[14] = 0;
  d[15] = "Test01c-Pwrrt-SetValues.AttrRef"; 
  sval[15] = "VolPwrTest01c:Test01c-Pwrrt-SetValues.AttrRef";
  typ[15] = 0;
  d[16] = "Test01c-Pwrrt-SetValues.BooleanArray[4]";
  ival[16] = 1;
  typ[16] = 1;
  d[17] = "Test01c-Pwrrt-SetValues.Int8Array[4]"; 
  ival[17] = 22;
  typ[17] = 1;
  d[18] = "Test01c-Pwrrt-SetValues.Int16Array[4]"; 
  ival[18] = 333;
  typ[18] = 1;
  d[19] = "Test01c-Pwrrt-SetValues.Int32Array[4]"; 
  ival[19] = 4444;
  typ[19] = 1;
  d[20] = "Test01c-Pwrrt-SetValues.Int64Array[4]"; 
  ival[20] = 55555;
  typ[20] = 1;
  d[21] = "Test01c-Pwrrt-SetValues.UInt8Array[4]"; 
  ival[21] = 66;
  typ[21] = 1;
  d[22] = "Test01c-Pwrrt-SetValues.UInt16Array[4]"; 
  ival[22] = 777;
  typ[22] = 1;
  d[23] = "Test01c-Pwrrt-SetValues.UInt32Array[4]"; 
  ival[23] = 8888;
  typ[23] = 1;
  d[24] = "Test01c-Pwrrt-SetValues.UInt64Array[4]"; 
  ival[24] = 99999;
  typ[24] = 1;
  d[25] = "Test01c-Pwrrt-SetValues.Float32Array[4]"; 
  fval[25] = 22.22;
  typ[25] = 2;
  d[26] = "Test01c-Pwrrt-SetValues.Float64Array[4]"; 
  fval[26] = 4444.4444;
  typ[26] = 2;
  d[27] = "Test01c-Pwrrt-SetValues.String80Array[4]"; 
  sval[27] = "Why don't you have wings to fly with?";
  typ[27] = 0;
  d[28] = "Test01c-Pwrrt-SetValues.TimeArray[4]"; 
  sval[28] = "15-MAY-2020 08:27:50";
  typ[28] = 0;
  d[29] = "Test01c-Pwrrt-SetValues.DeltaTimeArray[4]"; 
  sval[29] = "27 8:27:50.05";
  typ[29] = 0;
  d[30] = "Test01c-Pwrrt-SetValues.ObjidArray[4]"; 
  sval[30] = "VolPwrTest01c:Test01c-Pwrrt-SetValues";
  typ[30] = 0;
  d[31] = "Test01c-Pwrrt-SetValues.AttrRefArray[4]"; 
  sval[31] = "VolPwrTest01c:Test01c-Pwrrt-SetValues.AttrRefArray[4]";
  typ[31] = 0;

  for (i = 0; i < 32; i++)
    if (typ[i] == 0)
      sts = SetAttribute(d[i], sval[i]);
      if (EVEN(sts))
        tstlog_vlog(log, "E", "SetAttribute, error status %d, %d", i, sts);
        return 0;
      endif
      sret = GetAttribute(d[i]);
      if (sret != sval[i])
	if (sval[i] != "NoSuchAttr")
          tstlog_vlog(log, "E", "SetAttribute, mismatch %d, %s != %s", i, sval[i], sret);
          return 0;
        endif
      endif
    endif
    if (typ[i] == 1)
      sts = SetAttribute(d[i], ival[i]);
      if (EVEN(sts))
        tstlog_vlog(log, "E", "SetAttribute, error status %d, %d", i, sts);
        return 0;
      endif
      iret = GetAttribute(d[i]);
      if (iret != ival[i])
        tstlog_vlog(log, "E", "SetAttribute, mismatch %d, %d != %d", i, ival[i], iret);
        return 0;
      endif
    endif
    if (typ[i] == 2)
      sts = SetAttribute(d[i], fval[i]);
      if (EVEN(sts))
        tstlog_vlog(log, "E", "SetAttribute, error status %d, %d", i, sts);
        return 0;
      endif
      fret = GetAttribute(d[i]);
      if (fret != fval[i])
        tstlog_vlog(log, "E", "SetAttribute, mismatch %d, %f != %f", i, fval[i], fret);
        return 0;
      endif
    endif
  endfor

  tstlog_log(log, "S", "SetAttribute: Successfull completion");

  return 1;
endfunction

function int ccm_GetChild(int log)
  int i;
  string child;
  string d[4];
  string r[4];

  d[0] = "RootObject";
  r[0] = "RootObject-Child1";
  d[1] = "RootObject-Child1";
  r[1] = "RootObject-Child1-A1";
  d[2] = "RootObject-Child1-A1";
  r[2] = "";
  d[3] = "RootObject-ChildLess";
  r[3] = "";

  for (i = 0; i < 4; i++)
    child = GetChild(d[i]);
    if (child != r[i])
      tstlog_vlog(log, "E", "GetChild, mismatch %d, %s != %s", i, r[i], child);
      return 0;
    endif
  endfor

  tstlog_log(log, "S", "GetChild: Successfull completion");

  return 1;
endfunction

function int ccm_GetParent(int log)
  int i;
  string parent;
  string d[4];
  string r[4];

  d[0] = "RootObject-Child1-A1";
  r[0] = "RootObject-Child1";
  d[1] = "RootObject-Child1";
  r[1] = "RootObject";
  d[2] = "RootObject";
  r[2] = "";
  d[3] = "NoSuchObject";
  r[3] = "";

  for (i = 0; i < 4; i++)
    parent = GetParent(d[i]);
    if (parent != r[i])
      tstlog_vlog(log, "E", "GetParent, mismatch %d, %s != %s", i, r[i], parent);
      return 0;
    endif
  endfor

  tstlog_log(log, "S", "GetParent: Successfull completion");

  return 1;
endfunction

function int ccm_GetNextSibling(int log)
  int i;
  string sibling;
  string d[5];
  string r[5];

  d[0] = "RootObject-Child1";
  r[0] = "RootObject-Child2";
  d[1] = "RootObject-Child2";
  r[1] = "RootObject-Child3";
  d[2] = "RootObject-Child3";
  r[2] = "RootObject-Child4";
  d[3] = "RootObject-Child4";
  r[3] = "RootObject-ChildLess";
  d[4] = "RootObject-ChildLess";
  r[4] = "";

  for (i = 0; i < 5; i++)
    sibling = GetNextSibling(d[i]);
    if (sibling != r[i])
      tstlog_vlog(log, "E", "GetNextSibling, mismatch %d, %s != %s", i, r[i], sibling);
      return 0;
    endif
  endfor

  tstlog_log(log, "S", "GetNextSibling: Successfull completion");

  return 1;
endfunction

function int ccm_GetClassList(int log)
  int i;
  string classlist;
  string d[6];
  string r[6];

  d[0] = "MessageHandler";
  r[0] = "Nodes-PwrTest01c-Servers-MessageHandler";
  d[1] = "IOHandler";
  r[1] = "Nodes-PwrTest01c-Servers-IOHandler";
  d[2] = "$PlantHier";
  r[2] = "RootObject";
  d[3] = "AArray100";
  r[3] = "RootObject-Child1-A1";
  d[4] = "BaseFcPPO3PumpAggr";
  r[4] = "RootObject-Child1-P1";
  d[5] = "$WorkBenchVolume";
  r[5] = "";

  for (i = 0; i < 6; i++)
    classlist = GetClassList(d[i]);
    if (classlist != r[i])
      tstlog_vlog(log, "E", "GetClassList, mismatch %d, %s != %s", i, r[i], classlist);
      return 0;
    endif
  endfor

  tstlog_log(log, "S", "GetClassList: Successfull completion");

  return 1;
endfunction

function int ccm_GetNextObject(int log)
  int i;
  string next;
  string d[7];
  string r[7];

  d[0] = "Nodes-PwrTest01c-Servers-MessageHandler";
  r[0] = "";
  d[1] = "Nodes-PwrTest01c-Servers-IOHandler";
  r[1] = "";
  d[2] = "RootObject";
  r[2] = "RootObject-Child1";
  d[3] = "RootObject-Child1";
  r[3] = "RootObject-Child2";
  d[4] = "RootObject-Child2";
  r[4] = "RootObject-Child3";
  d[5] = "RootObject-Child3";
  r[5] = "RootObject-Child4";
  d[6] = "RootObject-Child4";
  r[6] = "RootObject-ChildLess";

  for (i = 0; i < 7; i++)
    next = GetNextObject(d[i]);
    if (next != r[i])
      tstlog_vlog(log, "E", "GetNextObject, mismatch %d, %s != %s", i, r[i], next);
      return 0;
    endif
  endfor

  tstlog_log(log, "S", "GetNextObject: Successfull completion");

  return 1;
endfunction

function int ccm_GetObjectClass(int log)
  int i;
  string class;
  string d[7];
  string r[7];

  d[0] = "RootObject";
  r[0] = "$PlantHier";
  d[1] = "RootObject-Child1";
  r[1] = "$PlantHier";
  d[2] = "Test01c-Pwrrt-Dv1";
  r[2] = "Dv";
  d[3] = "Test01c-Pwrrt-L1";
  r[3] = "BaseLevelSensor";
  d[4] = "VolPwrTest01c:";
  r[4] = "$RootVolume";
  d[5] = "pwrb:Class-And";
  r[5] = "$ClassDef";
  d[6] = "pwrs:";
  r[6] = "$ClassVolume";

  for (i = 0; i < 7; i++)
    class = GetObjectClass(d[i]);
    if (class != r[i])
      tstlog_vlog(log, "E", "GetObjectClass, mismatch %d, %s != %s", i, r[i], class);
      return 0;
    endif
  endfor

  tstlog_log(log, "S", "GetObjectClass: Successfull completion");

  return 1;
endfunction

function int ccm_GetNodeObject(int log)
  string node;
  string r = "Nodes-PwrTest01c";

  node = GetNodeObject();
  if (node != r)
    tstlog_vlog(log, "E", "GetNodeObject, mismatch %s != %s", r, node);
    return 0;
  endif

  tstlog_log(log, "S", "GetNodeObject: Successfull completion");

  return 1;
endfunction

function int ccm_GetRootList(int log)
  string root;
  string r = "RootObject";

  root = GetRootList();
  if (root != r)
    tstlog_vlog(log, "E", "GetRootList, mismatch %s != %s", r, root);
    return 0;
  endif

  tstlog_log(log, "S", "GetRootList: Successfull completion");

  return 1;
endfunction

function int ccm_GetUser(int log)
  string user;

  login pwrp pwrp
  user = GetUser();
  logout

  if (user != "pwrp")
    tstlog_vlog(log, "E", "GetUser, mismatch %s != pwrp", user);
    return 0;
  endif

  tstlog_log(log, "S", "GetUser: Successfull completion");

  return 1;
endfunction

function int ccm_GetPrivileges(int log)
  int priv;

  login pwrp pwrp
  priv = GetPrivileges();
  logout

  if (priv != 167510022)
    tstlog_vlog(log, "E", "GetPrivileges, mismatch %d != 167510022", priv);
    return 0;
  endif

  tstlog_log(log, "S", "GetPrivileges: Successfull completion");

  return 1;
endfunction


main()
  int log;

  verify(0);
# tzset("Europe/Stockholm");
  log = tstlog_open("op-XttScript", "$pwrp_log/xttscript.tlog");

  ccm_CutObjectName(log);
  ccm_GetAttribute(log);
  ccm_SetAttribute(log);
  ccm_GetChild(log);
  ccm_GetParent(log);
  ccm_GetNextSibling(log);
  ccm_GetClassList(log);
  ccm_GetNextObject(log);
  ccm_GetObjectClass(log);
  ccm_GetNodeObject(log);
  ccm_GetRootList(log);
  ccm_GetUser(log);
  ccm_GetPrivileges(log);

  tstlog_close(log);  
endmain
