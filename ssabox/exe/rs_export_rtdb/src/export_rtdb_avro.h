/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2025 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef export_rtdb_avro_h
#define export_rtdb_avro_h

#include <vector>
#include <cstdint>
#include <string>

class AvroEncoder {
private:
  void encodeInt64(int64_t input);
  void encodeInt32(int32_t input);
  void writeBytes(const uint8_t* p, int size);
public:
  std::vector<uint8_t> out;
  void clear();
  void encodeBool(bool b);
  void encodeInt(int32_t i);
  void encodeLong(int64_t l);
  void encodeFloat(float f);
  void encodeDouble(double d);
  void encodeString(const std::string &s);
  void encodeBytes(const uint8_t* b, size_t len);
  void encodeFixed(const uint8_t* b, size_t len);
  void encodeUnionIndex(size_t e);
  void arrayStart();
  void startItem();
  void arrayEnd();
  void setItemCount(size_t count);
};
#endif
