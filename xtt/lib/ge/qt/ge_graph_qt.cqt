/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "cow_qt_helpers.h"

#include "glow_growwidget_qt.h"

#include "ge_graph_qt.h"
#include "ge_attr_qt.h"

#include <QTimer>

GraphQt::GraphQt(void* xn_parent_ctx, const char* xn_name, QWidget** w,
    pwr_tStatus* status, const char* xn_default_path, graph_eMode graph_mode,
    int scrollbar, int xn_gdh_init_done, const char* xn_object_name,
    int xn_use_default_access, unsigned int xn_default_access,
    unsigned int xn_options, int xn_color_theme, int xn_dashboard,
    void (*xn_keyboard_cb)(void*, int, int))
    : Graph(xn_parent_ctx, xn_name, xn_default_path, graph_mode,
        xn_gdh_init_done, xn_object_name, xn_use_default_access,
        xn_default_access, xn_options, xn_color_theme, xn_dashboard, xn_keyboard_cb)
{
  trace_obj = new GraphQtTraceObject(this);
  trace_timerid = new QTimer(trace_obj);

  default_access = xn_default_access;
  if (scrollbar) {
    form_widget
        = scrolledgrowwidgetqt_new(graph_init_grow_base_cb, this, &grow_widget);
  } else {
    grow_widget = form_widget = growwidgetqt_new(graph_init_grow_base_cb, this);
  }

  // Create the root item
  *w = form_widget;

  gbl.load_config(this);

  *status = 1;
}

GraphQt::~GraphQt()
{
  Attr* attrctx;
  int sts;

  closing_down = 1;

  if (trace_started) {
    close_trace(0);
  }

  sts = attr_list.get_first((void**)&attrctx);
  while (sts) {
    delete attrctx;
    attr_list.remove((void*)attrctx);
    sts = attr_list.get_first((void**)&attrctx);
  }

  localdb_free();

  for (int i = 0; i < grow_cnt; i++) {
    grow_SetCtxUserData(grow_stack[i]->ctx, 0);
    delete grow_stack[i];
  }
  grow_SetCtxUserData(grow->ctx, 0);
  delete grow;
  form_widget->close();
}

void GraphQt::trace_timer_remove()
{
  trace_timerid->stop();
}

void GraphQtTraceObject::trace_scan()
{
  Graph::trace_scan(graph);
}

void GraphQt::trace_timer_add(int time)
{
  initOneShotTimer(trace_timerid, SLOT(trace_scan()),time);
}

QWidget* GraphQt::create_navigator()
{
  nav_widget = grownavwidgetqt_new(grow_widget);
  return nav_widget;
}

Attr* GraphQt::attr_new(void* parent_ctx, attr_eType type, void* object,
    attr_sItem* itemlist, int item_cnt)
{
  return new AttrQt(form_widget, parent_ctx, type, object, itemlist, item_cnt);
}

void GraphQt::set_inputfocus(int focus)
{
  if (focus) {
    grow_widget->setFocus();
  }
}

void GraphQt::popup_position(int event_x, int event_y, int* x, int* y)
{
  CoWowQt::PopupPosition(grow_widget, event_x, event_y, x, y);
}
