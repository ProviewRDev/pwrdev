/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef ge_graph_unitconv_h
#define ge_graph_unitconv_h

/* ge_graph_unitconv.h -- Unit conversions */

typedef enum {
  graph_eUcEntity_Acceleration,
  graph_eUcEntity_Angle,
  graph_eUcEntity_Area,
  graph_eUcEntity_Energy,
  graph_eUcEntity_Force,
  graph_eUcEntity_Frequency,
  graph_eUcEntity_General,
  graph_eUcEntity_Length,
  graph_eUcEntity_Mass,
  graph_eUcEntity_MassFlow,
  graph_eUcEntity_Power,
  graph_eUcEntity_Pressure,
  graph_eUcEntity_Speed,
  graph_eUcEntity_Temperature,
  graph_eUcEntity_Time,
  graph_eUcEntity_Volume,
  graph_eUcEntity_VolumeFlow,
} graph_eUcEntity;

typedef enum {
  graph_eUcAcceleration_m_s2,
  graph_eUcAcceleration_ft_s2,
  graph_eUcAcceleration_in_s2,
} graph_eUcAcceleration;

typedef enum {
  graph_eUcAngle_rad,
  graph_eUcAngle_degree,
  graph_eUcAngle_min,
  graph_eUcAngle_mrad,
  graph_eUcAngle_percent,
  graph_eUcAngle_sec
} graph_eUcAngle;

typedef enum {
  graph_eUcArea_m2,
  graph_eUcArea_a,
  graph_eUcArea_ac,
  graph_eUcArea_cm2,
  graph_eUcArea_ha,
  graph_eUcArea_km2,
  graph_eUcArea_mm2,
  graph_eUcArea_sq_in,
  graph_eUcArea_sq_mi,
  graph_eUcArea_sq_ft,
  graph_eUcArea_sq_yd
} graph_eUcArea;

typedef enum {
  graph_eUcEnergy_J,
  graph_eUcEnergy_cal,
  graph_eUcEnergy_kJ,
} graph_eUcEnergy;

typedef enum {
  graph_eUcForce_N,
  graph_eUcForce_kN,
  graph_eUcForce_kp,
  graph_eUcForce_MN,
  graph_eUcForce_p,
} graph_eUcForce;

typedef enum {
  graph_eUcFrequency_Hz,
  graph_eUcFrequency_kHz,
  graph_eUcFrequency_MHz,
  graph_eUcFrequency_rad_min,
  graph_eUcFrequency_rad_s,
  graph_eUcFrequency_RPM,
} graph_eUcFrecuency;

typedef enum {
  graph_eUcGeneral_1_1 = 0,
  graph_eUcGeneral_Tera,
  graph_eUcGeneral_Giga,
  graph_eUcGeneral_Mega,
  graph_eUcGeneral_Kilo,
  graph_eUcGeneral_Hecto,
  graph_eUcGeneral_Deca,
  graph_eUcGeneral_Deci,
  graph_eUcGeneral_Centi,
  graph_eUcGeneral_Milli,
  graph_eUcGeneral_Micro,
  graph_eUcGeneral_Nano,
  graph_eUcGeneral_Pico
} graph_eUcGeneral;

typedef enum {
  graph_eUcLength_m,
  graph_eUcLength_cm,
  graph_eUcLength_dm,
  graph_eUcLength_ft,
  graph_eUcLength_in,
  graph_eUcLength_km,
  graph_eUcLength_mi,
  graph_eUcLength_mm,
  graph_eUcLength_nm,
  graph_eUcLength_NM,
  graph_eUcLength_um,
  graph_eUcLength_yd,
} graph_eUcLength;

typedef enum {
  graph_eUcMass_kg,
  graph_eUcMass_g,
  graph_eUcMass_hg,
  graph_eUcMass_kt,
  graph_eUcMass_lb,
  graph_eUcMass_mg,
  graph_eUcMass_oz,
  graph_eUcMass_st,
  graph_eUcMass_t,
  graph_eUcMass_ug,
} graph_eUcMass;

typedef enum {
  graph_eUcMassFlow_kg_s,
  graph_eUcMassFlow_g_min,
  graph_eUcMassFlow_g_s,
  graph_eUcMassFlow_kg_min,
  graph_eUcMassFlow_lb_min,
  graph_eUcMassFlow_lb_s,
  graph_eUcMassFlow_mg_min,
  graph_eUcMassFlow_mg_s,
  graph_eUcMassFlow_oz_min,
  graph_eUcMassFlow_oz_s,
} graph_eUcMassFlow;

typedef enum {
  graph_eUcPower_W,
  graph_eUcPower_GW,
  graph_eUcPower_hp,
  graph_eUcPower_kW,
  graph_eUcPower_mW,
  graph_eUcPower_MW,
  graph_eUcPower_uW,
  graph_eUcPower_TW,
} graph_eUcPower;

typedef enum {
  graph_eUcPressure_Pa,
  graph_eUcPressure_atm,
  graph_eUcPressure_b,
  graph_eUcPressure_kPa,
  graph_eUcPressure_lb_ft2,
  graph_eUcPressure_lb_in2,
  graph_eUcPressure_mb,
  graph_eUcPressure_mmHg,
  graph_eUcPressure_mPa,
  graph_eUcPressure_MPa,
} graph_eUcPressure;

typedef enum {
  graph_eUcSpeed_m_s = 0,
  graph_eUcSpeed_ft_min,
  graph_eUcSpeed_ft_s,
  graph_eUcSpeed_in_min,
  graph_eUcSpeed_in_s,
  graph_eUcSpeed_km_h,
  graph_eUcSpeed_kn,
  graph_eUcSpeed_m_min,
  graph_eUcSpeed_mm_s,
  graph_eUcSpeed_mi_h,
  graph_eUcSpeed_yd_min,
  graph_eUcSpeed_yd_s,
} graph_eUcSpeed;

typedef enum {
  graph_eUcTemperature_K,
  graph_eUcTemperature_C,
  graph_eUcTemperature_F,
  graph_eUcTemperature_R
} graph_eUcTemperature;

typedef enum {
  graph_eUcTime_s,
  graph_eUcTime_d,
  graph_eUcTime_h,
  graph_eUcTime_min,
  graph_eUcTime_ms,
  graph_eUcTime_ns,
  graph_eUcTime_us,
  graph_eUcTime_wk,
  graph_eUcTime_y,
} graph_eUcTime;

typedef enum {
  graph_eUcVolume_m3,
  graph_eUcVolume_cm3,
  graph_eUcVolume_dm3,
  graph_eUcVolume_ft3,
  graph_eUcVolume_in3,
  graph_eUcVolume_mm3,
} graph_eUcVolume;

typedef enum {
  graph_eUcVolumeFlow_m3_s,
  graph_eUcVolumeFlow_cl_s,
  graph_eUcVolumeFlow_in3_min,
  graph_eUcVolumeFlow_in3_s,
  graph_eUcVolumeFlow_ft3_min,
  graph_eUcVolumeFlow_ft3_s,
  graph_eUcVolumeFlow_l_s,
  graph_eUcVolumeFlow_m3_min,
  graph_eUcVolumeFlow_mm3_s,
  graph_eUcVolumeFlow_yd3_min,
  graph_eUcVolumeFlow_yd3_s,
} graph_eUcVolumeFlow;

int uc_entity_to_attrtype(int entity);
double uc_convert(graph_eUcEntity entity, int from, int to, double value);

#endif
