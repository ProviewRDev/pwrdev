/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2024 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* ge_graph_web.cpp -- generate website */

#include "pwr_names.h"
#include "pwr_baseclasses.h"

#include "co_ccm_msg.h"
#include "co_cdh.h"
#include "co_cnf.h"
#include "co_dcli.h"
#include "co_string.h"
#include "co_time.h"

#include "rt_gdh.h"

#include "ge_graph.h"
#include "ge_util.h"
#include "ge_msg.h"

#if LDH
#include "wb_ldh.h"
#include "wb_trv.h"
#endif

typedef enum {
  graph_eWebTarget_RightFrame = 0,
  graph_eWebTarget_ParentWindow = 1,
  graph_eWebTarget_SeparateWindow = 2
} graph_eWebTarget;

#if 0
static int graph_get_applet_size(char* graphname, int* width, int* height);
#endif

int Graph::generate_web(ldh_tSesContext ldhses, pwr_tOid opplaceweb_oid)
{
#if 0
  pwr_tFileName fname = "$pwrp_web/index.html";
  std::ofstream fp_index;

  dcli_translate_filename(fname, fname);

  fp_index.open(fname);

  fp_index << "<! Generated by Ge >\n"
           << "<html>\n"
           << "  <head>\n"    
	   << "    <meta http-equiv=\"refresh\" content=\"0; url=./opwind.html\">\n"
           << "  </head>\n"
           << "  <body>\n"
           << "    Redirect to opwind.html\n"
           << "  </body>\n"
           << "</html>\n";
  fp_index.close();
#endif
#if LDH
  int sts;
  int size;
  char* value_p;
  pwr_tString80 title;
  pwr_tString80 text;
  pwr_tString80 file_name;
  char style_sheet[80];
  char start_URL[80];
  std::ofstream fp_ows;
  pwr_tFileName fname;
  pwr_tOName opplaceweb_name;

  // Get OpPlaceWeb data
  sts = ldh_ObjidToName(ldhses, opplaceweb_oid, ldh_eName_Hierarchy,
      opplaceweb_name, sizeof(opplaceweb_name), &size);
  if (EVEN(sts))
    return sts;

  // Attribute FileName
  sts = ldh_GetObjectPar(
      ldhses, opplaceweb_oid, "RtBody", "FileName", &value_p, &size);
  if (EVEN(sts))
    return sts;
  if (streq(value_p, ""))
    strcpy(file_name, "index.html");
  else
    strcpy(file_name, value_p);
  free(value_p);

  // Attribute Title
  sts = ldh_GetObjectPar(
      ldhses, opplaceweb_oid, "RtBody", "Title", &value_p, &size);
  if (EVEN(sts))
    return sts;
  strcpy(title, value_p);
  free(value_p);

  // Attribute Text
  sts = ldh_GetObjectPar(
      ldhses, opplaceweb_oid, "RtBody", "Text", &value_p, &size);
  if (EVEN(sts))
    return sts;
  strcpy(text, value_p);
  free(value_p);

  // Attribute StyleSheet
  sts = ldh_GetObjectPar(
      ldhses, opplaceweb_oid, "RtBody", "StyleSheet", &value_p, &size);
  if (EVEN(sts))
    return sts;
  strcpy(style_sheet, value_p);
  free(value_p);

  // Attribute StartURL
  sts = ldh_GetObjectPar(
      ldhses, opplaceweb_oid, "RtBody", "StartURL", &value_p, &size);
  if (EVEN(sts))
    return sts;
  strcpy(start_URL, value_p);
  free(value_p);

  if (streq(start_URL, ""))
    strcpy(start_URL, "xtt_help_index.html");
  // Generate html-file for start page for opwindow applet

  sprintf(fname, "$pwrp_web/%s", file_name);
  dcli_translate_filename(fname, fname);

  fp_ows.open(fname);

  fp_ows << "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n"
         << "<!--     Generated by Ge         -->\n"
         << "<!--     Do not edit this file   -->\n"
         << "<html>\n"
         << "  <head>\n"
         << "    <title>" << title << "</title>\n"
         << "    <link rel=\"stylesheet\" type=\"text/css\" href=\"toolbar.css\">\n"
         << "    <style>\n"
         << "      .menu {\n"
         << "        float:left;\n"
         << "        width:20%;\n"
         << "        height:100%;\n"
         << "      }\n"
         << "      .main {\n"
         << "        float:left;\n"
         << "        width:79%;\n"
         << "        height:100%;\n"
         << "      }\n"
         << "    </style>\n"
         << "  </head>\n"
         << "  <body>\n"
         << "    <iframe class=\"menu\" src=\"opwind_menu.html?opplace=" << opplaceweb_name << "\"></iframe>\n"
         << "    <iframe class=\"main\" src=\"" << start_URL << "\"></iframe>\n"
         << "  </body>\n"
         << "</html>\n";

  fp_ows.close();

  printf("-- Web startpage generated $pwrp_web/%s\n", file_name);
#endif
  return 1;
}

int Graph::generate_web_help()
{
  pwr_tStatus sts;
  pwr_tFileName fname;

  // Copy default css-file to pwrp_web
  system("cp $pwr_exe/pwr_css.css $pwrp_web/");

  // If $pwrp_load/xtt_help.dat exist convert this to html
  sts = dcli_search_file(pwr_cNameProjectXttHelp, fname, DCLI_DIR_SEARCH_INIT);
  if (ODD(sts)) {
    system("co_convert -d $pwrp_web -t " pwr_cNameProjectXttHelp);
  }
  sts = dcli_search_file(pwr_cNameProjectXttHelp, fname, DCLI_DIR_SEARCH_END);
  return 1;
}

//
//  Get width and height for applet from generated html-file
//
#if 0
static int graph_get_applet_size(char* graphname, int* width, int* height)
{
  char fname[200];
  FILE* file;
  int w = 0, h = 0;
  int width_found = 0;
  int height_found = 0;
  char* s;
  char line[400];

  sprintf(fname, "$pwrp_web/%s.html", graphname);
  dcli_translate_filename(fname, fname);

  file = fopen(fname, "r");
  if (!file)
    return GE__NOFILE;

  while (dcli_read_line(line, sizeof(line), file)) {
    if (width_found && height_found)
      break;
    if ((s = strstr(line, "width="))) {
      if (sscanf(s + 6, "%d", &w) == 1)
        width_found = 1;
      continue;
    }
    if ((s = strstr(line, "height="))) {
      if (sscanf(s + 7, "%d", &h) == 1)
        height_found = 1;
      continue;
    }
  }
  fclose(file);
  if (width_found && height_found) {
    *width = w;
    *height = h;
    return GE__SUCCESS;
  }
  return GE__NOSIZE;
}
#endif
