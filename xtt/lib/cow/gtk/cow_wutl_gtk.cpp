/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include "cow_wow_gtk.h"
#include "cow_wutl_gtk.h"
#include "co_dcli.h"

GtkToolItem* wutl_tools_item(GtkToolbar *tools, const char *img, GCallback cb, const char* tooltip, void *ctx, int disable_focus, int translate)
{
  pwr_tFileName fname;
  GtkToolItem* item;

  dcli_translate_filename(fname, img);
  item = gtk_tool_button_new(gtk_image_new_from_file(fname), NULL);
  if (cb)
    g_signal_connect(item, "clicked", cb, ctx);
  if (disable_focus)
    g_object_set(tools, "can-focus", FALSE, NULL);
  gtk_toolbar_insert(tools, item, -1);
  if (tooltip) {
    if (translate)
      gtk_tool_item_set_tooltip_text(item, CoWowGtk::translate_utf8(tooltip));
    else
      gtk_tool_item_set_tooltip_text(item, CoWowGtk::convert_utf8(tooltip));
  }
  return item;
}

GtkToolItem* wutl_tools_toggle_button(GtkToolbar *tools, const char *img, GCallback cb, const char* tooltip, void *ctx, int disable_focus, int translate)
{
  pwr_tFileName fname;
  GtkToolItem* item;

  dcli_translate_filename(fname, img);
  item = gtk_toggle_tool_button_new();
  gtk_tool_button_set_label(GTK_TOOL_BUTTON(item), "");
  gtk_tool_button_set_icon_widget(GTK_TOOL_BUTTON(item), gtk_image_new_from_file(fname));
  g_signal_connect(item, "clicked", cb, ctx);
  if (disable_focus)
    g_object_set(tools, "can-focus", FALSE, NULL);
  gtk_toolbar_insert(tools, item, -1);
  if (translate)
    gtk_tool_item_set_tooltip_text(item, CoWowGtk::translate_utf8(tooltip));
  else
    gtk_tool_item_set_tooltip_text(item, CoWowGtk::convert_utf8(tooltip));

  return item;
}

void wutl_widget_name_suffix_add(GtkWidget *w, const char *suffix)
{
  char name[80];
  char *s;

  strncpy(name, gtk_widget_get_name(w), sizeof(name));
  if ((s = strchr(name, '_'))) {
    if (strcmp(s+1, suffix) == 0)
      return;
    *s = 0;
  }
  strcat(name, "_");
  strcat(name, suffix);
  gtk_widget_set_name(w, name);
}

void wutl_widget_name_suffix_sub(GtkWidget *w)
{
  char name[80];
  char *s;

  strncpy(name, gtk_widget_get_name(w), sizeof(name));
  if (!(s = strchr(name, '_')))
    return;
  *s = 0;
  gtk_widget_set_name(w, name);
}
