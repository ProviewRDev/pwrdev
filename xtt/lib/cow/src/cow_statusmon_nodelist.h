/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2023 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef cow_statusmon_nodelist_h
#define cow_statusmon_nodelist_h

/* cow_statusmon_nodelist.h -- Status Monitor node list */

#ifndef cow_statusmon_nodelistnav
#include "cow_statusmon_nodelistnav.h"
#endif

class CoWow;
class MsgWindow;
class CowGe;

class NlApplListElem {
 public:
  char name[80];
  CowGe* gectx;

  NlApplListElem() : gectx(0) {
    strcpy(name, "");
  }
  NlApplListElem(const NlApplListElem& x) : gectx(x.gectx) {
    strcpy(name, x.name);
  }
};

class NlApplList {
 public:
  std::vector<NlApplListElem> list;
  void add(NlApplListElem& e) {
    list.push_back(e);
  }
  CowGe* find(char *name) {
    for (int i = 0; i < list.size(); i++) {
      if (strcmp(list[i].name, name) == 0)
	return list[i].gectx;
    }
    return 0;
  }
  void remove(char* name) {
    for (int i = 0; i < list.size(); i++) {
      if (strcmp(list[i].name, name) == 0) {
	list.erase(list.begin() + i);
	return;
      }
    }
  }
  void remove(CowGe* gectx) {
    for (int i = 0; i < list.size(); i++) {
      if (gectx == list[i].gectx) {
	list.erase(list.begin() + i);
	return;
      }
    }
  }
};

class Nodelist {
public:
  Nodelist(void* nodelist_parent_ctx, const char* nodelist_name,
      int nodelist_mode, nl_mLayout nodelist_layout, pwr_tStatus* status);
  virtual ~Nodelist();

  void* parent_ctx;
  char name[80];
  NodelistNav* nodelistnav;
  int nodelist_displayed;
  void (*help_cb)(void*, const char*);
  void (*close_cb)(void*);
  void (*add_india_ok_cb)(Nodelist*, char*, char*, char*, char*, char*);
  void (*mod_india_ok_cb)(Nodelist*, char*, char*, char*, char*, char*);
  CoWow* wow;
  MsgWindow* msg_window;
  char remote_gui[20];
  int mode;
  nl_mLayout layout;
  int selected_idx;
  CowGe *map_gectx;
  int scriptmode;
  int verify;
  int ccm_func_registred;
  NlApplList appl;
  int command_open;

  virtual void pop()
  {
  }
  virtual void set_clock_cursor()
  {
  }
  virtual void reset_cursor()
  {
  }
  virtual void free_cursor()
  {
  }
  virtual void open_add_input_dialog(const char* text, const char* text2,
      const char* text3, const char* text4, const char *text5, const char* title, 
      const char* init_text,
      void (*ok_cb)(Nodelist*, char*, char*, char*, char*, char*))
  {
  }
  virtual void open_mod_input_dialog(const char* text, const char* text2,
      const char* text3, const char* text4, const char *text5, const char* title, 
      const char* init_text, const char* init_text2, const char* init_text3, 
      const char* init_text4,const char* init_text5,
      void (*ok_cb)(Nodelist*, char*, char*, char*, char*, char*))
  {
  }

  void set_scantime(float scantime)
  {
    nodelistnav->scantime = int(scantime * 1000);
  }

  virtual CowGe* ge_new(const char* name, const char* filename,
      int scrollbar, int menu, int navigator, int width, int height, int x, int y,
      double scan_time, const char* object_name, int use_default_access,
      unsigned int access, unsigned int options, void* basewidget,
      double* borders, int color_theme, int dashboard,
      int (*command_cb)(void*, char*, char*, char *, void*),
      int (*get_current_objects_cb)(void*, pwr_sAttrRef**, int**),
      int (*is_authorized_cb)(void*, unsigned int),
      void (*keyboard_cb)(void*, void*, int, int),
      int (*extern_connect_cb)(void*, char*, void**, pwr_tRefId*))
  {
    return 0;
  }

  void activate_help();
  void activate_add_node();
  void activate_modify_node();
  void activate_remove_node();
  void activate_open_xtt();
  void activate_open_opplace();
  void activate_open_rtmon();
  void activate_open_map();
  void activate_save();
  void activate_reconnect();
  static void find_node_cb(void* ctx, pwr_tOid oid);
  static void add_node_ok(
      Nodelist* nodelist, char* node_name, char *address, char *busid, char* description, 
      char* opplace);
  static void mod_node_ok(
      Nodelist* nodelist, char* node_name, char *address, char* busid, char* description, 
      char* opplace);

  virtual void message(char severity, const char *msg);
  int command(char* input_str);
  int readcmdfile(char* incommand, char *script);
  int open_graph(char *name, char *title, int width, int height);
};

#endif
