/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2025 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <math.h>

#include "flow_draw_gtk.h"
#include "flow_widget_gtk.h"

typedef struct _FlowWidgetGtk FlowWidgetGtk;
typedef struct _FlowWidgetGtkClass FlowWidgetGtkClass;
typedef struct _FlowWidgetGtkPrivate FlowWidgetGtkPrivate;

typedef struct {
  GtkWidget* flow;
  GtkWidget* form;
  GtkWidget* scroll_h;
  GtkWidget* scroll_v;
  int scroll_h_managed;
  int scroll_v_managed;
} flowwidget_sScroll;

struct _FlowWidgetGtk {
  GtkDrawingArea bin;
  FlowWidgetGtkPrivate *priv;
};
  
struct _FlowWidgetGtkPrivate {
  GdkWindow *window;
  void* flow_ctx;
  void* draw_ctx;
  int (*init_proc)(FlowCtx* ctx, void* clien_data);
  int is_navigator;
  void* client_data;
  GtkWidget* main_flow_widget;
  GtkWidget* scroll_h;
  GtkWidget* scroll_v;
  GtkWidget* form;
  int scroll_h_ignore;
  int scroll_v_ignore;
  gdouble scroll_h_value;
  gdouble scroll_v_value;
  int scroll_h_pagesize;
  int scroll_v_pagesize;
  int scroll_h_upper;
  int scroll_v_upper;
  gint scroll_timerid;
  flow_sScroll scroll_data;
  int scroll_configure;
  int destroyed;
  GtkAdjustment* hadjustment;
  GtkAdjustment* vadjustment;
  guint hscroll_policy : 1;
  guint vscroll_policy : 1;
};

enum {
  PROP_0,
  PROP_HADJUSTMENT,
  PROP_VADJUSTMENT,
  PROP_HSCROLL_POLICY,
  PROP_VSCROLL_POLICY
};

struct _FlowWidgetGtkClass {
  GtkDrawingAreaClass parent_class;
};

G_DEFINE_TYPE_WITH_CODE(FlowWidgetGtk, flowwidgetgtk, GTK_TYPE_DRAWING_AREA,
			G_ADD_PRIVATE(FlowWidgetGtk)
			G_IMPLEMENT_INTERFACE(GTK_TYPE_SCROLLABLE, NULL));

static gboolean scroll_callback_cb(void* d);
static void flowwidgetgtk_get_property(GObject *object, guint prop_id, 
				       GValue *value, GParamSpec *pspec);
static void flowwidgetgtk_set_property(GObject *object, guint prop_id, 
				       const GValue *value, GParamSpec *pspec);


static void scroll_callback(flow_sScroll* data)
{
  flowwidget_sScroll* scroll_data = (flowwidget_sScroll*)data->scroll_data;
  FlowWidgetGtkPrivate *flow = (FlowWidgetGtkPrivate *)((FlowWidgetGtk*)scroll_data->flow)->priv;

  if (flow->scroll_timerid)
    g_source_remove(flow->scroll_timerid);

  flow->scroll_timerid
      = g_timeout_add(200, scroll_callback_cb, scroll_data->flow);
  flow->scroll_data = *data;
}

static gboolean scroll_callback_cb(void* d)
{
  FlowWidgetGtkPrivate *flow = ((FlowWidgetGtk*)d)->priv;
  flow_sScroll* data = &flow->scroll_data;
  flowwidget_sScroll* scroll_data = (flowwidget_sScroll*)data->scroll_data;
  GtkAdjustment *adj;

  flow->scroll_timerid = 0;

  if (data->total_width <= data->window_width) {
    if (data->offset_x == 0)
      data->total_width = data->window_width;
    if (scroll_data->scroll_h_managed) {
      // Remove horizontal scrollbar
    }
  } else {
    if (!scroll_data->scroll_h_managed) {
      // Insert horizontal scrollbar
    }
  }

  if (data->total_height <= data->window_height) {
    if (data->offset_y == 0)
      data->total_height = data->window_height;
    if (scroll_data->scroll_v_managed) {
      // Remove vertical scrollbar
    }
  } else {
    if (!scroll_data->scroll_v_managed) {
      // Insert vertical scrollbar
    }
  }
  if (data->offset_x < 0) {
    data->total_width += -data->offset_x;
    data->offset_x = 0;
  }
  if (data->offset_y < 0) {
    data->total_height += -data->offset_y;
    data->offset_y = 0;
  }
  if (data->total_height < data->window_height + data->offset_y)
    data->total_height = data->window_height + data->offset_y;
  if (data->total_width < data->window_width + data->offset_x)
    data->total_width = data->window_width + data->offset_x;
  if (data->window_width < 1)
    data->window_width = 1;
  if (data->window_height < 1)
    data->window_height = 1;

  if (scroll_data->scroll_h_managed) {
    flow->scroll_h_ignore = 1;
    if (data->window_width != flow->scroll_h_pagesize
        || data->total_width != flow->scroll_h_upper
        || flow->scroll_configure) {
      adj = gtk_range_get_adjustment(GTK_RANGE(scroll_data->scroll_h));
      gtk_adjustment_set_value(adj, data->offset_x);
      gtk_adjustment_set_upper(adj, data->total_width);
      gtk_adjustment_set_page_size(adj, data->window_width);
    } else {
      adj = gtk_range_get_adjustment(GTK_RANGE(scroll_data->scroll_h));
      gtk_adjustment_set_value(adj, data->offset_x);
    }
    flow->scroll_h_value = (gdouble)data->offset_x;
    flow->scroll_h_pagesize = data->window_width;
    flow->scroll_h_upper = data->total_width;
  }

  if (scroll_data->scroll_v_managed) {
    flow->scroll_v_ignore = 1;
    if (data->window_height != flow->scroll_v_pagesize
        || data->total_height != flow->scroll_v_upper
        || flow->scroll_configure) {
      adj = gtk_range_get_adjustment(GTK_RANGE(scroll_data->scroll_v));
      gtk_adjustment_set_upper(adj, data->total_height);
      gtk_adjustment_set_page_size(adj, data->window_height);
      gtk_range_set_value(
          GTK_RANGE(scroll_data->scroll_v), (gdouble)data->offset_y);
    } else {
      gtk_range_set_value(
          GTK_RANGE(scroll_data->scroll_v), (gdouble)data->offset_y);
    }
    flow->scroll_v_value = (gdouble)data->offset_y;
    flow->scroll_v_pagesize = data->window_height;
    flow->scroll_v_upper = data->total_height;
  }
  flow->scroll_configure = 0;
  return FALSE;
}

static void scroll_h_action(GtkWidget* w, gpointer data)
{
  FlowWidgetGtkPrivate* floww = ((FlowWidgetGtk*)data)->priv;

  if (floww->scroll_h_ignore) {
    floww->scroll_h_ignore = 0;
    return;
  }

  FlowCtx* ctx = (FlowCtx*)floww->flow_ctx;
  gdouble value;
  value = gtk_range_get_value(GTK_RANGE(floww->scroll_h));

  if (feq(value, 0.0) && ABS(floww->scroll_h_value) > 2) {
    // Probably a resize that seems to set value to zero, set old value
    ctx->change_scrollbar();
    return;
  }
  floww->scroll_h_value = value;

  flow_scroll_horizontal(ctx, int(value), 0);
}

static void scroll_v_action(GtkWidget* w, gpointer data)
{
  FlowWidgetGtkPrivate* floww = ((FlowWidgetGtk*)data)->priv;

  if (floww->scroll_v_ignore) {
    floww->scroll_v_ignore = 0;
    return;
  }

  FlowCtx* ctx = (FlowCtx*)floww->flow_ctx;
  gdouble value;
  value = gtk_range_get_value(GTK_RANGE(floww->scroll_v));

  if (feq(value, 0.0) && ABS(floww->scroll_v_value) > 2) {
    // Probably a resize that seems to set value to zero, set old value
    ctx->change_scrollbar();
    return;
  }
  floww->scroll_v_value = value;

  flow_scroll_vertical(ctx, int(value), 0);
}

static int flow_init_proc(GtkWidget* w, FlowCtx* fctx, void* client_data)
{
  flowwidget_sScroll* scroll_data;
  FlowCtx* ctx;

  ctx = (FlowCtx*)((FlowWidgetGtk*)w)->priv->flow_ctx;

  if (((FlowWidgetGtk*)w)->priv->scroll_h) {
    scroll_data = (flowwidget_sScroll*)malloc(sizeof(flowwidget_sScroll));
    scroll_data->flow = w;
    scroll_data->scroll_h = ((FlowWidgetGtk*)w)->priv->scroll_h;
    scroll_data->scroll_v = ((FlowWidgetGtk*)w)->priv->scroll_v;
    scroll_data->form = ((FlowWidgetGtk*)w)->priv->form;
    scroll_data->scroll_h_managed = 1;
    scroll_data->scroll_v_managed = 1;

    ctx->register_scroll_callback((void*)scroll_data, scroll_callback);
  }
  return (((FlowWidgetGtk*)w)->priv->init_proc)(ctx, client_data);
}

static gboolean flowwidgetgtk_expose(GtkWidget* flow, cairo_t* cr)
{
  ((FlowDrawGtk*)((FlowCtx*)((FlowWidgetGtk*)flow)->priv->flow_ctx)->fdraw)
    ->expose((FlowCtx*)((FlowWidgetGtk*)flow)->priv->flow_ctx, cr, 
    ((FlowWidgetGtk*)flow)->priv->is_navigator);
  return TRUE;
}

static gboolean flowwidgetgtk_event(GtkWidget* flow, GdkEvent* event)
{
  if (((FlowWidgetGtk*)flow)->priv->destroyed)
    return TRUE;

  if (event->type == GDK_MOTION_NOTIFY) {
    gdk_display_flush(
        ((FlowDrawGtk*)((FlowCtx*)((FlowWidgetGtk*)flow)->priv->flow_ctx)->fdraw)
            ->display);
    GdkEvent* next = gdk_event_peek();
    if (next && next->type == GDK_MOTION_NOTIFY) {
      gdk_event_free(next);
      return TRUE;
    } else if (next)
      gdk_event_free(next);
  } else if (event->type == GDK_CONFIGURE) {
    ((FlowWidgetGtk*)flow)->priv->scroll_configure = 1;
  }

  ((FlowDrawGtk*)((FlowCtx*)((FlowWidgetGtk*)flow)->priv->flow_ctx)->fdraw)
      ->event_handler((FlowCtx*)((FlowWidgetGtk*)flow)->priv->flow_ctx, *event);
  return TRUE;
}

static void flowwidgetgtk_realize(GtkWidget* widget)
{
  GdkWindowAttr attr;
  gint attr_mask;
  FlowWidgetGtk* flow;
  GtkAllocation allocation;

  g_return_if_fail(widget != NULL);
  g_return_if_fail(IS_FLOWWIDGETGTK(widget));

  gtk_widget_set_realized(widget, TRUE);
  flow = FLOWWIDGETGTK(widget);

  gtk_widget_get_allocation(widget, &allocation);
  attr.x = allocation.x;
  attr.y = allocation.y;
  attr.width = allocation.width;
  attr.height = allocation.height;
  attr.wclass = GDK_INPUT_OUTPUT;
  attr.window_type = GDK_WINDOW_CHILD;
  attr.event_mask = gtk_widget_get_events(widget) | GDK_EXPOSURE_MASK
      | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK | GDK_KEY_PRESS_MASK
      | GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK
      | GDK_BUTTON_MOTION_MASK | GDK_ENTER_NOTIFY_MASK | GDK_SCROLL_MASK
      | GDK_LEAVE_NOTIFY_MASK;
  attr.visual = gtk_widget_get_visual(widget);

  attr_mask = GDK_WA_X | GDK_WA_Y | GDK_WA_VISUAL;
  flow->priv->window = gdk_window_new(gtk_widget_get_parent_window(widget), &attr, attr_mask);
  gtk_widget_set_window(widget, flow->priv->window);
  gtk_widget_register_window(widget, flow->priv->window);
  //widget->style = gtk_style_attach(widget->style, widget->window);
  //gtk_style_set_background(widget->style, widget->window, GTK_STATE_ACTIVE);

  gtk_widget_set_can_focus(widget, TRUE);

  if (flow->priv->is_navigator) {
    if (!flow->priv->flow_ctx) {
      FlowWidgetGtk* main_flow = (FlowWidgetGtk*)flow->priv->main_flow_widget;

      flow->priv->flow_ctx = main_flow->priv->flow_ctx;
      flow->priv->draw_ctx = main_flow->priv->draw_ctx;
      ((FlowDrawGtk*)flow->priv->draw_ctx)->init_nav(widget, flow->priv->flow_ctx);
    }
  } else {
    if (!flow->priv->flow_ctx) {
      flow->priv->draw_ctx = new FlowDrawGtk(widget, &flow->priv->flow_ctx, flow_init_proc,
          flow->priv->client_data, flow_eCtxType_Flow);
    }
  }
}

static void flowwidgetgtk_destroy(GtkWidget* widget)
{
  FlowWidgetGtk* flow = (FlowWidgetGtk*)widget;

  if (!flow->priv->destroyed) {
    flow->priv->destroyed = 1;
    if (flow->priv->scroll_timerid)
      g_source_remove(flow->priv->scroll_timerid);
    if (!flow->priv->is_navigator)
      delete (FlowDrawGtk*)flow->priv->draw_ctx;
    if (flow->priv->hadjustment)
      g_object_unref(flow->priv->hadjustment);
    if (flow->priv->vadjustment)
      g_object_unref(flow->priv->vadjustment);
  }
  GTK_WIDGET_CLASS(flowwidgetgtk_parent_class)->destroy(widget);
}

static void flowwidgetgtk_class_init(FlowWidgetGtkClass* klass)
{
  GtkWidgetClass* widget_class = GTK_WIDGET_CLASS(klass);
  GObjectClass* gobject_class = G_OBJECT_CLASS(klass);

  widget_class->realize = flowwidgetgtk_realize;
  widget_class->draw = flowwidgetgtk_expose;
  widget_class->event = flowwidgetgtk_event;
  widget_class->destroy = flowwidgetgtk_destroy;
  gobject_class->set_property = flowwidgetgtk_set_property;
  gobject_class->get_property = flowwidgetgtk_get_property;

  gtk_widget_class_set_css_name(widget_class, "flowwidget");

  // GtkScrollable interface
  g_object_class_override_property(gobject_class, PROP_HADJUSTMENT, "hadjustment");
  g_object_class_override_property(gobject_class, PROP_VADJUSTMENT, "vadjustment");
  g_object_class_override_property(gobject_class, PROP_HSCROLL_POLICY, "hscroll-policy");
  g_object_class_override_property(gobject_class, PROP_VSCROLL_POLICY, "vscroll-policy");
}

static void flowwidgetgtk_init(FlowWidgetGtk* flow)
{
  flow->priv = (FlowWidgetGtkPrivate *)flowwidgetgtk_get_instance_private(flow);
}

GtkWidget* flowwidgetgtk_new(
    int (*init_proc)(FlowCtx* ctx, void* client_data), void* client_data)
{
  FlowWidgetGtk* w;
  w = (FlowWidgetGtk*)g_object_new(FLOWWIDGETGTK_TYPE, NULL);
  w->priv->init_proc = init_proc;
  w->priv->flow_ctx = 0;
  w->priv->is_navigator = 0;
  w->priv->client_data = client_data;
  w->priv->scroll_h = 0;
  w->priv->scroll_v = 0;
  w->priv->hadjustment = NULL;
  w->priv->vadjustment = NULL;
  w->priv->destroyed = 0;
  return (GtkWidget*)w;
}

GtkWidget* scrolledflowwidgetgtk_new(
    int (*init_proc)(FlowCtx* ctx, void* client_data), void* client_data,
    GtkWidget** flowwidget)
{
  FlowWidgetGtk* w;

  GtkWidget* form = gtk_scrolled_window_new(NULL, NULL);

  w = (FlowWidgetGtk*)g_object_new(FLOWWIDGETGTK_TYPE, NULL);
  w->priv->init_proc = init_proc;
  w->priv->flow_ctx = 0;
  w->priv->is_navigator = 0;
  w->priv->client_data = client_data;
  w->priv->scroll_h = gtk_scrolled_window_get_hscrollbar(GTK_SCROLLED_WINDOW(form));
  w->priv->scroll_v = gtk_scrolled_window_get_vscrollbar(GTK_SCROLLED_WINDOW(form));
  w->priv->scroll_h_ignore = 0;
  w->priv->scroll_v_ignore = 0;
  w->priv->scroll_h_value = 0;
  w->priv->scroll_v_value = 0;
  w->priv->scroll_configure = 0;
  w->priv->form = form;
  w->priv->hadjustment = gtk_adjustment_new(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  w->priv->vadjustment = gtk_adjustment_new(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  w->priv->destroyed = 0;

  *flowwidget = GTK_WIDGET(w);

  g_signal_connect(gtk_range_get_adjustment(GTK_RANGE((GtkScrollbar*)w->priv->scroll_h)),
      "value-changed", G_CALLBACK(scroll_h_action), w);
  g_signal_connect(gtk_range_get_adjustment(GTK_RANGE((GtkScrollbar*)w->priv->scroll_v)),
      "value-changed", G_CALLBACK(scroll_v_action), w);

  gtk_container_add(GTK_CONTAINER(form), GTK_WIDGET(w));

  gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(form), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);

  return (GtkWidget*)form;
}

GtkWidget* flownavwidgetgtk_new(GtkWidget* main_flow)
{
  FlowWidgetGtk* w;
  w = (FlowWidgetGtk*)g_object_new(FLOWWIDGETGTK_TYPE, NULL);
  w->priv->init_proc = 0;
  w->priv->flow_ctx = 0;
  w->priv->is_navigator = 1;
  w->priv->main_flow_widget = main_flow;
  w->priv->client_data = 0;
  w->priv->scroll_h = 0;
  w->priv->scroll_v = 0;
  w->priv->scroll_h_ignore = 0;
  w->priv->scroll_v_ignore = 0;
  w->priv->scroll_h_value = 0;
  w->priv->scroll_v_value = 0;
  w->priv->scroll_configure = 0;
  w->priv->hadjustment = NULL;
  w->priv->vadjustment = NULL;
  w->priv->destroyed = 0;
  return (GtkWidget*)w;
}

static void flowwidgetgtk_set_property(GObject *object, guint prop_id, 
				       const GValue *value, GParamSpec *pspec)
{
  //FlowWidgetGtk *flow = (FlowWidgetGtk *)object;

  switch (prop_id) {
  case PROP_HADJUSTMENT:
    break;
  case PROP_VADJUSTMENT:
    break;
  case PROP_HSCROLL_POLICY:
    break;
  case PROP_VSCROLL_POLICY:
    break;
  }
}

static void flowwidgetgtk_get_property(GObject *object, guint prop_id, 
				       GValue *value, GParamSpec *pspec)
{
  FlowWidgetGtk *flow = (FlowWidgetGtk *)object;

  switch (prop_id) {
  case PROP_HADJUSTMENT:
    g_value_set_object(value, flow->priv->hadjustment);
    break;
  case PROP_VADJUSTMENT:
    g_value_set_object(value, flow->priv->vadjustment);
    break;
  case PROP_HSCROLL_POLICY:
    g_value_set_enum(value, flow->priv->hscroll_policy);
    break;
  case PROP_VSCROLL_POLICY:
    g_value_set_enum(value, flow->priv->vscroll_policy);
    break;
  }
}

void flowwidgetgtk_modify_ctx(GtkWidget* w, void* ctx)
{
  ((FlowWidgetGtk*)w)->priv->flow_ctx = ctx;
}
