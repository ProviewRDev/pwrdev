/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2024 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <ctype.h>
#include <string.h>
#include <math.h>

#include <iostream>

#include <gdk/gdkkeysyms.h>
#include <gdk/gdkx.h>
#if defined PWRE_CONF_RSVG
#include <rsvg.h>
#endif

#include "co_string.h"
#include "glow_browctx.h"
#include "glow_colpalctx.h"
#include "glow_curvectx.h"
#include "glow_customcolors_gtk.h"
#include "glow_keyboardctx.h"
#include "glow_msg.h"

using namespace std;

#define DRAW_PRESS_PIX 9
#define DRAW_TSCALE 0.93

typedef struct {
  GtkWidget w;
  int x;
  int y;
  int width;
  int height;
  GlowArrayElem* node;
  int number;
  GlowCtx* ctx;
} draw_sAnnotData;

typedef struct {
  GlowCtx* ctx;
  void (*callback_func)(GlowCtx* ctx);
  guint timer_id;
} draw_sTimerCb;

typedef struct {
  Pixmap pixmap[DRAW_PIXMAP_SIZE];
} draw_sPixmap;

typedef struct {
  int red;
  int green;
  int blue;
} draw_sColor;

char GlowDrawGtk::font_names[glow_eFont__][40] = {"Helvetica",
				       "Times",
				       "New century schoolbook",
				       "Courier",
				       "Lucida Sans"};

static GdkEvent last_event;

static void event_timer(GlowDrawGtk* ctx, int time_ms);
static void cancel_event_timer(GlowDrawGtk* ctx);
static gboolean event_timer_cb(void* ctx);
static int glow_read_color_file(
    const char* filename, draw_sColor** color_array, int* size);

static cairo_pattern_t* get_gc(GlowDrawGtk* draw_ctx, int i, int j)
{
  int crea = 0;

  if (GlowColor::is_custom((glow_eDrawType)i)) {
    if (!draw_ctx->get_customcolors())
      return draw_ctx->gcs[0];
    if (!draw_ctx->get_customcolors()->gcs[i - glow_eDrawType_CustomColor1])
      crea = 1;
  } else if (!draw_ctx->gcs[i])
    crea = 1;

  if (crea) {
    double r, g, b;

    GlowColor::rgb_color(i, &r, &g, &b, draw_ctx->get_customcolors());
    if (GlowColor::is_custom((glow_eDrawType)i)) {
      draw_ctx->get_customcolors()->gcs[i - glow_eDrawType_CustomColor1]
          = cairo_pattern_create_rgb(r, g, b);
      //printf("C Custom:  %4d %llu\n", i - glow_eDrawType_CustomColor1, (unsigned long long)draw_ctx->get_customcolors()->gcs[i - glow_eDrawType_CustomColor1]);
      cairo_pattern_reference(draw_ctx->get_customcolors()->gcs[i - glow_eDrawType_CustomColor1]);
    }
    else {
      draw_ctx->gcs[i] = cairo_pattern_create_rgb(r, g, b);
      cairo_pattern_reference(draw_ctx->gcs[i]);
      //printf("C Regular: %4d %llu\n", i, (unsigned long long)draw_ctx->gcs[i]);
    }
  }
  if (GlowColor::is_custom((glow_eDrawType)i))
    return draw_ctx->get_customcolors()->gcs[i - glow_eDrawType_CustomColor1];
  else
    return draw_ctx->gcs[i];

}

static int glow_create_cursor(GlowDrawGtk* draw_ctx)
{
  /* Create some cursors */

  /* Cross cursor */
  draw_ctx->cursors[glow_eDrawCursor_CrossHair]
      = gdk_cursor_new_for_display(draw_ctx->display, GDK_CROSSHAIR);

  draw_ctx->cursors[glow_eDrawCursor_DiamondCross]
      = gdk_cursor_new_for_display(draw_ctx->display, GDK_DIAMOND_CROSS);

  draw_ctx->cursors[glow_eDrawCursor_Hand]
      = gdk_cursor_new_for_display(draw_ctx->display, GDK_HAND2);

  draw_ctx->cursors[glow_eDrawCursor_BottomLeftCorner]
      = gdk_cursor_new_for_display(draw_ctx->display, GDK_BOTTOM_LEFT_CORNER);

  draw_ctx->cursors[glow_eDrawCursor_BottomRightCorner]
      = gdk_cursor_new_for_display(draw_ctx->display, GDK_BOTTOM_RIGHT_CORNER);

  draw_ctx->cursors[glow_eDrawCursor_BottomSide]
      = gdk_cursor_new_for_display(draw_ctx->display, GDK_BOTTOM_SIDE);

  draw_ctx->cursors[glow_eDrawCursor_TopLeftCorner]
      = gdk_cursor_new_for_display(draw_ctx->display, GDK_TOP_LEFT_CORNER);

  draw_ctx->cursors[glow_eDrawCursor_TopRightCorner]
      = gdk_cursor_new_for_display(draw_ctx->display, GDK_TOP_RIGHT_CORNER);

  draw_ctx->cursors[glow_eDrawCursor_TopSide]
      = gdk_cursor_new_for_display(draw_ctx->display, GDK_TOP_SIDE);

  draw_ctx->cursors[glow_eDrawCursor_RightSide]
      = gdk_cursor_new_for_display(draw_ctx->display, GDK_RIGHT_SIDE);

  draw_ctx->cursors[glow_eDrawCursor_LeftSide]
      = gdk_cursor_new_for_display(draw_ctx->display, GDK_LEFT_SIDE);

  return 1;
}

static int draw_free_gc(GlowDrawGtk* draw_ctx)
{
  cairo_pattern_destroy(draw_ctx->gc_black);
  cairo_pattern_destroy(draw_ctx->gc_red);
  cairo_pattern_destroy(draw_ctx->gc_inverse);

  for (int i = 1; i < glow_eDrawCursor__; i++)
    g_object_unref(draw_ctx->cursors[i]);

  for (int i = 0; i < glow_eDrawType_CustomColor__; i++) {
    if (draw_ctx->gcs[i]) {
      cairo_pattern_destroy(draw_ctx->gcs[i]);
      //printf("X Regular: %4d %llu\n", i, (unsigned long long)draw_ctx->gcs[i]);
    }
  }
  return 1;
}

static int glow_create_gc(GlowDrawGtk* draw_ctx, GdkWindow* window)
{
  draw_ctx->gc_black = cairo_pattern_create_rgb(0.0, 0.0, 0.0);
  draw_ctx->gc_red = cairo_pattern_create_rgb(1.0, 0.2, 0.2);
  draw_ctx->gc_inverse = cairo_pattern_create_rgb(0.0, 0.0, 0.0);
  draw_ctx->gc_erase = get_gc(draw_ctx, glow_eDrawType_Color32, 0);

  if (0) {
    draw_sColor *color_array;
    int size, sts;
    sts = glow_read_color_file(
        "/home/claes/test/ge_colors.dat", &color_array, &size);
  }
  return 1;
}

DrawWindGtk::DrawWindGtk()
    : toplevel(0), shell(0), window(0), clip_on(0), clip_cnt(0), background_pixmap(0),
      background_pixmap_width(0), background_pixmap_height(0)
{
  memset(clip_rectangle, 0, sizeof(clip_rectangle));
}

GlowDrawGtk::~GlowDrawGtk()
{
  closing_down = 1;

  ctx->set_nodraw();
  if (ctx->type() == glow_eCtxType_Grow)
    delete (GrowCtx*)ctx;
  else
    delete ctx;
  draw_free_gc(this);
  free_font_face();

  if (timer_id)
    g_source_remove(timer_id);

}

int GlowDrawGtk::init_nav(GtkWidget* nav_widget)
{
  nav_wind.toplevel = nav_widget;
  nav_wind.window = gtk_widget_get_window(nav_wind.toplevel);

  //gtk_widget_modify_bg(nav_widget, GTK_STATE_NORMAL, &background);
  //  glow_create_gc( this, nav_wind.window);

  ctx->no_nav = 0;

  return 1;
}

GlowDrawGtk::GlowDrawGtk(GtkWidget* toplevel, void** glow_ctx,
    int (*init_proc)(GtkWidget* w, GlowCtx* ctx, void* client_data),
    void* client_data, glow_eCtxType type)
    : ef(0), timer_id(0), click_sensitivity(0), color_vect_cnt(0),
      closing_down(0), customcolors_cnt(0), cairo_cr(0), cairo_cr_refcnt(0), cairo_region(0),
      cairo_context(0), cairo_nav_cr(0), cairo_nav_cr_refcnt(0), cairo_nav_region(0),
      cairo_nav_context(0), erase_stack_cnt(0), antialias(CAIRO_ANTIALIAS_NONE),
      css_background(0)
{
  memset(gcs, 0, sizeof(gcs));
  memset(font_face, 0, sizeof(font_face));
  memset(cursors, 0, sizeof(cursors));
  memset(customcolors, 0, sizeof(customcolors));
  nav_wind.is_nav = 1;

  if (type == glow_eCtxType_Brow)
    ctx = (GlowCtx*)new BrowCtx("Claes context", 20);
  else if (type == glow_eCtxType_Grow)
    ctx = (GlowCtx*)new GrowCtx("Claes context", 20);
  else if (type == glow_eCtxType_ColPal)
    ctx = (GlowCtx*)new ColPalCtx("Claes context", 20);
  else if (type == glow_eCtxType_Keyboard)
    ctx = (GlowCtx*)new KeyboardCtx("Claes context", 20);
  else if (type == glow_eCtxType_Curve)
    ctx = (GlowCtx*)new CurveCtx("Claes context", 20);
  else
    ctx = new GlowCtx("Claes context", 20);
  *glow_ctx = (void*)ctx;

  ctx->gdraw = this;
  m_wind.toplevel = toplevel;

  display = gtk_widget_get_display(m_wind.toplevel);
  m_wind.window = gtk_widget_get_window(m_wind.toplevel);
  m_wind.style_context = gtk_widget_get_style_context(m_wind.toplevel);
  screen = gtk_widget_get_screen(m_wind.toplevel);

  ctx->mw.window = &m_wind;
  ctx->navw.window = &nav_wind;

  if (type == glow_eCtxType_Grow || type == glow_eCtxType_Curve
      || type == glow_eCtxType_Keyboard) {
    ctx->customcolors = create_customcolors();
    push_customcolors(ctx->customcolors);
  }

  glow_create_gc(this, m_wind.window);

  glow_create_cursor(this);

  get_window_size(&ctx->mw, &ctx->mw.window_width, &ctx->mw.window_height);
  init_proc(toplevel, ctx, client_data);
}

int GlowDrawGtk::expose(cairo_t* cr, int is_navigator)
{
  int sts;
  int x, y, width, height;
  GdkRectangle rect;

  if (!is_navigator) {
    pwr_Assert(cairo_cr_refcnt == 0);

    cairo_cr = cr;
    cairo_cr_refcnt++;
    //cairo_save(cairo_cr);
    get_window_size(&ctx->mw, &ctx->mw.window_width, &ctx->mw.window_height);
    if (gdk_cairo_get_clip_rectangle(cr, &rect)) {
      x = rect.x;
      y = rect.y;
      width = rect.width;
      height = rect.height;
    } else {
      x = 0;
      y = 0;
      width = ctx->mw.window_width;
      height = ctx->mw.window_height;
    }
    if (css_background)
      gtk_render_background(((DrawWindGtk *)ctx->mw.window)->style_context, 
	  cr, 0, 0, x + width, y + height);
    else
      draw_background(&ctx->mw, x, y, width, height);
    sts = ctx->event_handler(glow_eEvent_Exposure, x, y, width, height);
    cairo_cr = 0;
    cairo_cr_refcnt--;
    pwr_Assert(cairo_cr_refcnt == 0);
  } else {
    pwr_Assert(cairo_nav_cr_refcnt == 0);

    cairo_nav_cr = cr;
    cairo_nav_cr_refcnt++;
    //cairo_save(cairo_nav_cr);
    draw_background(&ctx->navw, 0, 0, ctx->navw.window_width, ctx->navw.window_height);
    sts = ctx->event_handler_nav(glow_eEvent_Exposure, 0, 0);
    cairo_nav_cr = 0;
    cairo_nav_cr_refcnt--;
    pwr_Assert(cairo_nav_cr_refcnt == 0);
  }
  return sts;
}

int GlowDrawGtk::event_handler(GdkEvent event)
{
  static int button_pressed = 0;
  static int button_clicked = 0;
  static int button_clicked_and_pressed = 0;
  static int button1_pressed = 0;
  static int button2_pressed = 0;
  static int button3_pressed = 0;
  static int last_press_x = 0;
  static int last_press_y = 0;
  int sts = 1;

  if (closing_down)
    return 1;

  //  cout << "Event : button_pressed " << button_pressed << " clicked " <<
  //	button_clicked << " c&p " << button_clicked_and_pressed << endl;

  if (event.any.window == m_wind.window || event.type == GDK_KEY_PRESS) {
    if (GlowCtx::eventlog_enabled)
      log_event(&event);

    switch (event.type) {
    case GDK_KEY_PRESS: {
      guint keysym;

      keysym = event.key.keyval;
      if ((keysym >= 0x020 && keysym <= 0x20ac)
          || (keysym >= 0xFF80 && keysym <= 0xFFB9 && keysym != GDK_KEY_KP_Enter
                 && keysym != 0xFF44)) {
        unsigned char buff;
        // gint unival = gdk_keyval_to_unicode( keysym);
        // gchar utfval[6];
        // g_unichar_to_utf8( unival, utfval);
        // char *isoval = g_convert( utfval, 1, "ISO8859-1", "UTF-8", NULL,
        // NULL, NULL);
        // buff = utfval[0];
        buff = event.key.string[0];

        if (buff >= 0x020)
          sts = ctx->event_handler(glow_eEvent_Key_Ascii, 0, 0, (int)buff, 0);
        else if (buff > 0) {
          sts = ctx->event_handler(
              glow_eEvent_Key_CtrlAscii, 0, 0, (int)buff, 0);
        }
      } else {
        switch (keysym) {
        case GDK_KEY_Return:
        case GDK_KEY_KP_Enter:
        case 0xFF44: // XK_KP_Enter sometimes...
          sts = ctx->event_handler(glow_eEvent_Key_Return, 0, 0, 0, 0);
          break;
        case GDK_KEY_Up:
          sts = ctx->event_handler(glow_eEvent_Key_Up, 0, 0, 0, 0);
          break;
        case GDK_KEY_Down:
          sts = ctx->event_handler(glow_eEvent_Key_Down, 0, 0, 0, 0);
          break;
        case GDK_KEY_Right:
          sts = ctx->event_handler(glow_eEvent_Key_Right, 0, 0, 0, 0);
          break;
        case GDK_KEY_Left:
          sts = ctx->event_handler(glow_eEvent_Key_Left, 0, 0, 0, 0);
          break;
        case GDK_KEY_Page_Up:
          sts = ctx->event_handler(glow_eEvent_Key_PageUp, 0, 0, 0, 0);
          break;
        case GDK_KEY_Page_Down:
          sts = ctx->event_handler(glow_eEvent_Key_PageDown, 0, 0, 0, 0);
          break;
        case GDK_KEY_Delete:
        case GDK_KEY_BackSpace:
          sts = ctx->event_handler(glow_eEvent_Key_BackSpace, 0, 0, 0, 0);
          break;
        case GDK_KEY_KP_F1:
          sts = ctx->event_handler(glow_eEvent_Key_PF1, 0, 0, 0, 0);
          break;
        case GDK_KEY_KP_F2:
          sts = ctx->event_handler(glow_eEvent_Key_PF2, 0, 0, 0, 0);
          break;
        case GDK_KEY_KP_F3:
          sts = ctx->event_handler(glow_eEvent_Key_PF3, 0, 0, 0, 0);
          break;
        case GDK_KEY_KP_F4:
          sts = ctx->event_handler(glow_eEvent_Key_PF4, 0, 0, 0, 0);
          break;
        case GDK_KEY_Cancel:
        case GDK_KEY_Escape:
          sts = ctx->event_handler(glow_eEvent_Key_Escape, 0, 0, 0, 0);
          break;
        case GDK_KEY_Tab:
          if (event.key.state & GDK_SHIFT_MASK)
            sts = ctx->event_handler(glow_eEvent_Key_ShiftTab, 0, 0, 0, 0);
          else
            sts = ctx->event_handler(glow_eEvent_Key_Tab, 0, 0, 0, 0);
          break;
        default:;
        }
      }
      break;
    }
    case GDK_BUTTON_PRESS:
      // cout << "Button press event" << endl;
      //        printf( "-- Button event: (%d,%d) button: %d time:%d\n",
      //        event.xbutton.x,
      //		event.xbutton.y, event.xbutton.button,
      // event.xbutton.time);

      //        XSetInputFocus( display, m_wind.window,
      //		RevertToNone, CurrentTime);

      switch (event.button.button) {
      case 1:
        sts = ctx->event_handler(glow_eEvent_MB1Down, (int)event.button.x,
            (int)event.button.y, 0, 0);
        if (click_sensitivity & glow_mSensitivity_MB1Click
            && !(click_sensitivity & glow_mSensitivity_MB1DoubleClick)
            && !(click_sensitivity & glow_mSensitivity_MB1Press)) {
          memcpy(&last_event, &event, sizeof(event));
          button_pressed = 0;
          button_clicked = 1;
          last_press_x = (int)event.button.x;
          last_press_y = (int)event.button.y;
          return 1;
        } else if (!(click_sensitivity & glow_mSensitivity_MB1Click)
            && !(click_sensitivity & glow_mSensitivity_MB1DoubleClick)
            && click_sensitivity & glow_mSensitivity_MB1Press) {
          memcpy(&last_event, &event, sizeof(event));
          button_pressed = 1;
          button_clicked = 0;
          last_press_x = (int)event.button.x;
          last_press_y = (int)event.button.y;
        }
        break;
      case 3:
        sts = ctx->event_handler(glow_eEvent_MB3Down, (int)event.button.x,
            (int)event.button.y, 0, 0);
        if (click_sensitivity & glow_mSensitivity_MB3Press
            && !(click_sensitivity & glow_mSensitivity_MB3DoubleClick)
            && !(click_sensitivity & glow_mSensitivity_MB3Click)) {
          sts = ctx->event_handler(glow_eEvent_MB3Press, (int)event.button.x,
              (int)event.button.y, 0, 0);
          click_sensitivity = 0;
          return 1;
        } else if (click_sensitivity & glow_mSensitivity_MB3Click
            && !(click_sensitivity & glow_mSensitivity_MB3DoubleClick)
            && !(click_sensitivity & glow_mSensitivity_MB3Press)) {
          memcpy(&last_event, &event, sizeof(event));
          button_pressed = 0;
          button_clicked = 1;
          last_press_x = (int)event.button.x;
          last_press_y = (int)event.button.y;
          return 1;
        }
        break;
      }

      /* Detect press or click event */
      if (button_clicked) {
        /* Wait for release */
        button_clicked_and_pressed = 1;
        cancel_event_timer(this);
        button_clicked = 0;
        memcpy(&last_event, &event, sizeof(event));
        button_pressed = event.button.button;
        last_press_x = (int)event.button.x;
        last_press_y = (int)event.button.y;
        event_timer(this, 200);
        return 1;
      }
      if (!button_pressed) {
        memcpy(&last_event, &event, sizeof(event));
        button_pressed = event.button.button;
        last_press_x = (int)event.button.x;
        last_press_y = (int)event.button.y;
        event_timer(this, 200);
        return 1;
      } else {
        // cout << "Button press detected" << endl;
        /* Press event, callback from timer */
        button_pressed = 0;
        button_clicked_and_pressed = 0;
        switch (event.button.button) {
        case 1: // Button 1

          button1_pressed = 1;
          if ((event.button.state & GDK_SHIFT_MASK)
              && !(event.button.state & GDK_CONTROL_MASK)) {
            sts = ctx->event_handler(glow_eEvent_MB1PressShift,
                (int)event.button.x, (int)event.button.y, 0, 0);
            click_sensitivity = 0;
          } else if (!(event.button.state & GDK_SHIFT_MASK)
              && (event.button.state & GDK_CONTROL_MASK)) {
            sts = ctx->event_handler(glow_eEvent_MB1PressCtrl,
                (int)event.button.x, (int)event.button.y, 0, 0);
            click_sensitivity = 0;
          } else if ((event.button.state & GDK_SHIFT_MASK)
              && (event.button.state & GDK_CONTROL_MASK)) {
            sts = ctx->event_handler(glow_eEvent_MB1PressShiftCtrl,
                (int)event.button.x, (int)event.button.y, 0, 0);
            click_sensitivity = 0;
          } else {
            sts = ctx->event_handler(glow_eEvent_MB1Press, (int)event.button.x,
                (int)event.button.y, 0, 0);
            click_sensitivity = 0;
          }
          break;
        case 2: // Button2
          button2_pressed = 1;
          if ((event.button.state & GDK_SHIFT_MASK)
              && !(event.button.state & GDK_CONTROL_MASK)) {
            sts = ctx->event_handler(glow_eEvent_MB2PressShift,
                (int)event.button.x, (int)event.button.y, 0, 0);
            click_sensitivity = 0;
          } else if (!(event.button.state & GDK_SHIFT_MASK)
              && (event.button.state & GDK_CONTROL_MASK)) {
            sts = ctx->event_handler(glow_eEvent_MB2PressShift,
                (int)event.button.x, (int)event.button.y, 0, 0);
            click_sensitivity = 0;
          } else if ((event.button.state & GDK_SHIFT_MASK)
              && (event.button.state & GDK_CONTROL_MASK)) {
            sts = ctx->event_handler(glow_eEvent_MB2PressShiftCtrl,
                (int)event.button.x, (int)event.button.y, 0, 0);
            click_sensitivity = 0;
          } else {
            sts = ctx->event_handler(glow_eEvent_MB2Press, (int)event.button.x,
                (int)event.button.y, 0, 0);
            click_sensitivity = 0;
          }
          break;
        case 3: // Button3
          button3_pressed = 1;
          sts = ctx->event_handler(glow_eEvent_MB3Press, (int)event.button.x,
              (int)event.button.y, 0, 0);
          click_sensitivity = 0;
          break;
        }
      }
      break;

    case GDK_BUTTON_RELEASE:
      button1_pressed = 0;
      button2_pressed = 0;
      button3_pressed = 0;

      // cout << "Button release event" << endl;

      switch (event.button.button) {
      case Button1:
        sts = ctx->event_handler(
            glow_eEvent_MB1Up, (int)event.button.x, (int)event.button.y, 0, 0);
        break;
      }

      if (!button_pressed) {
        if (button_clicked) {
          /* Button click, callback from timer */
          // cout << "Button click detected state " << event.button.state <<
          // endl;
          button_clicked = 0;
          switch (event.button.button) {
          case 1: // Button1
            if ((event.button.state & GDK_SHIFT_MASK)
                && !(event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB1ClickShift,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else if (!(event.button.state & GDK_SHIFT_MASK)
                && (event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB1ClickCtrl,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else if ((event.button.state & GDK_SHIFT_MASK)
                && (event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB1ClickShiftCtrl,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else {
              sts = ctx->event_handler(glow_eEvent_MB1Click,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            }
            break;
          case 2: // Button2
            if ((event.button.state & GDK_SHIFT_MASK)
                && !(event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB2ClickShift,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else if (!(event.button.state & GDK_SHIFT_MASK)
                && (event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB2ClickCtrl,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else if ((event.button.state & GDK_SHIFT_MASK)
                && (event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB2ClickShiftCtrl,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else {
              sts = ctx->event_handler(glow_eEvent_MB2Click,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            }
            break;
          case 3: // Button3
            sts = ctx->event_handler(glow_eEvent_MB3Click, (int)event.button.x,
                (int)event.button.y, 0, 0);
            if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
              return 1;
            click_sensitivity = 0;
            break;
          }
        } else {
          /* Button release */
          // cout << "Button release detected" << endl;
          sts = ctx->event_handler(glow_eEvent_ButtonRelease,
              (int)event.button.x, (int)event.button.y, 0, 0);
          if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
            return 1;
        }
      } else {
        /* Button click */
        cancel_event_timer(this);
        if (!button_clicked_and_pressed) {
          //  cout << "Button first click detected" << endl;
          /* wait for button double click */
          memcpy(&last_event, &event, sizeof(event));
          button_clicked = 1;
          event_timer(this, 200);
          button_pressed = 0;
          return 1;
        } else {
          /* Button double click */
          // cout << "Button double click detected" << endl;
          cancel_event_timer(this);
          button_clicked = 0;
          button_pressed = 0;
          button_clicked_and_pressed = 0;
          switch (event.button.button) {
          case 1: // Button1
            if ((event.button.state & GDK_SHIFT_MASK)
                && !(event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB1DoubleClickShift,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else if (!(event.button.state & GDK_SHIFT_MASK)
                && (event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB1DoubleClickCtrl,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else if ((event.button.state & GDK_SHIFT_MASK)
                && (event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB1DoubleClickShiftCtrl,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else {
              sts = ctx->event_handler(glow_eEvent_MB1DoubleClick,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            }
            break;
          case 2: // Button2
            if ((event.button.state & GDK_SHIFT_MASK)
                && !(event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB2DoubleClickShift,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else if (!(event.button.state & GDK_SHIFT_MASK)
                && (event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB2DoubleClickCtrl,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else if ((event.button.state & GDK_SHIFT_MASK)
                && (event.button.state & GDK_CONTROL_MASK)) {
              sts = ctx->event_handler(glow_eEvent_MB2DoubleClickShiftCtrl,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            } else {
              sts = ctx->event_handler(glow_eEvent_MB2DoubleClick,
                  (int)event.button.x, (int)event.button.y, 0, 0);
              if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
                return 1;
              click_sensitivity = 0;
            }
            break;
          case 3: // Button3
            break;
          }
        }
      }
      break;
    case GDK_EXPOSE:
      //        printf( "-- Expose event.. x: %d, y: %d, w: %d, h: %d\n",
      //		event.expose.x,
      //		event.expose.y, event.expose.width,
      // event.expose.height);
      sts = ctx->event_handler(glow_eEvent_Exposure, event.expose.area.x,
          event.expose.area.y, event.expose.area.width,
          event.expose.area.height);
      break;
    case GDK_VISIBILITY_NOTIFY:
      switch (event.visibility.state) {
      case GDK_VISIBILITY_UNOBSCURED:
        sts = ctx->event_handler(glow_eEvent_VisibilityUnobscured, 0, 0, 0, 0);
        break;
      default:
        sts = ctx->event_handler(glow_eEvent_VisibilityObscured, 0, 0, 0, 0);
        break;
      }
      break;
    case GDK_MOTION_NOTIFY:
      //            printf( "-- Button1 motion event: (%d,%d)\n",
      //            event.button.x,
      //		event.button.y);
      if (event.motion.is_hint) {
        int x, y;

        gdk_window_get_device_position(event.any.window, 
	    gdk_seat_get_pointer(gdk_display_get_default_seat(display)), 
	    &x, &y, NULL);
        event.button.x = x;
        event.button.y = y;
      }

      if (button3_pressed) {
        button3_pressed = 0;
        button_pressed = 0;
        button_clicked_and_pressed = 0;
      }
      if (button_pressed
          && (ABS(event.button.x - last_press_x) > DRAW_PRESS_PIX
                 || ABS(event.button.y - last_press_y) > DRAW_PRESS_PIX)) {
        //          printf( "Press: x %d last_x %d\n", event.button.x,
        //          last_press_x);
        //          printf( "       y %d last_y %d\n", event.button.y,
        //          last_press_y);

        event.button.x = last_press_x;
        event.button.y = last_press_y;

        /* Button press */
        cancel_event_timer(this);
        switch (button_pressed) {
        case 1: // Button1
          button1_pressed = 1;
          if ((event.button.state & GDK_SHIFT_MASK)
              && !(event.button.state & GDK_CONTROL_MASK))
            sts = ctx->event_handler(glow_eEvent_MB1PressShift,
                (int)event.button.x, (int)event.button.y, 0, 0);
          else if (!(event.button.state & GDK_SHIFT_MASK)
              && (event.button.state & GDK_CONTROL_MASK))
            sts = ctx->event_handler(glow_eEvent_MB1PressCtrl,
                (int)event.button.x, (int)event.button.y, 0, 0);
          else if ((event.button.state & GDK_SHIFT_MASK)
              && (event.button.state & GDK_CONTROL_MASK))
            sts = ctx->event_handler(glow_eEvent_MB1PressShiftCtrl,
                (int)event.button.x, (int)event.button.y, 0, 0);
          else
            sts = ctx->event_handler(glow_eEvent_MB1Press, (int)event.button.x,
                (int)event.button.y, 0, 0);
          break;
        case 2: // Button2
          button2_pressed = 1;
          if ((event.button.state & GDK_SHIFT_MASK)
              && !(event.button.state & GDK_CONTROL_MASK))
            sts = ctx->event_handler(glow_eEvent_MB2PressShift,
                (int)event.button.x, (int)event.button.y, 0, 0);
          else if (!(event.button.state & GDK_SHIFT_MASK)
              && (event.button.state & GDK_CONTROL_MASK))
            sts = ctx->event_handler(glow_eEvent_MB2PressShift,
                (int)event.button.x, (int)event.button.y, 0, 0);
          else if ((event.button.state & GDK_SHIFT_MASK)
              && (event.button.state & GDK_CONTROL_MASK))
            sts = ctx->event_handler(glow_eEvent_MB2PressShiftCtrl,
                (int)event.button.x, (int)event.button.y, 0, 0);
          else
            sts = ctx->event_handler(glow_eEvent_MB2Press, (int)event.button.x,
                (int)event.button.y, 0, 0);
          break;
        case 3: // Button3
          button3_pressed = 1;
          sts = ctx->event_handler(glow_eEvent_MB3Press, (int)event.button.x,
              (int)event.button.y, 0, 0);
          break;
        }
        button_pressed = 0;
        button_clicked_and_pressed = 0;
      }
      if (button1_pressed || button2_pressed || button3_pressed)
        sts = ctx->event_handler(glow_eEvent_ButtonMotion, (int)event.button.x,
            (int)event.button.y, 0, 0);
      else
        sts = ctx->event_handler(glow_eEvent_CursorMotion, (int)event.button.x,
            (int)event.button.y, 0, 0);
      break;
    case GDK_ENTER_NOTIFY:
      sts = ctx->event_handler(glow_eEvent_Enter, (int)event.crossing.x,
          (int)event.crossing.y, 0, 0);
      break;
    case GDK_LEAVE_NOTIFY:

      sts = ctx->event_handler(glow_eEvent_Leave, (int)event.crossing.x,
          (int)event.crossing.y, 0, 0);
      break;
    case GDK_MAP:
      sts = ctx->event_handler(glow_eEvent_Map, 0, 0, 0, 0);
      break;
    case GDK_UNMAP:
      sts = ctx->event_handler(glow_eEvent_Unmap, 0, 0, 0, 0);
      break;
    case GDK_FOCUS_CHANGE:
      break;
    case GDK_SCROLL:
      if (event.scroll.direction == GDK_SCROLL_UP)
        sts = ctx->event_handler(glow_eEvent_ScrollUp, (int)event.scroll.x,
            (int)event.scroll.y, 0, 0);
      else if (event.scroll.direction == GDK_SCROLL_DOWN)
        sts = ctx->event_handler(glow_eEvent_ScrollDown, (int)event.scroll.x,
            (int)event.scroll.y, 0, 0);
      break;
    default:
      break;
    }
  } else if (event.any.window == nav_wind.window) {
    switch (event.type) {
    case GDK_BUTTON_PRESS:
      //            printf( "-- Button event nav: (%d,%d) button: %d\n",
      //            event.button.x,
      //		event.button.y, event.button.button);
      switch (event.button.button) {
      case 1: // Button1
        button1_pressed = 1;
        ctx->event_handler_nav(
            glow_eEvent_MB1Press, (int)event.button.x, (int)event.button.y);
        break;
      case 2: // Button2
        button2_pressed = 1;
        ctx->event_handler_nav(
            glow_eEvent_MB2Press, (int)event.button.x, (int)event.button.y);
        break;
      case 3: // Button3
        button3_pressed = 1;
        break;
      }
      break;
    case GDK_BUTTON_RELEASE:
      //        printf( "-- Button release event nav: (%d,%d)\n",
      //        event.button.x,
      //		event.button.y);
      switch (event.button.button) {
      case 1: // Button1
        button1_pressed = 0;
        break;
      case 2: // Button2
        button2_pressed = 0;
        break;
      case 3: // Button3
        button3_pressed = 0;
        break;
      }
      sts = ctx->event_handler_nav(
          glow_eEvent_ButtonRelease, (int)event.button.x, (int)event.button.y);
      break;
    case GDK_EXPOSE:
      //        printf( "-- Navigator expose event..\n" );
      sts = ctx->event_handler_nav(glow_eEvent_Exposure, 0, 0);
      break;
    case GDK_MOTION_NOTIFY:
      //            printf( "-- Button1 motion event nav: (%d,%d)\n",
      //            event.button.x,
      //		event.button.y);

      if (event.motion.is_hint) {
        int x, y;

        gdk_window_get_device_position(event.any.window, 
	    gdk_seat_get_pointer(gdk_display_get_default_seat(display)), 
	    &x, &y, NULL);
        event.button.x = x;
        event.button.y = y;
      }
      if (button1_pressed || button2_pressed || button3_pressed)
        sts = ctx->event_handler_nav(
            glow_eEvent_ButtonMotion, (int)event.button.x, (int)event.button.y);
      else
        sts = ctx->event_handler_nav(
            glow_eEvent_CursorMotion, (int)event.button.x, (int)event.button.y);
      break;
    default:;
    }
  }
  if (sts == GLOW__TERMINATED || sts == GLOW__DESTROYED)
    return 1;

  gdk_display_flush(display);
  return 1;
}

void GlowDrawGtk::enable_event(glow_eEvent event, glow_eEventType event_type,
    int (*event_cb)(GlowCtx* ctx, glow_tEvent event))
{
  ctx->enable_event(event, event_type, event_cb);
}

void GlowDrawGtk::invalidate(GlowWind *wind, int x, int y, int width, int height)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;
  GdkRectangle rect;

  rect.x = x;
  rect.y = y;
  rect.width = width;
  rect.height = height;
  gdk_window_invalidate_rect(w->window, &rect, FALSE);
}

cairo_t* GlowDrawGtk::get_cairo(GlowWind* wind, int create)
{
  if (wind->window == ctx->mw.window) {
    if (!cairo_cr_refcnt) {
      if (!create)
	printf("** Cairo context create error (glow)\n");

      cairo_region = cairo_region_create();
      cairo_context = gdk_window_begin_draw_frame(m_wind.window, cairo_region);
      cairo_cr = gdk_drawing_context_get_cairo_context(cairo_context);
      //cairo_save(cairo_cr);
    }
    cairo_cr_refcnt++;
    return cairo_cr;
  } else {
    if (!cairo_nav_cr_refcnt) {
      cairo_nav_region = cairo_region_create();
      cairo_nav_context = gdk_window_begin_draw_frame(nav_wind.window, cairo_nav_region);
      cairo_nav_cr = gdk_drawing_context_get_cairo_context(cairo_nav_context);
      //cairo_save(cairo_nav_cr);
    }
    cairo_nav_cr_refcnt++;
    return cairo_nav_cr;
  }
}

cairo_t* GlowDrawGtk::get_cairo(GlowWind* wind, int x, int y, int width, int height)
{
  if (wind->window == ctx->mw.window) {
    if (!cairo_cr_refcnt) {
      cairo_rectangle_int_t rect;
      rect.x = x;
      rect.y = y;
      rect.width = width;
      rect.height = height;
      cairo_region = cairo_region_create_rectangle(&rect);
      cairo_region_reference(cairo_region);
      cairo_context = gdk_window_begin_draw_frame(m_wind.window, cairo_region);
      cairo_cr = gdk_drawing_context_get_cairo_context(cairo_context);
      //cairo_save(cairo_cr);
    }
    cairo_cr_refcnt++;
    return cairo_cr;
  } else {
    if (!cairo_nav_cr_refcnt) {
      cairo_nav_region = cairo_region_create();
      cairo_nav_context = gdk_window_begin_draw_frame(nav_wind.window, cairo_nav_region);
      cairo_nav_cr = gdk_drawing_context_get_cairo_context(cairo_nav_context);
      //cairo_save(cairo_nav_cr);
    }
    cairo_nav_cr_refcnt++;
    return cairo_nav_cr;
  }
}

void GlowDrawGtk::end_cairo(GlowWind* wind, cairo_t* cr)
{
  if (wind->window == ctx->mw.window) {
    pwr_Assert(cairo_cr_refcnt != 0);
    cairo_cr_refcnt--;

    if (cairo_cr_refcnt == 0) {
      gdk_window_end_draw_frame(m_wind.window, cairo_context);
      cairo_region_destroy(cairo_region);
    }
    else {
      //cairo_restore(cairo_cr);
      //cairo_save(cairo_cr);
    }
  } else {
    pwr_Assert(cairo_nav_cr_refcnt != 0);
    cairo_nav_cr_refcnt--;

    if (cairo_nav_cr_refcnt == 0) {
      gdk_window_end_draw_frame(nav_wind.window, cairo_nav_context);
      cairo_region_destroy(cairo_nav_region);
    }
    else {
      //cairo_restore(cairo_nav_cr);
      //cairo_save(cairo_nav_cr);
    }
  }
}

int GlowDrawGtk::rect(GlowWind* wind, int x, int y, int width, int height,
    glow_eDrawType gc_type, int idx, int highlight, double transparency)
{
  DrawWindGtk* ww = (DrawWindGtk*)wind->window;

  if (ctx->nodraw)
    return 1;

  cairo_t *cr = get_cairo(wind);
  cairo_pattern_t *pat = 0;

  if (ww->clip_on)
    set_cairo_clip(ww, cr);

  cairo_set_antialias(cr, antialias);
  if (highlight) {
    if (gc_type == glow_eDrawType_LineGray)
      cairo_set_source(cr, gc_black);
    else
      cairo_set_source(cr, gc_red);
  } else {
    if (feq(transparency, 0.0))
      cairo_set_source(cr, get_gc(this, gc_type + highlight, idx));
    else {
      double r1, g1, b1;

      GlowColor::rgb_color(gc_type, &r1, &g1, &b1, get_customcolors());
      pat = cairo_pattern_create_rgba(r1, g1, b1, 1.0 - transparency);
      cairo_set_source(cr,  pat);
    }
  }
  cairo_set_line_width(cr, idx+1);

  cairo_rectangle(cr, x, y, width, height);
  cairo_stroke(cr);
  if (ww->clip_on)
    reset_cairo_clip(ww, cr);
  if (pat)
    cairo_pattern_destroy(pat);

  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::rect_erase(
    GlowWind* wind, int x, int y, int width, int height, int idx)
{
  DrawWindGtk* ww = (DrawWindGtk*)wind->window;

  if (ctx->nodraw)
    return 1;

  cairo_t *cr = get_cairo(wind);

  if (ww->clip_on)
    set_cairo_clip(ww, cr);

  cairo_set_antialias(cr, antialias);
  cairo_set_source(cr, gc_erase);
  cairo_set_line_width(cr, idx+1);

  cairo_rectangle(cr, x, y, width, height);
  cairo_stroke(cr);
  if (ww->clip_on)
    reset_cairo_clip(ww, cr);
  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::arrow(GlowWind* wind, int x1, int y1, int x2, int y2, int x3,
    int y3, glow_eDrawType gc_type, int idx, int highlight)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (ctx->nodraw)
    return 1;

  cairo_t *cr = get_cairo(wind);

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  if (gc_type == glow_eDrawType_LineGray && highlight)
    cairo_set_source(cr, gc_black);
  else if (highlight)
    cairo_set_source(cr, gc_red);
  else
    cairo_set_source(cr, get_gc(this, gc_type, 0));
  
  cairo_move_to(cr, x1, y1);
  cairo_line_to(cr, x2, y2);
  cairo_line_to(cr, x3, y3);
  cairo_close_path(cr);
  cairo_fill(cr);

  if (w->clip_on)
    set_cairo_clip(w, cr);
  end_cairo(wind, cr);
  return 1;
  return 1;
}

int GlowDrawGtk::arrow_erase(
    GlowWind* wind, int x1, int y1, int x2, int y2, int x3, int y3, int idx)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (ctx->nodraw)
    return 1;

  cairo_t *cr = get_cairo(wind);

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_source(cr, gc_erase);
  
  cairo_move_to(cr, x1, y1);
  cairo_line_to(cr, x2, y2);
  cairo_line_to(cr, x3, y3);
  cairo_close_path(cr);
  cairo_fill(cr);

  if (w->clip_on)
    set_cairo_clip(w, cr);
  end_cairo(wind, cr);
  return 1;
}

int GlowDrawGtk::arc(GlowWind* wind, int x, int y, int width, int height,
    int angle1, int angle2, glow_eDrawType gc_type, int idx, int highlight,
    double transparency)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (ctx->nodraw)
    return 1;

  if (width == 0 || height == 0)
    return 1;

  if (w->clip_on
      && !(w->clip_rectangle[w->clip_cnt - 1].x <= x + width
             && w->clip_rectangle[w->clip_cnt - 1].x
                     + w->clip_rectangle[w->clip_cnt - 1].width
                 >= x
             && w->clip_rectangle[w->clip_cnt - 1].y <= y + height
             && w->clip_rectangle[w->clip_cnt - 1].y
                     + w->clip_rectangle[w->clip_cnt - 1].height
                 >= y))
    return 1;

  cairo_matrix_t matrix;
  cairo_t *cr = get_cairo(wind);
  cairo_pattern_t *pat = 0;

  if (gc_type == glow_eDrawType_LineGray && highlight)
    gc_type = glow_eDrawType_Line;

  // Fix for highlight for connections in grow
  if (highlight && ctx->type() == glow_eCtxType_Grow)
    gc_type = glow_eDrawType_LineHighlight;

  if (angle1 >= 360)
    angle1 = angle1 - angle1 / 360 * 360;
  else if (angle1 < 0)
    angle1 = angle1 + (-angle1 / 360 + 1) * 360;

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  if (feq(transparency, 0.0))
    cairo_set_source(cr, get_gc(this, gc_type, 0));
  else {
    double r1, g1, b1;

    GlowColor::rgb_color(gc_type, &r1, &g1, &b1, get_customcolors());
    pat = cairo_pattern_create_rgba(r1, g1, b1, 1.0 - transparency);
    cairo_set_source(cr, pat);
  }

  cairo_set_line_width(cr, idx+1);

  if (width != height) {
    cairo_get_matrix(cr, &matrix);
    cairo_translate(cr, x + width/2, y + height/2);
    cairo_scale(cr, 1, (double)height/width);
    cairo_translate(cr, -(x + width/2), -(y + height/2));
  }
  cairo_arc(cr, x+width/2, y+height/2, 0.5 * width, -M_PI/180*(angle1 + angle2),- M_PI/180*angle1);

  if (width != height)
    cairo_set_matrix(cr, &matrix);

  cairo_stroke(cr);

  if (w->clip_on)
    reset_cairo_clip(w, cr);
  if (pat)
    cairo_pattern_destroy(pat);
  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::fill_arc(GlowWind* wind, int x, int y, int width, int height,
    int angle1, int angle2, glow_eDrawType gc_type, int highlight,
    double transparency)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (ctx->nodraw)
    return 1;

  if (width == 0 || height == 0)
    return 1;

  cairo_matrix_t matrix;
  cairo_t *cr = get_cairo(wind);
  cairo_pattern_t *pat = 0;

  if (angle1 >= 360)
    angle1 = angle1 - angle1 / 360 * 360;
  else if (angle1 < 0)
    angle1 = angle1 + (-angle1 / 360 + 1) * 360;

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  if (feq(transparency, 0.0))
    cairo_set_source(cr, get_gc(this, gc_type, 0));
  else {
    double r1, g1, b1;

    GlowColor::rgb_color(gc_type, &r1, &g1, &b1, get_customcolors());
    pat = cairo_pattern_create_rgba(r1, g1, b1, 1.0 - transparency);
    cairo_set_source(cr, pat);
  }

  if (width != height) {
    cairo_get_matrix(cr, &matrix);
    cairo_translate(cr, x + width/2, y + height/2);
    cairo_scale(cr, 1, (double)height/width);
    cairo_translate(cr, -(x + width/2), -(y + height/2));
  }
  if (angle2 != 360)
    cairo_move_to(cr, x + width/2, y+height/2);
  cairo_arc(cr, x+width/2, y+height/2, 0.5 * width, -M_PI/180*(angle1 + angle2),- M_PI/180*angle1);
  if (angle2 != 360)
    cairo_line_to(cr, x + width/2, y + height/2);

  if (width != height)
    cairo_set_matrix(cr, &matrix);

  cairo_fill(cr);

  if (w->clip_on)
    reset_cairo_clip(w, cr);
  if (pat)
    cairo_pattern_destroy(pat);
  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::arc_erase(GlowWind* wind, int x, int y, int width, int height,
    int angle1, int angle2, int idx)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (ctx->nodraw)
    return 1;

  if (width == 0 || height == 0)
    return 1;

  if (w->clip_on
      && !(w->clip_rectangle[w->clip_cnt - 1].x <= x + width
             && w->clip_rectangle[w->clip_cnt - 1].x
                     + w->clip_rectangle[w->clip_cnt - 1].width
                 >= x
             && w->clip_rectangle[w->clip_cnt - 1].y <= y + height
             && w->clip_rectangle[w->clip_cnt - 1].y
                     + w->clip_rectangle[w->clip_cnt - 1].height
                 >= y))
    return 1;

  cairo_matrix_t matrix;
  cairo_t *cr = get_cairo(wind);

  if (angle1 >= 360)
    angle1 = angle1 - angle1 / 360 * 360;
  else if (angle1 < 0)
    angle1 = angle1 + (-angle1 / 360 + 1) * 360;

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  cairo_set_source(cr, gc_erase);
  cairo_set_line_width(cr, idx+1);

  if (width != height) {
    cairo_get_matrix(cr, &matrix);
    cairo_translate(cr, x + width/2, y + height/2);
    cairo_scale(cr, 1, (double)height/width);
    cairo_translate(cr, -(x + width/2), -(y + height/2));
  }
  cairo_arc(cr, x+width/2, y+height/2, 0.5 * width, -M_PI/180*(angle1 + angle2),- M_PI/180*angle1);

  if (width != height)
    cairo_set_matrix(cr, &matrix);

  cairo_stroke(cr);

  if (w->clip_on)
    reset_cairo_clip(w, cr);
  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::line(GlowWind* wind, int x1, int y1, int x2, int y2,
    glow_eDrawType gc_type, int idx, int highlight, double transparency)
{
  if (ctx->nodraw)
    return 1;

  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (w->clip_on
      && !(w->clip_rectangle[w->clip_cnt - 1].x <= MAX(x1, x2)
             && w->clip_rectangle[w->clip_cnt - 1].x
                     + w->clip_rectangle[w->clip_cnt - 1].width
                 >= MIN(x1, x2)
             && w->clip_rectangle[w->clip_cnt - 1].y <= MAX(y1, y2)
             && w->clip_rectangle[w->clip_cnt - 1].y
                     + w->clip_rectangle[w->clip_cnt - 1].height
                 >= MIN(y1, y2)))
    return 1;

  // Fix for highlight for connections in grow
  if (highlight && ctx->type() == glow_eCtxType_Grow)
    gc_type = glow_eDrawType_LineHighlight;

  if (gc_type == glow_eDrawType_LineGray && highlight)
    gc_type = glow_eDrawType_Line;

  cairo_t *cr = get_cairo(wind);
  cairo_pattern_t *pat = 0;

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  if (feq(transparency, 0.0))
    cairo_set_source(cr, get_gc(this, gc_type, 0));
  else {
    double r1, g1, b1;
    
    GlowColor::rgb_color(gc_type, &r1, &g1, &b1, get_customcolors());
    pat = cairo_pattern_create_rgba(r1, g1, b1, 1.0 - transparency);
    cairo_set_source(cr, pat);
  }
  cairo_set_line_width(cr, idx+1);

  cairo_move_to(cr, x1, y1);
  cairo_line_to(cr, x2, y2);
  cairo_stroke(cr);
  
  if (w->clip_on)
    reset_cairo_clip(w, cr);
  if (pat)
    cairo_pattern_destroy(pat);

  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::line_dashed(GlowWind* wind, int x1, int y1, int x2, int y2,
    glow_eDrawType gc_type, int idx, int highlight, glow_eLineType line_type,
    double transparency)
{
  if (ctx->nodraw)
    return 1;

  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (w->clip_on
      && !(w->clip_rectangle[w->clip_cnt - 1].x <= MAX(x1, x2)
             && w->clip_rectangle[w->clip_cnt - 1].x
                     + w->clip_rectangle[w->clip_cnt - 1].width
                 >= MIN(x1, x2)
             && w->clip_rectangle[w->clip_cnt - 1].y <= MAX(y1, y2)
             && w->clip_rectangle[w->clip_cnt - 1].y
                     + w->clip_rectangle[w->clip_cnt - 1].height
                 >= MIN(y1, y2)))
    return 1;

  // Fix for highlight for connections in grow
  if (highlight && ctx->type() == glow_eCtxType_Grow)
    gc_type = glow_eDrawType_LineHighlight;

  if (gc_type == glow_eDrawType_LineGray && highlight)
    gc_type = glow_eDrawType_Line;

  cairo_t *cr = get_cairo(wind);
  cairo_pattern_t *pat = 0;

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  if (feq(transparency, 0.0))
    cairo_set_source(cr, get_gc(this, gc_type, 0));
  else {
    double r1, g1, b1;
    
    GlowColor::rgb_color(gc_type, &r1, &g1, &b1, get_customcolors());
    pat = cairo_pattern_create_rgba(r1, g1, b1, 1.0 - transparency);
    cairo_set_source(cr, pat);
  }
  cairo_set_line_width(cr, idx+1);
  int dash_offset = 0;
  double dashes[4];
  switch (line_type) {
  case glow_eLineType_Dashed1:
    dashes[0] = 1 + idx;
    cairo_set_dash(cr, dashes, 1, dash_offset);
    break;
  case glow_eLineType_Dashed2:
    dashes[0] = 1 + 2 * idx;
    cairo_set_dash(cr, dashes, 1, dash_offset);
    break;
  case glow_eLineType_Dashed3:
    dashes[0] = 1 + 3 * idx;
    cairo_set_dash(cr, dashes, 1, dash_offset);
    break;
  case glow_eLineType_Dotted: {
    dashes[0] = 1 + idx;
    dashes[1] = 1 + 4 * idx;
    cairo_set_dash(cr, dashes, 2, dash_offset);
    break;
  }
  case glow_eLineType_DotDashed1: {
    dashes[0] = 1 + 3 * idx;
    dashes[1] = 1 + 2 * idx;
    dashes[2] = 1 + idx;
    dashes[3] = 1 + 2 * idx;
    cairo_set_dash(cr, dashes, 4, dash_offset);
    break;
  }
  case glow_eLineType_DotDashed2: {
    dashes[0] = 1 + 6 * idx;
    dashes[1] = 1 + 3 * idx;
    dashes[2] = 1 + idx;
    dashes[3] = 1 + 3 * idx;
    cairo_set_dash(cr, dashes, 4, dash_offset);
    break;
  }
  default:;
  }

  cairo_move_to(cr, x1, y1);
  cairo_line_to(cr, x2, y2);
  cairo_stroke(cr);
  cairo_set_dash(cr, 0, 0, 0);
  
  if (w->clip_on)
    reset_cairo_clip(w, cr);
  if (pat)
    cairo_pattern_destroy(pat);

  end_cairo(wind, cr);
  return 1;
}

int GlowDrawGtk::line_erase(
    GlowWind* wind, int x1, int y1, int x2, int y2, int idx)
{
  if (ctx->nodraw)
    return 1;

  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (w->clip_on
      && !(w->clip_rectangle[w->clip_cnt - 1].x <= MAX(x1, x2)
             && w->clip_rectangle[w->clip_cnt - 1].x
                     + w->clip_rectangle[w->clip_cnt - 1].width
                 >= MIN(x1, x2)
             && w->clip_rectangle[w->clip_cnt - 1].y <= MAX(y1, y2)
             && w->clip_rectangle[w->clip_cnt - 1].y
                     + w->clip_rectangle[w->clip_cnt - 1].height
                 >= MIN(y1, y2)))
    return 1;

  cairo_t *cr = get_cairo(wind);

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  cairo_set_source(cr, gc_erase);
  cairo_set_line_width(cr, idx+1);

  cairo_move_to(cr, x1, y1);
  cairo_line_to(cr, x2, y2);
  cairo_stroke(cr);
  
  if (w->clip_on)
    reset_cairo_clip(w, cr);

  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::polyline(GlowWind* wind, glow_sPointX* points, int point_cnt,
    glow_eDrawType gc_type, int idx, int highlight, double transparency)
{
  if (ctx->nodraw)
    return 1;

  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (gc_type == glow_eDrawType_LineGray && highlight)
    gc_type = glow_eDrawType_Line;

  int cnt;
  GdkPoint* gpoints = points_to_gdk_points_curve(wind, points, point_cnt, &cnt);
  cairo_t *cr = get_cairo(wind);
  cairo_pattern_t *pat = 0;

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  if (feq(transparency, 0.0))
    cairo_set_source(cr, get_gc(this, gc_type, 0));
  else {
    double r1, g1, b1;
    
    GlowColor::rgb_color(gc_type, &r1, &g1, &b1, get_customcolors());
    pat = cairo_pattern_create_rgba(r1, g1, b1, 1.0 - transparency);
    cairo_set_source(cr, pat);
  }
  cairo_set_line_width(cr, idx+1);
  cairo_set_line_join(cr, CAIRO_LINE_JOIN_BEVEL);

  cairo_move_to(cr, gpoints[0].x, gpoints[0].y);
  for (int i = 1; i < cnt; i++)
    cairo_line_to(cr, (double)gpoints[i].x, (double)gpoints[i].y);
  cairo_stroke(cr);

  if (w->clip_on)
    reset_cairo_clip(w, cr);
  if (pat)
    cairo_pattern_destroy(pat);

  free(gpoints);
  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::fill_polyline(GlowWind* wind, glow_sPointX* points,
    int point_cnt, glow_eDrawType gc_type, int highlight, double transparency)
{
  if (ctx->nodraw)
    return 1;

  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (gc_type == glow_eDrawType_LineGray && highlight)
    gc_type = glow_eDrawType_Line;

  GdkPoint* gpoints = points_to_gdk_points(points, point_cnt);
  cairo_t *cr = get_cairo(wind);
  cairo_pattern_t *pat = 0;

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  if (feq(transparency, 0.0))
    cairo_set_source(cr, get_gc(this, gc_type, 0));
  else {
    double r1, g1, b1;

    GlowColor::rgb_color(gc_type, &r1, &g1, &b1, get_customcolors());
    pat = cairo_pattern_create_rgba(r1, g1, b1, 1.0 - transparency);
    cairo_set_source(cr, pat);
  }

  cairo_move_to(cr, gpoints[0].x, gpoints[0].y);
  for (int i = 1; i < point_cnt; i++)
    cairo_line_to(cr, gpoints[i].x, gpoints[i].y);

  cairo_fill(cr);
  
  if (w->clip_on)
    reset_cairo_clip(w, cr);
  if (pat)
    cairo_pattern_destroy(pat);

  free(gpoints);
  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::polyline_erase(
    GlowWind* wind, glow_sPointX* points, int point_cnt, int idx)
{
  if (ctx->nodraw)
    return 1;

  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  int cnt;
  GdkPoint* gpoints = points_to_gdk_points_curve(wind, points, point_cnt, &cnt);
  cairo_t *cr = get_cairo(wind);

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  cairo_set_source(cr, gc_erase);
  cairo_set_line_width(cr, idx+1);

  cairo_move_to(cr, gpoints[0].x, gpoints[0].y);
  for (int i = 1; i < cnt; i++)
    cairo_line_to(cr, gpoints[i].x, gpoints[i].y);
  cairo_stroke(cr);
  
  if (w->clip_on)
    reset_cairo_clip(w, cr);

  free(gpoints);
  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::text(GlowWind* wind, int x, int y, char* text, int len,
    glow_eDrawType gc_type, glow_eDrawType color, int idx, int highlight,
    int line, glow_eFont font_idx, double size, int rot, double transparency)
{
  if (ctx->nodraw)
    return 1;

  char* textutf8 = 0;
  if (((GrowCtx*)ctx)->text_coding != glow_eTextCoding_UTF_8) {
    textutf8 = g_convert(text, -1, "UTF-8", "ISO8859-1", NULL, NULL, NULL);
    text = textutf8;
  }

  DrawWindGtk* w = (DrawWindGtk*)wind->window;
  size *= DRAW_TSCALE;

  if (font_idx >= glow_eFont__)
    font_idx = glow_eFont_Helvetica;

  cairo_t *cr = get_cairo(wind);
  cairo_pattern_t *pat = 0;

  if (w->clip_on)
    set_cairo_clip(w, cr);

  if (feq(transparency, 0.0))
    cairo_set_source(cr, get_gc(this, color, 0));
  else {
    double r1, g1, b1;
    
    GlowColor::rgb_color(color, &r1, &g1, &b1, get_customcolors());
    pat = cairo_pattern_create_rgba(r1, g1, b1, 1.0 - transparency);
    cairo_set_source(cr, pat);
  }
  
  cairo_font_face_t *font_face = get_font_face(font_idx, drawtype_to_fonttype(gc_type));
  cairo_set_font_face(cr, font_face);
  cairo_set_font_size(cr, size);

  if (rot != 0) {
    cairo_matrix_t matrix;
    cairo_text_extents_t extents;

    cairo_text_extents(cr, text, &extents);

    rot = 360 - rot;
    cairo_get_matrix(cr, &matrix);
    cairo_translate(cr, x + extents.width/2, y - extents.height/2);
    cairo_rotate(cr, rot * M_PI/180);
    if (rot == 90)
      cairo_translate(cr, 0, extents.width/2);
    else if (rot == 270)
      cairo_translate(cr, -extents.height/2, -extents.width/2 + extents.height);
    else
      cairo_translate(cr, -extents.width/2, extents.height/2);
    cairo_move_to(cr, 0, 0);
    cairo_show_text(cr, text);
    cairo_set_matrix(cr, &matrix);
  }
  else {
    cairo_move_to(cr, x, y);
    cairo_show_text(cr, text);
  }
  if (w->clip_on)
    reset_cairo_clip(w, cr);
  if (pat)
    cairo_pattern_destroy(pat);

  end_cairo(wind, cr);

  if (textutf8)
    g_free(textutf8);

  return 1;
}

int GlowDrawGtk::text_cursor(GlowWind* wind, int x, int y, char* text, int len,
    glow_eDrawType gc_type, glow_eDrawType color, int idx, int highlight,
    int pos, glow_eFont font, double size)
{
  if (ctx->nodraw)
    return 1;
  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  int theight, tdescent, width, height, descent;
  get_text_extent(
      "A", 1, gc_type, idx, font, &width, &height, &descent, size, 0);
  if (pos != 0) {
    char *textp = (char*)malloc(pos + 1);
    strncpy(textp, text, pos);
    textp[pos] = 0;
    get_text_extent(
        textp, pos, gc_type, idx, font, &width, &theight, &tdescent, size, 0);
    free(textp);
  }
  else
    width = 0;

  gc_type = glow_eDrawType_Line;

  cairo_t *cr = get_cairo(wind);

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  cairo_set_source(cr, get_gc(this, gc_type, 0));
  cairo_set_line_width(cr, 2);

  cairo_move_to(cr, x + width, y + descent);
  cairo_line_to(cr, x + width, y - height + descent);
  cairo_stroke(cr);
  
  if (w->clip_on)
    reset_cairo_clip(w, cr);

  end_cairo(wind, cr);
  return 1;
}

int GlowDrawGtk::text_erase(GlowWind* wind, int x, int y, char* text, int len,
    glow_eDrawType gc_type, int idx, int line, glow_eFont font_idx, double size,
    int rot)
{
  if (ctx->nodraw)
    return 1;

  DrawWindGtk* w = (DrawWindGtk*)wind->window;
  size *= DRAW_TSCALE;

  char* textutf8 = 0;
  if (((GrowCtx*)ctx)->text_coding != glow_eTextCoding_UTF_8) {
    textutf8 = g_convert(text, -1, "UTF-8", "ISO8859-1", NULL, NULL, NULL);
    text = textutf8;
  }

  cairo_text_extents_t extents;
  cairo_t *cr = get_cairo(wind);
  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_source(cr, gc_erase);

  cairo_font_face_t *font_face = get_font_face(font_idx, drawtype_to_fonttype(gc_type));
  cairo_set_font_face(cr, font_face);
  cairo_set_font_size(cr, size);
  cairo_text_extents(cr, text, &extents);
  cairo_set_source(cr, gc_erase);
  double px, py, ph, pw;
  if (rot == 90) {
    px = x;
    py = y - extents.width;
    ph = extents.width;
    pw = extents.height;
  } else if (rot == 270) {
    px = x;
    py = y - extents.height;
    ph = extents.width;
    pw = extents.height;
  } else {
    px = (double)x + extents.x_bearing;
    py = (double)y + extents.y_bearing;
    pw = extents.width;
    ph = extents.height;
  }
  cairo_rectangle(cr, px, py, pw, ph);
  cairo_fill(cr);

  if (w->clip_on)
    reset_cairo_clip(w, cr);
  end_cairo(wind, cr);

  if (textutf8)
    g_free(textutf8);

  return 1;
}

int GlowDrawGtk::pixmaps_create(
    GlowWind* wind, glow_sPixmapData* pixmap_data, void** pixmaps)
{
  return 1;
}

void GlowDrawGtk::pixmaps_delete(GlowWind* wind, void* pixmaps)
{
}

int GlowDrawGtk::pixmap(GlowWind* wind, int x, int y,
    glow_sPixmapData* pixmap_data, void* pixmaps, glow_eDrawType gc_type,
    int idx, int highlight, int line)
{
  return 1;
}

int GlowDrawGtk::pixmap_inverse(GlowWind* wind, int x, int y,
    glow_sPixmapData* pixmap_data, void* pixmaps, glow_eDrawType gc_type,
    int idx, int line)
{
  return 1;
}

int GlowDrawGtk::pixmap_erase(GlowWind* wind, int x, int y,
    glow_sPixmapData* pixmap_data, void* pixmaps, glow_eDrawType gc_type,
    int idx, int line)
{
  return 1;
}

int GlowDrawGtk::image(GlowWind* wind, int x, int y, int width, int height,
    glow_tImImage image, glow_tPixmap pixmap, glow_tPixmap clip_mask)
{
  if (ctx->nodraw)
    return 1;

  if (width == 0 || height == 0)
    return 1;

  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  cairo_t *cr = get_cairo(wind);
  if (w->clip_on)
    set_cairo_clip(w, cr);

  gdk_cairo_set_source_pixbuf(cr, (GdkPixbuf *)image, x, y);
  cairo_paint(cr);

  if (w->clip_on)
    set_cairo_clip(w, cr);

  return 1;
}

int GlowDrawGtk::image_d(GlowWind* wind, double x, double y, int width,
    int height, glow_tImImage image, glow_tPixmap pixmap,
    glow_tPixmap clip_mask)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (ctx->nodraw)
    return 1;

  if (width == 0 || height == 0)
    return 1;

  cairo_t *cr = get_cairo(wind);
  if (w->clip_on)
    set_cairo_clip(w, cr);

  gdk_cairo_set_source_pixbuf(cr, (GdkPixbuf*)image, x, y);
  cairo_paint(cr);

  if (w->clip_on)
    reset_cairo_clip(w, cr);
  end_cairo(wind, cr);
  return 1;
}

int GlowDrawGtk::fill_rect(
    GlowWind* wind, int x, int y, int width, int height, glow_eDrawType gc_type,
    double transparency)
{
  if (ctx->nodraw)
    return 1;

  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  cairo_t *cr = get_cairo(wind);
  cairo_pattern_t *pat = 0;

  cairo_set_antialias(cr, antialias);

  if (w->clip_on)
    set_cairo_clip(w, cr);

  if (gc_type == glow_eDrawType_LineErase)
    cairo_set_source(cr, gc_erase);
  else {
    if (feq(transparency, 0.0))
      cairo_set_source(cr, get_gc(this, gc_type, 0));
    else {
      double r1, g1, b1;

      GlowColor::rgb_color(gc_type, &r1, &g1, &b1, get_customcolors());
      pat = cairo_pattern_create_rgba(r1, g1, b1, 1.0 - transparency);
      cairo_set_source(cr, pat);
    }
  }
  cairo_rectangle(cr, x-1, y-1, width+1, height+1);
  cairo_fill(cr);

  if (w->clip_on)
    reset_cairo_clip(w, cr);
  if (pat)
    cairo_pattern_destroy(pat);

  end_cairo(wind, cr);
  return 1;
}

void GlowDrawGtk::draw_background(GlowWind* wind, int x, int y, int width, int height)
{
  if (ctx->nodraw)
    return;

  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  cairo_t *cr = get_cairo(wind);

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_source(cr, gc_erase);
  cairo_rectangle(cr, x, y, width, height);
  cairo_fill(cr);

  if (w->clip_on)
    reset_cairo_clip(w, cr);

  end_cairo(wind, cr);
}

void GlowDrawGtk::clear(GlowWind* wind)
{
}

void GlowDrawGtk::copy_buffer(
    GlowWind* wind, int ll_x, int ll_y, int ur_x, int ur_y)
{
}

void GlowDrawGtk::get_window_size(GlowWind* wind, int* width, int* height)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;
  *width = gdk_window_get_width(w->window);
  *height = gdk_window_get_height(w->window); 
}

void GlowDrawGtk::set_window_size(GlowWind* wind, int width, int height)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (!w->window)
    return;

  gdk_window_resize(w->window, width, height);
}

void GlowDrawGtk::set_anti_aliasing(int anti_aliasing)
{
  if (anti_aliasing)
    antialias = CAIRO_ANTIALIAS_GRAY;
  else
    antialias = CAIRO_ANTIALIAS_NONE;
}

static gboolean draw_timer_cb(void* data)
{
  draw_sTimerCb* timer_cb = (draw_sTimerCb*)data;
  GlowDrawGtk* draw_ctx = (GlowDrawGtk*)timer_cb->ctx->gdraw;

  (timer_cb->callback_func)(timer_cb->ctx);

  gdk_display_flush(draw_ctx->display);
  free(timer_cb);
  return FALSE;
}

static gboolean event_timer_cb(void* ctx)
{
  //  printf( "Timer callback\n");
  GlowDrawGtk* draw_ctx = (GlowDrawGtk*)ctx;
  draw_ctx->timer_id = 0;

  draw_ctx->event_handler(last_event);
  return FALSE;
}

static void cancel_event_timer(GlowDrawGtk* draw_ctx)
{
  if (draw_ctx->timer_id) {
    g_source_remove(draw_ctx->timer_id);
    draw_ctx->timer_id = 0;
  }
  //  printf( "Timer removed\n");
}

static void event_timer(GlowDrawGtk* draw_ctx, int time_ms)
{
  //  printf( "Add timer\n");
  draw_ctx->timer_id = g_timeout_add(time_ms, event_timer_cb, draw_ctx);
}

void GlowDrawGtk::set_timer(
    GlowCtx* gctx, int time_ms, void (*callback_func)(GlowCtx* ctx), void** id)
{
  draw_sTimerCb* timer_cb;

  timer_cb = (draw_sTimerCb*)calloc(1, sizeof(draw_sTimerCb));
  timer_cb->ctx = gctx;
  timer_cb->callback_func = callback_func;

  timer_cb->timer_id = g_timeout_add(time_ms, draw_timer_cb, timer_cb);

  *id = (void*)timer_cb;
}

void GlowDrawGtk::remove_timer(void* id)
{
  g_source_remove(((draw_sTimerCb*)id)->timer_id);

  free((char*)id);
}

void GlowDrawGtk::set_cursor(GlowWind* wind, glow_eDrawCursor cursor)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;
  if (!w->window)
    return;

  if (cursor == glow_eDrawCursor_Normal)
    gdk_window_set_cursor(w->window, NULL);
  else
    gdk_window_set_cursor(w->window, cursors[cursor]);
  gdk_display_flush(display);
}

int GlowDrawGtk::get_text_extent(const char* text, int len,
    glow_eDrawType gc_type, int idx, glow_eFont font_idx, int* width,
    int* height, int* descent, double size, int rot)
{
  cairo_text_extents_t extents;
  cairo_font_face_t *font_face;

  size *= DRAW_TSCALE;

  char* textutf8 = 0;
  if (((GrowCtx*)ctx)->text_coding != glow_eTextCoding_UTF_8) {
    textutf8 = g_convert(text, -1, "UTF-8", "ISO8859-1", NULL, NULL, NULL);
    text = textutf8;
  }

  cairo_t *cr = get_cairo(&ctx->mw, 1);

  font_face = get_font_face(font_idx, drawtype_to_fonttype(gc_type));
  cairo_set_font_face(cr, font_face);
  cairo_set_font_size(cr, size);

  cairo_text_extents(cr, text, &extents);
  if (text[0] == ' ') {
    cairo_text_extents_t spaceextents;
    
    cairo_text_extents(cr, "1", &spaceextents);
    for (const char *s = text; *s == ' '; s++)
      extents.width += spaceextents.width;
  }
  if (rot == 90 || rot == 270) {
    *height = extents.width;
    *width = extents.height;
  } else {
    *height = extents.height;
    *width = extents.width;
  }
  *descent = extents.height + extents.y_bearing;
  end_cairo(&ctx->mw, cr);

  if (textutf8)
    g_free(textutf8);

  return 1;
}

void GlowDrawGtk::copy_area(GlowWind* wind, int x, int y)
{
  if (ctx->nodraw)
    return;

  ctx->draw(wind, 0, 0, ctx->mw.window_width, ctx->mw.window_height);
}

void GlowDrawGtk::clear_area(
    GlowWind* wind, int ll_x, int ur_x, int ll_y, int ur_y)
{
  fill_rect(wind, ll_x, ll_y, ur_x - ll_x, ur_y - ll_y, glow_eDrawType_LineErase);
}

void GlowDrawGtk::set_inputfocus(GlowWind* wind)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;
  gdk_window_focus(w->window, GDK_CURRENT_TIME);
  // gtk_widget_grab_focus( m_wind.toplevel);
}

static int glow_read_color_file(
    const char* filename, draw_sColor** color_array, int* size)
{
  char line[80];
  draw_sColor* color_p;
  ifstream fp;
  int nr;
  int line_cnt;
  float f_red, f_green, f_blue;

  if (!check_file(filename)) {
    return 0;
  } else {
    printf("** Opening color file %s\n", filename);

    fp.open(filename);
    if (!fp)
      return GLOW__FILEOPEN;

    *color_array = (draw_sColor*)calloc(300, sizeof(draw_sColor));
    *size = 0;
    line_cnt = 0;
    color_p = *color_array;
    while (*size < 300) {
      fp.getline(line, sizeof(line));
      if (line[0] == 0)
        break;
      line_cnt++;
      if (line[0] == '!' || line[0] == '#')
        continue;
      nr = sscanf(line, "%f %f %f", &f_red, &f_green, &f_blue);
      if (nr != 3)
        printf("** Syntax error in file %s, line %d", filename, line_cnt);
      else {
        color_p->red = int(f_red * 65535);
        color_p->green = int(f_green * 65535);
        color_p->blue = int(f_blue * 65535);
        color_p++;
        (*size)++;
      }
    }
    fp.close();
  }

  return 1;
}

void GlowDrawGtk::push_background(glow_eDrawType drawtype)
{
  if (erase_stack_cnt > DRAW_ERASE_STACK_SIZE) {
    printf("** Erase stack exceeded\n");
    return;
  }
  erase_stack[erase_stack_cnt] = get_gc(this, drawtype, 0);
  erase_stack_cnt++;
  gc_erase = erase_stack[erase_stack_cnt - 1];
}

void GlowDrawGtk::pop_background()
{
  if (erase_stack_cnt == 0)
    return;
  erase_stack_cnt--;
  gc_erase = erase_stack[erase_stack_cnt - 1];
}

void GlowDrawGtk::set_background(GlowWind* wind, glow_eDrawType drawtype,
    char *image)
{
  if (drawtype == glow_eDrawType_LineErase)
    drawtype = glow_eDrawType_Color32;

  if (erase_stack_cnt == 1)
    erase_stack_cnt--;
  pwr_Assert(erase_stack_cnt == 0);
  push_background(drawtype);

  if (image)
    css_background = 1;

#if 0
  DrawWindGtk* w = (DrawWindGtk*)wind->window;
  GdkGCValues xgcv;
  int i;
  double r, g, b;

  if (drawtype == glow_eDrawType_LineErase)
    drawtype = glow_eDrawType_Color32;

  GlowColor::rgb_color((int)drawtype, &r, &g, &b, get_customcolors());
  background = glow_allocate_color(
      this, int(r * 65535), int(g * 65535), int(b * 65535));
  // gdk_gc_get_values( get_gc( this, drawtype, 0), &xgcv);
  // gdk_colormap_query_color( colormap, xgcv.foreground.pixel, &background);

  // Change erase gcs
  xgcv.foreground = background;
  xgcv.background = background;
  for (i = 0; i < DRAW_TYPE_SIZE; i++) {
    gdk_gc_set_values(get_gc(this, glow_eDrawType_LineErase, i), &xgcv,
        (GdkGCValuesMask)(GDK_GC_FOREGROUND | GDK_GC_BACKGROUND));
    gdk_gc_set_values(get_gc(this, glow_eDrawType_TextHelveticaErase, i), &xgcv,
        (GdkGCValuesMask)(GDK_GC_FOREGROUND | GDK_GC_BACKGROUND));
    gdk_gc_set_values(get_gc(this, glow_eDrawType_TextHelveticaEraseBold, i),
        &xgcv, (GdkGCValuesMask)(GDK_GC_FOREGROUND | GDK_GC_BACKGROUND));
  }

  if (!image) {
    gtk_widget_modify_bg(w->toplevel, GTK_STATE_NORMAL, &background);

    if (w->buffer)
      buffer_background(w, 0);
  } else {
    GdkBitmap* mask;
    // GdkPixmap *gpixmap = gdk_pixmap_foreign_new( pixmap);

    if (w->background_pixmap)
      g_object_unref(w->background_pixmap);

    gdk_pixbuf_render_pixmap_and_mask_for_colormap(
        (GdkPixbuf*)image, colormap, &w->background_pixmap, &mask, 0);
    w->background_pixmap_width = pixmap_width;
    w->background_pixmap_height = pixmap_height;
    gdk_window_set_back_pixmap(w->window, w->background_pixmap, FALSE);
    if (w->buffer)
      buffer_background(w, 0);
  }
#endif
}

void GlowDrawGtk::reset_background(GlowWind* wind)
{
}

void GlowDrawGtk::set_clip(DrawWind* wind, GdkGC* gc)
{
}

void GlowDrawGtk::reset_clip(DrawWind* w, GdkGC* gc)
{
}

void GlowDrawGtk::set_image_clip_mask(glow_tPixmap pixmap, int x, int y)
{
}

void GlowDrawGtk::reset_image_clip_mask()
{
}

int GlowDrawGtk::set_clip_rectangle(
    GlowWind* wind, int ll_x, int ll_y, int ur_x, int ur_y)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;
  if (w->clip_cnt >= DRAW_CLIP_SIZE) {
    printf("** Draw clip refused\n");
    return 0;
  }
  int x0, x1, y0, y1;
  if (w->clip_cnt == 0) {
    x0 = MIN(ll_x, ur_x);
    x1 = MAX(ll_x, ur_x);
    y0 = MIN(ll_y, ur_y);
    y1 = MAX(ll_y, ur_y);
  } else {
    x0 = MIN(ll_x, ur_x);
    x1 = MAX(ll_x, ur_x);
    y0 = MIN(ll_y, ur_y);
    y1 = MAX(ll_y, ur_y);

    x0 = MAX(x0, w->clip_rectangle[w->clip_cnt - 1].x);
    x1 = MIN(x1, w->clip_rectangle[w->clip_cnt - 1].x
            + w->clip_rectangle[w->clip_cnt - 1].width);
    y0 = MAX(y0, w->clip_rectangle[w->clip_cnt - 1].y);
    y1 = MIN(y1, w->clip_rectangle[w->clip_cnt - 1].y
            + w->clip_rectangle[w->clip_cnt - 1].height);
    if (x0 > x1)
      x0 = x1;
    if (y0 > y1)
      y0 = y1;
  }
  w->clip_rectangle[w->clip_cnt].x = x0;
  w->clip_rectangle[w->clip_cnt].y = y0;
  w->clip_rectangle[w->clip_cnt].width = x1 - x0;
  w->clip_rectangle[w->clip_cnt].height = y1 - y0;
  w->clip_cnt++;
  w->clip_on = 1;
  return 1;
}

void GlowDrawGtk::reset_clip_rectangle(GlowWind* wind)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;
  if (w->clip_cnt == 0) {
    printf("** Draw clip mismatch\n");
    return;
  }
  w->clip_cnt--;
  if (w->clip_cnt == 0)
    w->clip_on = 0;
}

int GlowDrawGtk::clip_level(GlowWind* wind)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;
  return w->clip_cnt;
}

int GlowDrawGtk::draw_point(
    GlowWind* wind, int x1, int y1, glow_eDrawType gc_type)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (ctx->nodraw)
    return 1;

  cairo_t *cr = get_cairo(wind);

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  cairo_set_source(cr, get_gc(this, gc_type, 0));
  cairo_set_line_width(cr, 1);

  cairo_move_to(cr, x1, y1);
  cairo_line_to(cr, x1, y1);
  cairo_stroke(cr);
  if (w->clip_on)
    reset_cairo_clip(w, cr);
  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::draw_points(GlowWind* wind, glow_sPointX* points,
    int point_num, glow_eDrawType gc_type, int idx)
{
  DrawWindGtk* w = (DrawWindGtk*)wind->window;

  if (ctx->nodraw)
    return 1;

  cairo_t *cr = get_cairo(wind);

  if (w->clip_on)
    set_cairo_clip(w, cr);

  cairo_set_antialias(cr, antialias);
  cairo_set_source(cr, get_gc(this, gc_type, 0));
  cairo_set_line_width(cr, idx + 2);
  //cairo_set_line_cap(cr, CAIRO_LINE_CAP_ROUND);

  for (int i = 0; i < point_num; i++) {
    cairo_move_to(cr, points[i].x, points[i].y - (idx + 1));
    cairo_line_to(cr, points[i].x, points[i].y);
  }
  cairo_stroke(cr);
  if (w->clip_on)
    reset_cairo_clip(w, cr);
  end_cairo(wind, cr);

  return 1;
}

void GlowDrawGtk::set_click_sensitivity(GlowWind* wind, int value)
{
  click_sensitivity = value;
}


int GlowDrawGtk::export_image(char* filename)
{
  DrawWindGtk* w = &m_wind;
  int window_width = ctx->mw.window_width;
  int window_height = ctx->mw.window_height;
  GdkPixbuf* image;
  gboolean sts;

  image = gdk_pixbuf_get_from_window(w->window, 0, 0, window_width, window_height);
  if (!image)
    return 0;

  sts = gdk_pixbuf_save(image, filename, "png", NULL, "compression", "9", NULL);
  if (sts == 0)
    return 0;

  return 1;
}

int GlowDrawGtk::print(char* filename, double x0, double x1, int end)
{
#define ps_cPageHeight 820
#define ps_cPageWidth 535
#define ps_cLeftMargin 100
#define ps_cTopMargin 100

  DrawWindGtk* w = &m_wind;
  int width, height;
  unsigned char* rgb;
  int i, j, k;
  int grey;
  int red, blue, green;
  double scalex = 0.71;
  double scaley = 0.78;
  double x, y;
  bool colorimage = true;
  static DrawPs* ps = 0;
  bool new_file = false;
  int rowstride;
  int n_channels;
  unsigned char* rgb_row;

  int window_width = ctx->mw.window_width;
  int window_height = ctx->mw.window_height;

  x = ps_cLeftMargin;
  y = ps_cPageHeight - ps_cTopMargin;

  GdkPixbuf* image;

  image = gdk_pixbuf_get_from_window(w->window, 0, 0, window_width, window_height);
  if (!image)
    return 0;

  if (!ps) {
    ps = new DrawPs(filename);
    new_file = true;
    ps->y = y;
  } else
    y = ps->y;

  width = gdk_pixbuf_get_width(image);
  height = gdk_pixbuf_get_height(image);

  if (!feq(x0, 0.0) || !feq(x1, 0.0)) {
    double total_width = width / (x1 - x0);

    if (total_width * scalex > ps_cPageWidth - ps_cLeftMargin) {
      x = ps_cPageWidth - total_width * scalex;
      if (x < 50) {
        double scale_factor = (ps_cPageWidth - 50) / (total_width * scalex);
        x = 50;
        scalex = scalex * scale_factor;
        scaley = scaley * scale_factor;
      }
    }
    x += scalex * total_width * x0;
  } else if (width * scalex > ps_cPageWidth - ps_cLeftMargin) {
    x = ps_cPageWidth - width * scalex;
    if (x < 50) {
      double scale_factor = (ps_cPageWidth - 50) / (width * scalex);
      x = 50;
      scalex = scalex * scale_factor;
      scaley = scaley * scale_factor;
    }
  }
  if ((feq(x0, 0.0) && feq(x1, 0.0)) || feq(x1, 1.0))
    ps->y -= scaley * height;

  if (new_file) {
    ps->fp << "%!PS-Adobe-2.0 EPSF-1.2" << endl
           << "%%Creator: Proview Glow" << endl
           << "%%EndComments" << endl
           << endl;
  } else
    ps->fp << "restore" << endl;

  ps->fp << "1.000000 1.000000 scale" << endl
         << "save" << endl
         << scalex * width << " " << scaley * height << " scale" << endl
         << "/oneline " << width << " string def" << endl
         << "/drawimage {" << endl
         << " " << width << " " << height << " 8 [" << width << " 0 0 -"
         << height << " 0 " << height << "]" << endl
         << " { currentfile oneline readhexstring pop }" << endl;
  if (colorimage) {
    ps->fp << "false 3" << endl << "colorimage" << endl;
  } else
    ps->fp << "image" << endl;

  ps->fp << "} def" << endl
         << x / scalex / width << " " << (y - height * scaley) / scaley / height
         << " translate" << endl
         << "drawimage" << endl;

  ps->fp.flags(
      (ps->fp.flags() & ~ios_base::dec) | ios_base::hex | ios_base::uppercase);
  ps->fp.fill('0');
  rgb = gdk_pixbuf_get_pixels(image);
  rowstride = gdk_pixbuf_get_rowstride(image);
  n_channels = gdk_pixbuf_get_n_channels(image);
  j = 0;
  rgb_row = rgb;
  for (k = 0; k < height; k++) {
    rgb = rgb_row;
    for (i = 0; i < width; i++) {
      if (!colorimage) {
        if (n_channels >= 4 && *(rgb + 3) == 0)
          grey = 255;
        else
          grey = (int)((0.0 + *rgb + *(rgb + 1) + *(rgb + 2)) / 3 + 0.5);

        rgb += n_channels;
        ps->fp.width(2);
        ps->fp << grey;
        if (++j >= 40) {
          j = 0;
          ps->fp << endl;
        }
      } else {
        if (n_channels >= 4 && *(rgb + 3) == 0)
          red = blue = green = 255;
        else {
          red = *rgb;
          green = *(rgb + 1);
          blue = *(rgb + 2);
        }
        rgb += n_channels;
        ps->fp.width(2);
        ps->fp << red;
        ps->fp.width(2);
        ps->fp << green;
        ps->fp.width(2);
        ps->fp << blue;
        if (++j >= 20) {
          j = 0;
          ps->fp << endl;
        }
      }
    }
    rgb_row += rowstride;
  }

  if (end) {
    ps->fp << endl << "restore" << endl << "showpage" << endl;
    delete ps;
    ps = 0;
  } else {
    ps->fp.flags(((ps->fp.flags() & ~ios_base::hex) & ~ios_base::uppercase)
        | ios_base::dec);
  }
  g_object_unref(image);

  return 1;
}

GdkPoint* GlowDrawGtk::points_to_gdk_points(glow_sPointX* points, int point_cnt)
{
  GdkPoint* gpoints = (GdkPoint*)malloc(point_cnt * sizeof(GdkPoint));
  for (int i = 0; i < point_cnt; i++) {
    gpoints[i].x = points[i].x;
    gpoints[i].y = points[i].y;
  }
  return gpoints;
}

//
// Points outside window in x direction excluded
//
GdkPoint* GlowDrawGtk::points_to_gdk_points_curve(
    GlowWind* w, glow_sPointX* points, int point_cnt, int* cnt)
{
  GdkPoint* gpoints = (GdkPoint*)malloc(point_cnt * sizeof(GdkPoint));
  int idx = 0;
  int last_idx = 0;
  for (int i = 0; i < point_cnt; i++) {
    if (idx == 0 && i != point_cnt - 1
        && ((points[i].x < w->subwindow_x && points[i + 1].x < w->subwindow_x)
               || (points[i].x > w->subwindow_x + w->window_width
                      && points[i + 1].x > w->subwindow_x + w->window_width)))

      continue;
    if (idx != 0
        && !((points[i].x < w->subwindow_x && points[i - 1].x < w->subwindow_x)
               || (points[i].x > w->subwindow_x + w->window_width
                      && points[i - 1].x > w->subwindow_x + w->window_width)))
      last_idx = idx;
    gpoints[idx].x = points[i].x;
    gpoints[idx].y = points[i].y;
    idx++;
  }
  *cnt = idx;
  if (last_idx != 0)
    *cnt = last_idx + 1;
  return gpoints;
}

glow_eFontType GlowDrawGtk::drawtype_to_fonttype(glow_eDrawType gc_type)
{
  switch (gc_type) {
  case glow_eDrawType_TextHelveticaBold:
  case glow_eDrawType_TextHelveticaEraseBold:
    return glow_eFontType_Bold;
  default:
    return glow_eFontType_Normal;
  }
}

cairo_font_face_t* GlowDrawGtk::get_font_face(glow_eFont font, glow_eFontType font_type)
{
  if (!font_face[font][font_type])
    font_face[font][font_type] = cairo_toy_font_face_create(font_names[font], 
	 CAIRO_FONT_SLANT_NORMAL,
	 font_type == glow_eFontType_Bold ? CAIRO_FONT_WEIGHT_BOLD : CAIRO_FONT_WEIGHT_NORMAL);

  return font_face[font][font_type];
}

void GlowDrawGtk::free_font_face()
{
  for (int i = 0; i < glow_eFont__; i++) {
    for (int j = 0; j < glow_eFontType__; j++) {
      if (font_face[i][j])
	cairo_font_face_destroy(font_face[i][j]);
    }
  }
}

int GlowDrawGtk::get_font_type(int gc_type)
{
  int font_type;

  switch (gc_type) {
  case glow_eDrawType_TextHelveticaBold:
  case glow_eDrawType_TextHelveticaEraseBold:
    font_type = glow_eFontType_Bold;
    break;
  default:
    font_type = glow_eFontType_Normal;
    break;
  }

  return font_type;
}

// Image functions
int GlowDrawGtk::image_get_width(glow_tImImage image)
{
  return gdk_pixbuf_get_width((GdkPixbuf*)image);
}

int GlowDrawGtk::image_get_height(glow_tImImage image)
{
  return gdk_pixbuf_get_height((GdkPixbuf*)image);
}

int GlowDrawGtk::image_get_rowstride(glow_tImImage image)
{
  return gdk_pixbuf_get_rowstride((GdkPixbuf*)image);
}

unsigned char* GlowDrawGtk::image_get_data(glow_tImImage image)
{
  return (unsigned char*)gdk_pixbuf_get_pixels((GdkPixbuf*)image);
}

void GlowDrawGtk::image_copy(glow_tImImage orig_image, glow_tImImage* image)
{
  if (*image)
    g_object_unref((GdkPixbuf*)*image);

  *(GdkPixbuf**)image = gdk_pixbuf_copy((GdkPixbuf*)orig_image);
}

void GlowDrawGtk::image_rotate(
    glow_tImImage* image, int to_rotation, int from_rotation)
{
#if GDK_PIXBUF_MAJOR == 2 && GDK_PIXBUF_MINOR < 8
  return;
#else
  int grot;
  int drot = to_rotation - from_rotation;
  drot = int((float(drot) / 360 - floor(float(drot) / 360)) * 360);
  switch (drot) {
  case 90:
    grot = GDK_PIXBUF_ROTATE_CLOCKWISE;
    break;
  case 180:
    grot = GDK_PIXBUF_ROTATE_UPSIDEDOWN;
    break;
  case 270:
    grot = GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE;
    break;
  default:
    return;
  }
  GdkPixbuf* im
      = gdk_pixbuf_rotate_simple((GdkPixbuf*)*image, (GdkPixbufRotation)grot);
  g_object_unref((GdkPixbuf*)*image);
  *image = (glow_tImImage)im;
#endif
}

void GlowDrawGtk::image_flip_vertical(glow_tImImage* image)
{
#if GDK_PIXBUF_MAJOR == 2 && GDK_PIXBUF_MINOR < 8
  return;
#else
  GdkPixbuf* im = gdk_pixbuf_flip((GdkPixbuf*)*image, TRUE);
  g_object_unref((GdkPixbuf*)*image);
  *image = (glow_tImImage)im;
#endif
}

void GlowDrawGtk::image_flip_horizontal(glow_tImImage* image)
{
#if GDK_PIXBUF_MAJOR == 2 && GDK_PIXBUF_MINOR < 8
  return;
#else
  GdkPixbuf* im = gdk_pixbuf_flip((GdkPixbuf*)*image, FALSE);
  g_object_unref((GdkPixbuf*)*image);
  *image = (glow_tImImage)im;
#endif
}

int GlowDrawGtk::image_scale(int width, int height, glow_tImImage orig_im,
    glow_tImImage* im, glow_tImData* im_data, glow_tPixmap* im_pixmap,
    glow_tPixmap* im_mask)
{
  if (width == gdk_pixbuf_get_width((GdkPixbuf*)*im)
      && height == gdk_pixbuf_get_height((GdkPixbuf*)*im))
    return 0;
  if (width == 0 && height == 0) {
    width = gdk_pixbuf_get_width((GdkPixbuf*)*im);
    height = gdk_pixbuf_get_height((GdkPixbuf*)*im);
  }

  if (!orig_im) {
    // Scale from im
    if (!*im)
      return 0;

    GdkPixbuf* im_old = (GdkPixbuf*)*im;
    *im = gdk_pixbuf_scale_simple(
        (GdkPixbuf*)*im, width, height, GDK_INTERP_NEAREST);
    g_object_unref((GdkPixbuf*)im_old);
  } else {
// Scale from orig_im

#if defined PWRE_CONF_RSVG
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    if (im_data && *im_data && *im) {
      RsvgHandle* handle;
      const char* imagefile;

      g_object_unref((GdkPixbuf*)*im);

      handle = (RsvgHandle*)*im_data;
      imagefile = rsvg_handle_get_base_uri(handle);
      *im = rsvg_pixbuf_from_file_at_size(imagefile, width, height, NULL);
    } else
#pragma GCC diagnostic pop
#endif
    {
      if (*im)
        g_object_unref((GdkPixbuf*)*im);
      *im = gdk_pixbuf_scale_simple(
          (GdkPixbuf*)orig_im, width, height, GDK_INTERP_NEAREST);
    }
  }
  return 1;
}

int GlowDrawGtk::image_load(char* imagefile, glow_tImImage* orig_im,
    glow_tImImage* im, glow_tImData* im_data)
{
  if (im && *im)
    g_object_unref((GdkPixbuf*)*im);
  if (*orig_im)
    g_object_unref((GdkPixbuf*)*orig_im);
#if defined PWRE_CONF_RSVG
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  if (im_data && streq(strchr(imagefile, '.'), ".svg")) {
    RsvgHandle* handle;

    handle = rsvg_handle_new_from_file(imagefile, NULL);
    *im_data = (glow_tImImage*)handle;
    *orig_im = (glow_tImImage*)rsvg_pixbuf_from_file(imagefile, NULL);
  } else
#pragma GCC diagnostic pop
#endif
  {
    *orig_im = (glow_tImImage*)gdk_pixbuf_new_from_file(imagefile, 0);
    if (!*orig_im) {
      if (im)
        *im = 0;
      return 0;
    }
  }
  if (im) {
    *im = (glow_tImImage*)gdk_pixbuf_copy((GdkPixbuf*)*orig_im);
  }
  return 1;
}

int GlowDrawGtk::image_render(int width, int height, glow_tImImage orig_im,
    glow_tImImage* im, glow_tPixmap* im_pixmap, glow_tPixmap* im_mask)
{
  return 1;
}

void GlowDrawGtk::image_free(glow_tImImage image)
{
  g_object_unref((GdkPixbuf*)image);
}

void GlowDrawGtk::pixmap_free(glow_tPixmap pixmap)
{
}

void GlowDrawGtk::image_pixel_iter(glow_tImImage orig_image,
    glow_tImImage* image, void (*pixel_cb)(void*, unsigned char*),
    void* userdata)
{
  unsigned char *rgb, *rgb_row;
  int rgb_height;
  int rgb_width;
  int rowstride;
  int n_channels;

  if (orig_image) {
    if (image && *image != orig_image)
      g_object_unref((GdkPixbuf*)*image);
    *image = (glow_tImImage*)gdk_pixbuf_copy((GdkPixbuf*)orig_image);
  } else if (!*image)
    return;

  rgb = gdk_pixbuf_get_pixels((GdkPixbuf*)*image);
  rgb_height = gdk_pixbuf_get_height((GdkPixbuf*)*image);
  rgb_width = gdk_pixbuf_get_width((GdkPixbuf*)*image);
  rowstride = gdk_pixbuf_get_rowstride((GdkPixbuf*)*image);
  n_channels = gdk_pixbuf_get_n_channels((GdkPixbuf*)*image);

  rgb_row = rgb;
  for (int j = 0; j < rgb_height; j++) {
    rgb = rgb_row;
    for (int i = 0; i < rgb_width; i++) {
      if (n_channels >= 4 && *(rgb + 3))
        (pixel_cb)(userdata, rgb);
      rgb += n_channels;
    }
    rgb_row += rowstride;
  }
}

void GlowDrawGtk::set_cairo_clip(DrawWind* wind, cairo_t* cr)
{
  DrawWindGtk* w = (DrawWindGtk*)wind;
  cairo_rectangle(cr, w->clip_rectangle[w->clip_cnt - 1].x,
      w->clip_rectangle[w->clip_cnt - 1].y,
      w->clip_rectangle[w->clip_cnt - 1].width,
      w->clip_rectangle[w->clip_cnt - 1].height);
  cairo_clip(cr);
}

void GlowDrawGtk::reset_cairo_clip(DrawWind* wind, cairo_t* cr)
{
  cairo_reset_clip(cr);
}

int GlowDrawGtk::gradient_create_pattern(int x, int y, int w, int h,
    glow_eDrawType d0, glow_eDrawType d1, glow_eDrawType d2,
    glow_eGradient gradient, double transparency, cairo_pattern_t** pat)
{
  double r1, g1, b1, r2, g2, b2;
  int a = 15;
  int notransp = feq(transparency, 0.0);

  GlowColor::rgb_color(d1, &r1, &g1, &b1, get_customcolors());
  GlowColor::rgb_color(d2, &r2, &g2, &b2, get_customcolors());

  switch (gradient) {
  case glow_eGradient_HorizontalUp:
    *pat = cairo_pattern_create_linear(x, y, x, y + h);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r2, g2, b2);
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r2, g2, b2, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
    }
    break;
  case glow_eGradient_HorizontalDown:
    *pat = cairo_pattern_create_linear(x, y, x, y + h);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r2, g2, b2);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r2, g2, b2, 1.0 - transparency);
    }
    break;
  case glow_eGradient_HorizontalTube1:
    *pat = cairo_pattern_create_linear(x, y, x, y + h);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.5, r2, g2, b2);
      cairo_pattern_add_color_stop_rgb(*pat, 1, r1, g1, b1);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.5, r2, g2, b2, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 1, r1, g1, b1, 1.0 - transparency);
    }
    break;
  case glow_eGradient_HorizontalTube2: {
    double r0, g0, b0;

    *pat = cairo_pattern_create_linear(x, y, x, y + h);
    GlowColor::rgb_color(d0, &r0, &g0, &b0, get_customcolors());
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0, r0, g0, b0);
      cairo_pattern_add_color_stop_rgb(*pat, 0.3, r2, g2, b2);
      cairo_pattern_add_color_stop_rgb(*pat, .95, r1, g1, b1);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0, r0, g0, b0, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.3, r2, g2, b2, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, .95, r1, g1, b1, 1.0 - transparency);
    }
    break;
  }
  case glow_eGradient_VerticalRight:
    *pat = cairo_pattern_create_linear(x, y, x + w, y);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r2, g2, b2);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r2, g2, b2, 1.0 - transparency);
    }
    break;
  case glow_eGradient_VerticalLeft:
    *pat = cairo_pattern_create_linear(x, y, x + w, y);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r2, g2, b2);
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r2, g2, b2, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
    }
    break;
  case glow_eGradient_VerticalTube1:
    *pat = cairo_pattern_create_linear(x, y, x + w, y);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.5, r2, g2, b2);
      cairo_pattern_add_color_stop_rgb(*pat, 1, r1, g1, b1);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.5, r2, g2, b2, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 1, r1, g1, b1, 1.0 - transparency);
    }
    break;
  case glow_eGradient_VerticalTube2: {
    double r0, g0, b0;

    GlowColor::rgb_color(d0, &r0, &g0, &b0, get_customcolors());
    *pat = cairo_pattern_create_linear(x, y, x + w, y);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0, r0, g0, b0);
      cairo_pattern_add_color_stop_rgb(*pat, 0.3, r2, g2, b2);
      cairo_pattern_add_color_stop_rgb(*pat, 0.95, r1, g1, b1);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0, r0, g0, b0, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.3, r2, g2, b2, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.95, r1, g1, b1, 1.0 - transparency);
    }
    break;
  }
  case glow_eGradient_DiagonalUpperLeft: {
    double x0, x1, y0, y1;

    if (w > h) {
      x0 = x + w / 2 - h / 2;
      y0 = y - (w - h) / a;
      x1 = x + w / 2 + h / 2;
      y1 = y + h + (w - h) / a;
    } else {
      y0 = y + h / 2 - w / 2;
      x0 = x - (h - w) / a;
      y1 = y + h / 2 + w / 2;
      x1 = x + w + (h - w) / a;
    }
    *pat = cairo_pattern_create_linear(x0, y0, x1, y1);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r2, g2, b2);
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r2, g2, b2, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
    }
    break;
  }
  case glow_eGradient_DiagonalLowerLeft: {
    double x0, x1, y0, y1;
    // *pat = cairo_pattern_create_linear( x, y, x+w, y+h);
    if (w > h) {
      x0 = x + w / 2 - h / 2;
      y0 = y + h + (w - h) / a;
      x1 = x + w / 2 + h / 2;
      y1 = y - (w - h) / a;
    } else {
      y1 = y + h / 2 - w / 2;
      x1 = x + w + (h - w) / a;
      y0 = y + h / 2 + w / 2;
      x0 = x - (h - w) / a;
    }
    *pat = cairo_pattern_create_linear(x0, y0, x1, y1);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r2, g2, b2);
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r2, g2, b2, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
    }
    break;
  }
  case glow_eGradient_DiagonalUpperRight: {
    double x0, x1, y0, y1;
    // *pat = cairo_pattern_create_linear( x, y, x+w, y+h);
    if (w > h) {
      x0 = x + w / 2 - h / 2;
      y0 = y + h + (w - h) / a;
      x1 = x + w / 2 + h / 2;
      y1 = y - (w - h) / a;
    } else {
      y1 = y + h / 2 - w / 2;
      x1 = x + w + (h - w) / a;
      y0 = y + h / 2 + w / 2;
      x0 = x - (h - w) / a;
    }
    *pat = cairo_pattern_create_linear(x0, y0, x1, y1);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r2, g2, b2);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r2, g2, b2, 1.0 - transparency);
    }
    break;
  }
  case glow_eGradient_DiagonalLowerRight: {
    double x0, x1, y0, y1;

    if (w > h) {
      x0 = x + w / 2 - h / 2;
      y0 = y - (w - h) / a;
      x1 = x + w / 2 + h / 2;
      y1 = y + h + (w - h) / a;
    } else {
      y0 = y + h / 2 - w / 2;
      x0 = x - (h - w) / a;
      y1 = y + h / 2 + w / 2;
      x1 = x + w + (h - w) / a;
    }
    *pat = cairo_pattern_create_linear(x0, y0, x1, y1);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r2, g2, b2);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r2, g2, b2, 1.0 - transparency);
    }
    break;
  }
  case glow_eGradient_DiagonalUpTube: {
    double x0, x1, y0, y1;

    if (w > h) {
      x0 = x + w / 2 - h / 2;
      y0 = y - (w - h) / a;
      x1 = x + w / 2 + h / 2;
      y1 = y + h + (w - h) / a;
    } else {
      y0 = y + h / 2 - w / 2;
      x0 = x - (h - w) / a;
      y1 = y + h / 2 + w / 2;
      x1 = x + w + (h - w) / a;
    }
    *pat = cairo_pattern_create_linear(x0, y0, x1, y1);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.5, r2, g2, b2);
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.5, r2, g2, b2, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
    }
    break;
  }
  case glow_eGradient_DiagonalDownTube: {
    double x0, x1, y0, y1;
    // *pat = cairo_pattern_create_linear( x, y, x+w, y+h);
    if (w > h) {
      x0 = x + w / 2 - h / 2;
      y0 = y + h + (w - h) / a;
      x1 = x + w / 2 + h / 2;
      y1 = y - (w - h) / a;
    } else {
      y1 = y + h / 2 - w / 2;
      x1 = x + w + (h - w) / a;
      y0 = y + h / 2 + w / 2;
      x0 = x - (h - w) / a;
    }
    *pat = cairo_pattern_create_linear(x0, y0, x1, y1);
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.5, r2, g2, b2);
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.5, r2, g2, b2, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
    }
    break;
  }
  case glow_eGradient_Globe:
    *pat = cairo_pattern_create_radial(x + w / 3, y + h / 3, 0, x + w / 3,
        y + h / 3, sqrt(w * w / 4 + h * h / 4));
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r2, g2, b2);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r2, g2, b2, 1.0 - transparency);
    }
    break;
  case glow_eGradient_RadialCenter:
    *pat = cairo_pattern_create_radial(x + w / 2, y + h / 2, 0, x + w / 2,
        y + h / 2, sqrt(w * w / 4 + h * h / 4));
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r2, g2, b2);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r2, g2, b2, 1.0 - transparency);
    }
    break;
  case glow_eGradient_RadialUpperLeft:
    *pat = cairo_pattern_create_radial(x, y, 0, x, y, sqrt(w * w + h * h));
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r2, g2, b2);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r2, g2, b2, 1.0 - transparency);
    }
    break;
  case glow_eGradient_RadialLowerLeft:
    *pat = cairo_pattern_create_radial(
        x, y + h, 0, x, y + h, sqrt(w * w + h * h));
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r2, g2, b2);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r2, g2, b2, 1.0 - transparency);
    }
    break;
  case glow_eGradient_RadialUpperRight:
    *pat = cairo_pattern_create_radial(
        x + w, y, 0, x + w, y, sqrt(w * w + h * h));
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r2, g2, b2);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r2, g2, b2, 1.0 - transparency);
    }
    break;
  case glow_eGradient_RadialLowerRight:
    *pat = cairo_pattern_create_radial(
        x + w, y + h, 0, x + w, y + h, sqrt(w * w + h * h));
    if (notransp) {
      cairo_pattern_add_color_stop_rgb(*pat, 0.9, r1, g1, b1);
      cairo_pattern_add_color_stop_rgb(*pat, 0.1, r2, g2, b2);
    } else {
      cairo_pattern_add_color_stop_rgba(*pat, 0.9, r1, g1, b1, 1.0 - transparency);
      cairo_pattern_add_color_stop_rgba(*pat, 0.1, r2, g2, b2, 1.0 - transparency);
    }
    break;
  default:
    return 0;
  }
  return 1;
}

glow_eGradient GlowDrawGtk::gradient_rotate(double rot, glow_eGradient gradient)
{
  glow_eGradient g;
  double rotation = (rot / 360 - floor(rot / 360)) * 360;

  if (45 >= rotation || rotation > 315) {
    g = gradient;
  } else if (45 < rotation && rotation <= 135) {
    switch (gradient) {
    case glow_eGradient_HorizontalUp:
      g = glow_eGradient_VerticalRight;
      break;
    case glow_eGradient_HorizontalDown:
      g = glow_eGradient_VerticalLeft;
      break;
    case glow_eGradient_HorizontalTube1:
      g = glow_eGradient_VerticalTube1;
      break;
    case glow_eGradient_HorizontalTube2:
      g = glow_eGradient_VerticalTube2;
      break;
    case glow_eGradient_VerticalLeft:
      g = glow_eGradient_HorizontalUp;
      break;
    case glow_eGradient_VerticalRight:
      g = glow_eGradient_HorizontalDown;
      break;
    case glow_eGradient_VerticalTube1:
      g = glow_eGradient_HorizontalTube1;
      break;
    case glow_eGradient_VerticalTube2:
      g = glow_eGradient_HorizontalTube2;
      break;
    case glow_eGradient_DiagonalUpperLeft:
      g = glow_eGradient_DiagonalUpperRight;
      break;
    case glow_eGradient_DiagonalLowerLeft:
      g = glow_eGradient_DiagonalUpperLeft;
      break;
    case glow_eGradient_DiagonalUpperRight:
      g = glow_eGradient_DiagonalLowerRight;
      break;
    case glow_eGradient_DiagonalLowerRight:
      g = glow_eGradient_DiagonalLowerLeft;
      break;
    case glow_eGradient_DiagonalUpTube:
      g = glow_eGradient_DiagonalDownTube;
      break;
    case glow_eGradient_DiagonalDownTube:
      g = glow_eGradient_DiagonalUpTube;
      break;
    case glow_eGradient_RadialUpperLeft:
      g = glow_eGradient_RadialUpperRight;
      break;
    case glow_eGradient_RadialLowerLeft:
      g = glow_eGradient_RadialUpperLeft;
      break;
    case glow_eGradient_RadialUpperRight:
      g = glow_eGradient_RadialLowerRight;
      break;
    case glow_eGradient_RadialLowerRight:
      g = glow_eGradient_RadialLowerLeft;
      break;
    default:
      g = gradient;
    }
  } else if (135 < rotation && rotation <= 225) {
    switch (gradient) {
    case glow_eGradient_HorizontalUp:
      g = glow_eGradient_HorizontalDown;
      break;
    case glow_eGradient_HorizontalDown:
      g = glow_eGradient_HorizontalUp;
      break;
    case glow_eGradient_VerticalLeft:
      g = glow_eGradient_VerticalRight;
      break;
    case glow_eGradient_VerticalRight:
      g = glow_eGradient_VerticalLeft;
      break;
    case glow_eGradient_DiagonalUpperLeft:
      g = glow_eGradient_DiagonalLowerRight;
      break;
    case glow_eGradient_DiagonalLowerLeft:
      g = glow_eGradient_DiagonalUpperRight;
      break;
    case glow_eGradient_DiagonalUpperRight:
      g = glow_eGradient_DiagonalLowerLeft;
      break;
    case glow_eGradient_DiagonalLowerRight:
      g = glow_eGradient_DiagonalUpperLeft;
      break;
    case glow_eGradient_RadialUpperLeft:
      g = glow_eGradient_RadialLowerRight;
      break;
    case glow_eGradient_RadialLowerLeft:
      g = glow_eGradient_RadialUpperRight;
      break;
    case glow_eGradient_RadialUpperRight:
      g = glow_eGradient_RadialLowerLeft;
      break;
    case glow_eGradient_RadialLowerRight:
      g = glow_eGradient_RadialUpperLeft;
      break;
    default:
      g = gradient;
    }
  } else { // if ( 225 < rotation && rotation <= 315)
    switch (gradient) {
    case glow_eGradient_HorizontalUp:
      g = glow_eGradient_VerticalLeft;
      break;
    case glow_eGradient_HorizontalDown:
      g = glow_eGradient_VerticalRight;
      break;
    case glow_eGradient_HorizontalTube1:
      g = glow_eGradient_VerticalTube1;
      break;
    case glow_eGradient_HorizontalTube2:
      g = glow_eGradient_VerticalTube2;
      break;
    case glow_eGradient_VerticalLeft:
      g = glow_eGradient_HorizontalDown;
      break;
    case glow_eGradient_VerticalRight:
      g = glow_eGradient_HorizontalUp;
      break;
    case glow_eGradient_VerticalTube1:
      g = glow_eGradient_HorizontalTube1;
      break;
    case glow_eGradient_VerticalTube2:
      g = glow_eGradient_HorizontalTube2;
      break;
    case glow_eGradient_DiagonalUpperLeft:
      g = glow_eGradient_DiagonalLowerLeft;
      break;
    case glow_eGradient_DiagonalLowerLeft:
      g = glow_eGradient_DiagonalLowerRight;
      break;
    case glow_eGradient_DiagonalUpperRight:
      g = glow_eGradient_DiagonalUpperLeft;
      break;
    case glow_eGradient_DiagonalLowerRight:
      g = glow_eGradient_DiagonalUpperRight;
      break;
    case glow_eGradient_DiagonalUpTube:
      g = glow_eGradient_DiagonalDownTube;
      break;
    case glow_eGradient_DiagonalDownTube:
      g = glow_eGradient_DiagonalUpTube;
      break;
    case glow_eGradient_RadialUpperLeft:
      g = glow_eGradient_RadialLowerLeft;
      break;
    case glow_eGradient_RadialLowerLeft:
      g = glow_eGradient_RadialLowerRight;
      break;
    case glow_eGradient_RadialUpperRight:
      g = glow_eGradient_RadialUpperLeft;
      break;
    case glow_eGradient_RadialLowerRight:
      g = glow_eGradient_RadialUpperRight;
      break;
    default:
      g = gradient;
    }
  }
  return g;
}

int GlowDrawGtk::gradient_fill_rect(GlowWind* wind, int x, int y, int w, int h,
    glow_eDrawType d0, glow_eDrawType d1, glow_eDrawType d2,
    glow_eGradient gradient, double transparency)
{
  DrawWindGtk* ww = (DrawWindGtk*)wind->window;
  if (ctx->nodraw)
    return 1;

  cairo_t *cr = get_cairo(wind);

  if (ww->clip_on)
    set_cairo_clip(ww, cr);

  cairo_pattern_t* pat;
  if (!gradient_create_pattern(x, y, w, h, d0, d1, d2, gradient, transparency, &pat))
    return 0;
  cairo_rectangle(cr, x-1, y-1, w, h);
  cairo_set_source(cr, pat);
  cairo_fill(cr);

  if (ww->clip_on)
    reset_cairo_clip(ww, cr);
  cairo_pattern_destroy(pat);
  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::gradient_fill_rectrounded(GlowWind* wind, int x, int y, int w,
    int h, int roundamount, glow_eDrawType d0, glow_eDrawType d1,
    glow_eDrawType d2, glow_eGradient gradient, double transparency)
{
  DrawWindGtk* ww = (DrawWindGtk*)wind->window;
  if (ctx->nodraw)
    return 1;

  cairo_t* cr = get_cairo(wind);

  if (ww->clip_on)
    set_cairo_clip(ww, cr);

  cairo_pattern_t* pat;
  if (!gradient_create_pattern(x, y, w, h, d0, d1, d2, gradient, transparency, &pat))
    return 0;

  if (roundamount >= 0) {
    cairo_move_to(cr, x + roundamount, y);
    cairo_line_to(cr, x + w - roundamount, y);
    cairo_arc(
        cr, x + w - roundamount, y + roundamount, roundamount, -M_PI / 2, 0);
    cairo_line_to(cr, x + w, y + h - roundamount);
    cairo_arc(cr, x + w - roundamount, y + h - roundamount, roundamount, 0,
        M_PI / 2);
    cairo_line_to(cr, x + roundamount, y + h);
    cairo_arc(cr, x + roundamount, y + h - roundamount, roundamount, M_PI / 2,
        M_PI);
    cairo_line_to(cr, x, y + roundamount);
    cairo_arc(cr, x + roundamount, y + roundamount, roundamount, M_PI,
        M_PI * 3 / 2);
  } else
    cairo_rectangle(cr, x, y, w, h);

  cairo_set_source(cr, pat);
  cairo_fill(cr);

  if (ww->clip_on)
    reset_cairo_clip(ww, cr);
  cairo_pattern_destroy(pat);
  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::gradient_fill_arc(GlowWind* wind, int x, int y, int w, int h,
    int angle1, int angle2, glow_eDrawType d0, glow_eDrawType d1,
    glow_eDrawType d2, glow_eGradient gradient, double transparency)
{
  DrawWindGtk* ww = (DrawWindGtk*)wind->window;
  if (ctx->nodraw)
    return 1;

  if (angle1 >= 360)
    angle1 = angle1 - angle1 / 360 * 360;
  else if (angle1 < 0)
    angle1 = angle1 + (-angle1 / 360 + 1) * 360;

  cairo_t* cr = get_cairo(wind);

  if (ww->clip_on)
    set_cairo_clip(ww, cr);

  cairo_pattern_t* pat;
  if (!gradient_create_pattern(x, y, w, h, d0, d1, d2, gradient, transparency, &pat))
    return 0;

  cairo_save(cr);
  cairo_translate(cr, double(x) + double(w) / 2, double(y) + double(h) / 2);
  cairo_scale(cr, double(w) / 2, double(h) / 2);
  if (!(angle2 == 360 || angle2 == 180))
    cairo_move_to(cr, 0, 0);
  cairo_arc(cr, 0, 0, 1, -double(angle1 + angle2) / 180 * M_PI,
      -double(angle1) / 180 * M_PI);
  if (!(angle2 == 360 || angle2 == 180))
    cairo_move_to(cr, 0, 0);
  cairo_restore(cr);
  cairo_set_source(cr, pat);
  cairo_fill(cr);

  if (ww->clip_on)
    reset_cairo_clip(ww, cr);
  cairo_pattern_destroy(pat);
  end_cairo(wind, cr);

  return 1;
}

int GlowDrawGtk::gradient_fill_polyline(GlowWind* wind, glow_sPointX* points,
    int point_cnt, glow_eDrawType d0, glow_eDrawType d1, glow_eDrawType d2,
    glow_eGradient gradient, double transparency)
{
  DrawWindGtk* ww = (DrawWindGtk*)wind->window;
  if (ctx->nodraw)
    return 1;

  cairo_t* cr = get_cairo(wind);
  double x0, y0, x1, y1;

  if (ww->clip_on)
      set_cairo_clip(ww, cr);

  x0 = y0 = 1e37;
  x1 = y1 = 1e-37;
  for (int j = 0; j < point_cnt; j++) {
    if (points[j].x < x0)
      x0 = points[j].x;
    if (points[j].y < y0)
      y0 = points[j].y;
    if (points[j].x > x1)
      x1 = points[j].x;
    if (points[j].y > y1)
      y1 = points[j].y;
    
    if (j == 0)
      cairo_move_to(cr, points[j].x, points[j].y);
    else
      cairo_line_to(cr, points[j].x, points[j].y);
  }

  cairo_pattern_t* pat;
  if (!gradient_create_pattern((int)x0, (int)y0, (int)(x1 - x0),
      (int)(y1 - y0), d0, d1, d2, gradient, transparency, &pat))
    return 0;
  cairo_set_source(cr, pat);
  cairo_fill(cr);

  if (ww->clip_on)
    reset_cairo_clip(ww, cr);
  cairo_pattern_destroy(pat);
  end_cairo(wind, cr);

  return 1;
}

void GlowDrawGtk::log_event(GdkEvent* event)
{
  if (ctx->eventlog_callback) {
    GdkEvent e;

    memcpy(&e, event, sizeof(e));

    switch (e.type) {
    case GDK_KEY_PRESS:
      *(gchar*)&e.key.string = e.key.string[0];
      break;
    case GDK_MOTION_NOTIFY: {
      int x, y;

      if (e.motion.is_hint) {
        gdk_window_get_device_position(e.any.window, 
	    gdk_seat_get_pointer(gdk_display_get_default_seat(display)), 
	    &x, &y, NULL);
        e.button.x = x;
        e.button.y = y;
        e.motion.is_hint = 0;
      }
      break;
    }
    case GDK_EXPOSE: {
      int width, height;

      get_window_size(&ctx->mw, &width, &height);
      if (e.expose.area.x == 0 && e.expose.area.y == 0) {
        e.expose.area.x = -999;
        e.expose.area.y = -999;
        e.expose.area.width = width;
        e.expose.area.height = height;
      }
      break;
    }
    default:;
    }

    (ctx->eventlog_callback)(ctx, &e, sizeof(e));
  }
}

void GlowDrawGtk::event_exec(void* event, unsigned int size)
{
  GdkEvent e;

  if (size != sizeof(e))
    return;

  memcpy(&e, event, size);
  e.any.window = m_wind.window;

  switch (e.type) {
  case GDK_KEY_PRESS: {
    gchar* p = (gchar*)malloc(1);

    *p = *(gchar*)&e.key.string;
    e.key.string = p;
    break;
  }
  case GDK_EXPOSE: {
    if (e.expose.area.x == -999 && e.expose.area.y == -999) {
      GtkWidget* parent;

      parent = gtk_widget_get_parent(m_wind.toplevel);
      while (!GTK_IS_WINDOW(parent))
        parent = gtk_widget_get_parent(parent);

      gtk_window_resize(
          GTK_WINDOW(parent), e.expose.area.width, e.expose.area.height);
      // set_window_size( &ctx->mw, e.expose.area.width, e.expose.area.height);
      e.expose.area.x = 0;
      e.expose.area.y = 0;
    }
    break;
  }
  default:;
  }

  event_handler(e);

  switch (e.type) {
  case GDK_KEY_PRESS: {
    free(e.key.string);
    break;
  }
  default:;
  }
}

int GlowDrawGtk::open_color_selection(double* r, double* g, double* b)
{
  int sts;
  GdkRGBA color;
  GtkWidget *p;

  p = m_wind.toplevel;
  while (p && !GTK_IS_WINDOW(p))
    p = gtk_widget_get_parent(p);

  GtkWidget* csel = gtk_color_chooser_dialog_new("Color selection", GTK_WINDOW(p));
  color.red = 1.0;
  color.green = 1.0;
  color.blue = 1.0;
  color.alpha = 1.0;
  gtk_color_chooser_set_rgba(GTK_COLOR_CHOOSER(csel), &color);
  gint response = gtk_dialog_run(GTK_DIALOG(csel));
  if (response == GTK_RESPONSE_OK) {
    gtk_color_chooser_get_rgba(GTK_COLOR_CHOOSER(csel), &color);
    *r = color.red;
    *g = color.green;
    *b = color.blue;
    sts = 1;
  } else
    sts = 0;
  gtk_widget_destroy(csel);
  return sts;
}

void GlowDrawGtk::update_color(glow_eDrawType color)
{
  if (!GlowColor::is_custom(color)) {
    if (gcs[color]) {
      //printf("X Regular: %4d %llu %d\n", color, (unsigned long long)gcs[color]);
      cairo_pattern_destroy(gcs[color]);
      gcs[color] = 0;
    }
  } else if (get_customcolors()) {
    // A customcolor
    if (get_customcolors()->gcs[color - glow_eDrawType_CustomColor1]) {
      //printf("X Custom: %4d %llu\n", color - glow_eDrawType_CustomColor1, (unsigned long long)get_customcolors()->gcs[color - glow_eDrawType_CustomColor1]);
      cairo_pattern_destroy(get_customcolors()->gcs[color - glow_eDrawType_CustomColor1]);
      get_customcolors()->gcs[color - glow_eDrawType_CustomColor1] = 0;
    }
    if (get_customcolors()->gcs[color - glow_eDrawType_CustomColor1 + 1]) {
      cairo_pattern_destroy(get_customcolors()
                         ->gcs[color - glow_eDrawType_CustomColor1 + 1]);
      //printf("X Custom:  %4d %llu\n", color - glow_eDrawType_CustomColor1 + 1, (unsigned long long)get_customcolors()->gcs[color - glow_eDrawType_CustomColor1 + 1]);
      get_customcolors()->gcs[color - glow_eDrawType_CustomColor1 + 1] = 0;
    }
    if (get_customcolors()->gcs[color - glow_eDrawType_CustomColor1 + 2]) {
      cairo_pattern_destroy(get_customcolors()
                         ->gcs[color - glow_eDrawType_CustomColor1 + 2]);
      //printf("X Custom:  %4d %llu\n", color - glow_eDrawType_CustomColor1 + 2, (unsigned long long)get_customcolors()->gcs[color - glow_eDrawType_CustomColor1 + 2]);
      get_customcolors()->gcs[color - glow_eDrawType_CustomColor1 + 2] = 0;
    }
    if (get_customcolors()->gcs[color - glow_eDrawType_CustomColor1 + 3]) {
      cairo_pattern_destroy(get_customcolors()
                         ->gcs[color - glow_eDrawType_CustomColor1 + 3]);
      //printf("X Custom:  %4d %llu\n", color - glow_eDrawType_CustomColor1 + 3, (unsigned long long)get_customcolors()->gcs[color - glow_eDrawType_CustomColor1 + 3]);
      get_customcolors()->gcs[color - glow_eDrawType_CustomColor1 + 3] = 0;
    }
  }
}

void GlowDrawGtk::push_customcolors(GlowCustomColors* cc)
{
  if (customcolors_cnt > CUSTOMCOLORS_STACK_SIZE) {
    printf("** Max number custom colors exceede\n");
    return;
  }

  for (int i = customcolors_cnt; i > 0; i--)
    customcolors[i] = customcolors[i - 1];
  customcolors[0] = (GlowCustomColorsGtk*)cc;
  customcolors_cnt++;
}

void GlowDrawGtk::set_customcolors(GlowCustomColors* cc)
{
  customcolors[0] = (GlowCustomColorsGtk*)cc;
  customcolors_cnt = 1;
}

void GlowDrawGtk::pop_customcolors()
{
  if (customcolors_cnt <= 0) {
    printf("** Customcolor stack disorder\n");
    return;
  }

  for (int i = 0; i < customcolors_cnt - 1; i++)
  {
    customcolors[i] = customcolors[i + 1];
    customcolors[i + 1] = NULL;
  }
  customcolors_cnt--;
}

GlowCustomColorsGtk* GlowDrawGtk::get_customcolors()
{
  if (customcolors_cnt == 0)
    return 0;
  return customcolors[0];
}

GlowCustomColors* GlowDrawGtk::create_customcolors()
{
  return new GlowCustomColorsGtk();
}

void GlowDrawGtk::remove_customcolors(GlowCustomColors* cc)
{
  for (int i = 0; i < customcolors_cnt; i++) {
    if (customcolors[i] == cc) {
      for (int j = i; j < customcolors_cnt - 1; j++)
	customcolors[j] = customcolors[j+1];
      customcolors_cnt--;
      break;
    }
  }
}

void GlowDrawGtk::reset_customcolors(GlowCustomColors* cc)
{
  for (int i = 0; i < cc->colors_size; i++) {
    if (((GlowCustomColorsGtk*)cc)->gcs[i]) {
      cairo_pattern_destroy(((GlowCustomColorsGtk*)cc)->gcs[i]);
      //printf("X Custom:  %4d %llu\n", i, (unsigned long long)((GlowCustomColorsGtk*)cc)->gcs[i]);
    }
  }
  memset(((GlowCustomColorsGtk*)cc)->gcs, 0,
      sizeof(((GlowCustomColorsGtk*)cc)->gcs));

  memset(((GlowCustomColorsGtk*)cc)->color_vect, 0,
      sizeof(((GlowCustomColorsGtk*)cc)->color_vect));
}
