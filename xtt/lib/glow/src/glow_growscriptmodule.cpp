/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2025 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <math.h>
#include <stdlib.h>
#include <string.h>

#include <iostream>

#include "glow_growscriptmodule.h"
#include "glow_grownode.h"
#include "glow_draw.h"
#include "glow_exportscript.h"

GrowScriptModule::GrowScriptModule(GrowCtx* glow_ctx, const char* name, double x, double y,
    double w, double h, glow_eDrawType border_d_type, int line_w,
    glow_mDisplayLevel display_lev, int fill_rect, int display_border,
    glow_eDrawType fill_d_type, int nodraw)
    : GrowRect(glow_ctx, name, x, y, w, h, border_d_type, line_w, 0,
	       display_lev, fill_rect, display_border, 0, fill_d_type, nodraw),
      module_index(0), left_border_width(0.5), right_border_width(0.5), top_border_width(0.5), 
      bottom_border_width(0.5), fill_module(0),
      vert_left_border(0), vert_right_border(0), vert_top_border(0), vert_bottom_border(0),
      vert_prio(0), vert_left_module(0), vert_right_module(0), vert_top_module(0), vert_bottom_module(0),
      vert_width(0), vert_height(0), vert_fix_width(0), vert_fix_height(0),
      horiz_left_border(0), horiz_right_border(0), horiz_top_border(0), horiz_bottom_border(0),
      horiz_prio(0), horiz_left_module(0), horiz_right_module(0), horiz_top_module(0), horiz_bottom_module(0),
      horiz_width(0), horiz_height(0), horiz_fix_width(0), horiz_fix_height(0), window_border_width(0), window_switch_ratio(1)
{
  if (!nodraw)
    draw();
}

GrowScriptModule::~GrowScriptModule()
{
}

void GrowScriptModule::save(std::ofstream& fp, glow_eSaveMode mode)
{
  fp << int(glow_eSave_GrowScriptModule) << '\n';
  fp << int(glow_eSave_GrowScriptModule_module_index) << FSPACE << module_index << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_left_border) << FSPACE << vert_left_border << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_right_border) << FSPACE << vert_right_border << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_top_border) << FSPACE << vert_top_border << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_bottom_border) << FSPACE << vert_bottom_border << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_prio) << FSPACE << vert_prio << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_left_module) << FSPACE << vert_left_module << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_right_module) << FSPACE << vert_right_module << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_top_module) << FSPACE << vert_top_module << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_bottom_module) << FSPACE << vert_bottom_module << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_width) << FSPACE << vert_width << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_height) << FSPACE << vert_height << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_fix_width) << FSPACE << vert_fix_width << '\n';
  fp << int(glow_eSave_GrowScriptModule_vert_fix_height) << FSPACE << vert_fix_height << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_left_border) << FSPACE << horiz_left_border << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_right_border) << FSPACE << horiz_right_border << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_top_border) << FSPACE << horiz_top_border << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_bottom_border) << FSPACE << horiz_bottom_border << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_prio) << FSPACE << horiz_prio << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_left_module) << FSPACE << horiz_left_module << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_right_module) << FSPACE << horiz_right_module << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_top_module) << FSPACE << horiz_top_module << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_bottom_module) << FSPACE << horiz_bottom_module << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_width) << FSPACE << horiz_width << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_height) << FSPACE << horiz_height << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_fix_width) << FSPACE << horiz_fix_width << '\n';
  fp << int(glow_eSave_GrowScriptModule_horiz_fix_height) << FSPACE << horiz_fix_height << '\n';
  fp << int(glow_eSave_GrowScriptModule_left_border_width) << FSPACE << left_border_width << '\n';
  fp << int(glow_eSave_GrowScriptModule_right_border_width) << FSPACE << right_border_width << '\n';
  fp << int(glow_eSave_GrowScriptModule_top_border_width) << FSPACE << top_border_width << '\n';
  fp << int(glow_eSave_GrowScriptModule_bottom_border_width) << FSPACE << bottom_border_width << '\n';
  fp << int(glow_eSave_GrowScriptModule_fill_module) << FSPACE << fill_module << '\n';
  fp << int(glow_eSave_GrowScriptModule_window_border_width) << FSPACE << window_border_width << '\n';
  fp << int(glow_eSave_GrowScriptModule_window_switch_ratio) << FSPACE << window_switch_ratio << '\n';
  fp << int(glow_eSave_GrowScriptModule_rect_part) << '\n';
  GrowRect::save(fp, mode);
  fp << int(glow_eSave_End) << '\n';
}

void GrowScriptModule::open(std::ifstream& fp)
{
  int type = 0;
  int end_found = 0;
  char dummy[40];

  for (;;) {
    if (!fp.good()) {
      fp.clear();
      fp.getline(dummy, sizeof(dummy));
      printf("** Read error GrowScriptModule: \"%d %s\"\n", type, dummy);
    }

    fp >> type;
    switch (type) {
    case glow_eSave_GrowScriptModule:
      break;
    case glow_eSave_GrowScriptModule_module_index:
      fp >> module_index;
      break;
    case glow_eSave_GrowScriptModule_vert_left_border:
      fp >> vert_left_border;
      break;
    case glow_eSave_GrowScriptModule_vert_right_border:
      fp >> vert_right_border;
      break;
    case glow_eSave_GrowScriptModule_vert_top_border:
      fp >> vert_top_border;
      break;
    case glow_eSave_GrowScriptModule_vert_bottom_border:
      fp >> vert_bottom_border;
      break;
    case glow_eSave_GrowScriptModule_vert_prio:
      fp >> vert_prio;
      break;
    case glow_eSave_GrowScriptModule_vert_left_module:
      fp >> vert_left_module;
      break;
    case glow_eSave_GrowScriptModule_vert_right_module:
      fp >> vert_right_module;
      break;
    case glow_eSave_GrowScriptModule_vert_top_module:
      fp >> vert_top_module;
      break;
    case glow_eSave_GrowScriptModule_vert_bottom_module:
      fp >> vert_bottom_module;
      break;
    case glow_eSave_GrowScriptModule_vert_width:
      fp >> vert_width;
      break;
    case glow_eSave_GrowScriptModule_vert_height:
      fp >> vert_height;
      break;
    case glow_eSave_GrowScriptModule_vert_fix_width:
      fp >> vert_fix_width;
      break;
    case glow_eSave_GrowScriptModule_vert_fix_height:
      fp >> vert_fix_height;
      break;
    case glow_eSave_GrowScriptModule_horiz_left_border:
      fp >> horiz_left_border;
      break;
    case glow_eSave_GrowScriptModule_horiz_right_border:
      fp >> horiz_right_border;
      break;
    case glow_eSave_GrowScriptModule_horiz_top_border:
      fp >> horiz_top_border;
      break;
    case glow_eSave_GrowScriptModule_horiz_bottom_border:
      fp >> horiz_bottom_border;
      break;
    case glow_eSave_GrowScriptModule_horiz_prio:
      fp >> horiz_prio;
      break;
    case glow_eSave_GrowScriptModule_horiz_left_module:
      fp >> horiz_left_module;
      break;
    case glow_eSave_GrowScriptModule_horiz_right_module:
      fp >> horiz_right_module;
      break;
    case glow_eSave_GrowScriptModule_horiz_top_module:
      fp >> horiz_top_module;
      break;
    case glow_eSave_GrowScriptModule_horiz_bottom_module:
      fp >> horiz_bottom_module;
      break;
    case glow_eSave_GrowScriptModule_horiz_width:
      fp >> horiz_width;
      break;
    case glow_eSave_GrowScriptModule_horiz_height:
      fp >> horiz_height;
      break;
    case glow_eSave_GrowScriptModule_horiz_fix_width:
      fp >> horiz_fix_width;
      break;
    case glow_eSave_GrowScriptModule_horiz_fix_height:
      fp >> horiz_fix_height;
      break;
    case glow_eSave_GrowScriptModule_left_border_width:
      fp >> left_border_width;
      break;
    case glow_eSave_GrowScriptModule_right_border_width:
      fp >> right_border_width;
      break;
    case glow_eSave_GrowScriptModule_top_border_width:
      fp >> top_border_width;
      break;
    case glow_eSave_GrowScriptModule_bottom_border_width:
      fp >> bottom_border_width;
      break;
    case glow_eSave_GrowScriptModule_fill_module:
      fp >> fill_module;
      break;
    case glow_eSave_GrowScriptModule_window_border_width:
      fp >> window_border_width;
      break;
    case glow_eSave_GrowScriptModule_window_switch_ratio:
      fp >> window_switch_ratio;
      break;
    case glow_eSave_GrowScriptModule_rect_part:
      GrowRect::open(fp);
      break;
    case glow_eSave_End:
      end_found = 1;
      break;
    default:
      std::cout << "GrowScriptModule:open syntax error\n";
      fp.getline(dummy, sizeof(dummy));
    }
    if (end_found)
      break;
  }
}

int GrowScriptModule::export_script(GlowExportScript* es, void* o, void* m)
{
  return es->scriptmodule(this, o, m);
}

