/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2022 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef glow_growlayer_h
#define glow_growlayer_h

#include "glow_grownode.h"

/*! \file glow_growlayer.h
    \brief Contains the GrowLayer class. */
/*! \addtogroup Glow */
/*@{*/

//! Class for handling a layer.
/*! A GrowLayer container for objects.
*/
class GrowLayer : public GlowArray, public GrowNode {
public:
  int hide;
  int active;

  //! Noargs constructor.
  GrowLayer(){}

  GrowLayer(GrowCtx* glow_ctx, const char* name);
  ~GrowLayer();

  //! Save the content of the object to file.
  /*!
    \param fp	Ouput file.
    \param mode	Not used.
  */
  void save(std::ofstream& fp, glow_eSaveMode mode);

  //! Read the content of the object from file.
  /*!
    \param fp	Input file.
  */
  void open(std::ifstream& fp);

  int is_active() {return active;}
  int is_empty() {return a_size == 0 ? 1 : 0;}
  void set_active(int act);
  void copy_from(GrowLayer& layer);
  int event_handler(GlowWind* w, glow_eEvent event, int x, int y, double fx, 
      double fy);
  void draw(GlowWind* w, int ll_x, int ll_y, int ur_x, int ur_y);
  void draw(GlowWind* w, int* ll_x, int* ll_y, int* ur_x, int* ur_y);
  void draw(GlowWind* w, GlowTransform* t, int highlight, int hot,
      void* node, void* colornode);
  void get_borders(GlowTransform* t, double* x1_right, double* x1_left,
      double* y1_high, double* y1_low);
  void get_node_borders();

  //! Scan trace
  /*! Calls the trace scan callback for the group and all members.
   */
  int trace_scan();

  //! Init trace
  /*! Calls the trace connect callback for the group and all members.
   */
  int trace_init();

  //! Close trace
  /*! Calls the trace disconnect callback for the group and all members.
   */
  void trace_close();

  void set_original_fill_color(glow_eDrawType drawtype) {
    if (ctx->environment == glow_eEnv_Development)
      return;
    GrowNode::set_original_fill_color(drawtype);
  }

  void set_original_border_color(glow_eDrawType drawtype) {
    if (ctx->environment == glow_eEnv_Development)
      return;
    GrowNode::set_original_border_color(drawtype);
  }

  void set_original_text_color(glow_eDrawType drawtype) {
    if (ctx->environment == glow_eEnv_Development)
      return;
    GrowNode::set_original_text_color(drawtype);
  }

  int insert(GlowArrayElem* element);
  int remove(GlowArrayElem* element);

  void select_region_insert(double ll_x, double ll_y, double ur_x, double ur_y,
      glow_eSelectPolicy select_policy) {}

  int export_script(GlowExportScript* es, void* o, void* m);

};

/*@}*/
#endif
