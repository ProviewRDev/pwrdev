/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2022 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <string.h>
#include <vector>
#include <math.h>

#include "glow_growrect.h"
#include "glow_growrectrounded.h"
#include "glow_growline.h"
#include "glow_growpolyline.h"
#include "glow_growconpoint.h"
#include "glow_growtext.h"
#include "glow_growsubannot.h"
#include "glow_growarc.h"
#include "glow_grownode.h"
#include "glow_growbar.h"
#include "glow_growtrend.h"
#include "glow_growpie.h"
#include "glow_growaxis.h"
#include "glow_growgroup.h"
#include "glow_growtoolbar.h"
#include "glow_growimage.h"
#include "glow_growwindow.h"
#include "glow_dashboard.h"
#include "glow_growscriptmodule.h"
#include "glow_exportscript.h"
#include "ge_methods.h"
#include "co_ccm.h"

#define EPS 0.1
#define DELTA 0.1
#define WINDBORDER 3.0

typedef struct {
  GlowArrayElem *e;
  double x_right;
  double x_left;
  double y_high;
  double y_low;
  int exported;
  int idx;
} sElem;

typedef struct {
  int vert_left_border;
  int vert_right_border;
  int vert_top_border;
  int vert_bottom_border;
  int vert_prio;
  int vert_left_module;
  int vert_right_module;
  int vert_top_module;
  int vert_bottom_module;
  double vert_width;
  double vert_height;
  int vert_fix_width;
  int vert_fix_height;
  int horiz_left_border;
  int horiz_right_border;
  int horiz_top_border;
  int horiz_bottom_border;
  int horiz_prio;
  int horiz_left_module;
  int horiz_right_module;
  int horiz_top_module;
  int horiz_bottom_module;
  double horiz_width;
  double horiz_height;
  int horiz_fix_width;
  int horiz_fix_height;
  double left_border_width;
  double right_border_width;
  double top_border_width;
  double bottom_border_width;
  int fill_module;
  double window_border_width;
  double window_switch_ratio;
} sModuleData;

static char *dtostr(double f)
{
  static char str[30];
  sprintf(str, "%g", f);
  if (strchr(str, '.') == 0  && strchr(str,'e') == 0)
    strcat(str, ".");
  return str;
}

GrowScriptModule *GlowExportScript::get_scriptmodule(GlowArrayElem *o, 
    double *x, double *y)
{
  double o_x_right = -1e10;
  double o_x_left = 1e10;
  double o_y_high = -1e10;
  double o_y_low = 1e10;
  
  o->get_borders(&o_x_right, &o_x_left, &o_y_high, &o_y_low);

  for (int i = 0; i < ctx->a.size(); i++) {
    if (ctx->a[i]->type() == glow_eObjectType_GrowScriptModule) {
      double m_x_right = -1e10;
      double m_x_left = 1e10;
      double m_y_high = -1e10;
      double m_y_low = 1e10;
      ctx->a[i]->get_borders(&m_x_right, &m_x_left, &m_y_high, &m_y_low);

      if (o_x_right <= m_x_right && o_y_high <= m_y_high && 
	  o_x_left >= m_x_left && o_y_low >= m_y_low) {
	*x = m_x_left;
	*y = m_y_low;
	return (GrowScriptModule *)ctx->a[i];
      }
    }
  }
  return 0;
}

int GlowExportScript::scriptmodule_count()
{
  int cnt = 0;
  for (int i = 0; i < ctx->a.size(); i++) {
    if (ctx->a[i]->type() == glow_eObjectType_GrowScriptModule)
      cnt++;
  }
  return cnt;
}

int GlowExportScript::export_script(char* filename,
    int (*userdata_cb)(void*, void*, std::ofstream&, char*))
{
  char nc_name[80];
  int is_toolbar;
  int has_toolbar;
  int llen;
  int new_line;
  int found;
  char* s;
  int module_cnt;
  double mod_base_x = 0;
  double mod_base_y = 0;
  std::vector<sElem> velem;
  std::vector<sElem> vmod;
  std::vector<sModuleData> vmdata;

  userdata_script_cb = userdata_cb;

  module_cnt = scriptmodule_count();

  if ((s = strrchr(filename, ':')))
    strcpy(nc_name, s + 1);
  else if ((s = strrchr(filename, '/')))
    strcpy(nc_name, s + 1);
  else
    strcpy(nc_name, filename);
  if ((s = strrchr(nc_name, '.')))
    *s = 0;
  fp.open(filename);

  // Graph size
  int default_width = int((ctx->x1 - ctx->x0) * ctx->mw.zoom_factor_x);
  int default_height = int((ctx->y1 - ctx->y0) * ctx->mw.zoom_factor_y);
  if (default_width > 0 && default_height > 0) {
    fp << "!** DefaultWidth: " << default_width << '\n';
    fp << "!** DefaultHeight: " << default_height << '\n';
  }

  // Load of subgraphs
  has_toolbar = 0;
  new_line = 1;
  if (ctx->a_nc.size() > 0) {
    fp << "!** Load: ";
    llen = 10;
    for (int i = 0; i < ctx->a_nc.size(); i++) {
      is_toolbar = 0;
      for (int j = 0; j < ctx->a.size(); j++) {	
	if (ctx->a[j]->type() == glow_eObjectType_GrowToolbar &&
	    ctx->a_nc[i] == ((GrowToolbar *)ctx->a[j])->nc) {
	  is_toolbar = 1;
	  has_toolbar = 1;
	  break;
	}
      }
      if (is_toolbar)
	continue;
      if (llen + strlen(((GlowNodeClass *)ctx->a_nc[i])->n_name) + 2 > K_LINE_SIZE) {
	fp << '\n';
	fp << "!** Load: ";
	llen = 10;
	new_line = 1;
      }
      if (new_line)
	new_line = 0;
      else {
	fp << ",";
	llen++;
      }
      fp << ((GlowNodeClass *)ctx->a_nc[i])->n_name;
      llen += strlen(((GlowNodeClass *)ctx->a_nc[i])->n_name);
    }
    if (has_toolbar) {
      // Add method buttons that are not present
      for (int j = 0; j < GeMethods::opmeth_size; j++) {
	if (strcmp(GeMethods::op_subgraph[j], "") == 0)
	  continue;
	found = 0;
	for (int i = 0; i < ctx->a_nc.size(); i++) {
	  if (strcmp(GeMethods::op_subgraph[j], ((GlowNodeClass *)ctx->a_nc[i])->n_name) == 0) {
	    found = 1;
	    break;
	  }
	}
	if (!found) {
	  if (llen + strlen(GeMethods::op_subgraph[j]) + 2 > K_LINE_SIZE) {
	    fp << '\n';
	    fp << "!** Load: ";
	    llen = 10;
	    new_line = 1;
	  }
	  if (new_line)
	    new_line = 0;
	  else {
	    fp << ",";
	    llen++;
	  }
	  fp << GeMethods::op_subgraph[j];
	  llen += strlen(GeMethods::op_subgraph[j]);
	}
      }
      for (int j = 0; j < GeMethods::mntmeth_size; j++) {
	if (strcmp(GeMethods::mnt_subgraph[j], "") == 0)
	  continue;
	found = 0;
	for (int i = 0; i < ctx->a_nc.size(); i++) {
	  if (strcmp(GeMethods::mnt_subgraph[j], ((GlowNodeClass *)ctx->a_nc[i])->n_name) == 0) {
	    found = 1;
	    break;
	  }
	}
	if (!found) {
	  if (llen + strlen(GeMethods::mnt_subgraph[j]) + 2 > K_LINE_SIZE) {
	    fp << '\n';
	    fp << "!** Load: ";
	    llen = 10;
	    new_line = 1;
	  }
	  if (new_line)
	    new_line = 0;
	  else {
	    fp << ",";
	    llen++;
	  }
	  fp << GeMethods::mnt_subgraph[j];
	  llen += strlen(GeMethods::mnt_subgraph[j]);
	}
      }
    }
    fp << '\n';
  }

  fp << ind << "main()" << '\n';
  ind_incr();
  fp << ind << "float x1;" << '\n';
  fp << ind << "float y1;" << '\n';
  fp << ind << "float x2;" << '\n';
  fp << ind << "float y2;" << '\n';
  fp << ind << "int id;" << '\n';
  if (module_cnt) {
    mod_base_x = 1e10;
    mod_base_y = 1e10;

    for (int i = 0; i < ctx->a.size(); i++) {
      sElem e;
      e.e = ctx->a[i];
      e.x_right = -1e10;
      e.x_left = 1e10;
      e.y_high = -1e10;
      e.y_low = 1e10;
      e.exported = 0;
      ctx->a[i]->get_borders(&e.x_right, &e.x_left, &e.y_high, &e.y_low);
      if (ctx->a[i]->type() == glow_eObjectType_GrowScriptModule) {
	e.idx = ((GrowScriptModule *)e.e)->module_index;
	vmod.push_back(e);
	if (e.x_left < mod_base_x)
	  mod_base_x = e.x_left;
	if (e.y_low < mod_base_y)
	  mod_base_y = e.y_low;
      }
      else
	velem.push_back(e);
    }
    for (int i = 0; i < vmod.size(); i++) {
      for (int j = 0; j < vmod.size(); j++) {
	if (i == vmod[j].idx) {
	  sModuleData md;
	  md.vert_left_border = ((GrowScriptModule *)vmod[j].e)->vert_left_border;
	  md.vert_right_border = ((GrowScriptModule *)vmod[j].e)->vert_right_border;
	  md.vert_top_border = ((GrowScriptModule *)vmod[j].e)->vert_top_border;
	  md.vert_bottom_border = ((GrowScriptModule *)vmod[j].e)->vert_bottom_border;
	  md.vert_prio = ((GrowScriptModule *)vmod[j].e)->vert_prio;
	  md.vert_left_module = ((GrowScriptModule *)vmod[j].e)->vert_left_module;
	  md.vert_right_module = ((GrowScriptModule *)vmod[j].e)->vert_right_module;
	  md.vert_top_module = ((GrowScriptModule *)vmod[j].e)->vert_top_module;
	  md.vert_bottom_module = ((GrowScriptModule *)vmod[j].e)->vert_bottom_module;
	  md.vert_width = ((GrowScriptModule *)vmod[j].e)->vert_width;
	  md.vert_height = ((GrowScriptModule *)vmod[j].e)->vert_height;
	  md.vert_fix_width = ((GrowScriptModule *)vmod[j].e)->vert_fix_width;
	  md.vert_fix_height = ((GrowScriptModule *)vmod[j].e)->vert_fix_height;
	  md.horiz_left_border = ((GrowScriptModule *)vmod[j].e)->horiz_left_border;
	  md.horiz_right_border = ((GrowScriptModule *)vmod[j].e)->horiz_right_border;
	  md.horiz_top_border = ((GrowScriptModule *)vmod[j].e)->horiz_top_border;
	  md.horiz_bottom_border = ((GrowScriptModule *)vmod[j].e)->horiz_bottom_border;
	  md.horiz_prio = ((GrowScriptModule *)vmod[j].e)->horiz_prio;
	  md.horiz_left_module = ((GrowScriptModule *)vmod[j].e)->horiz_left_module;
	  md.horiz_right_module = ((GrowScriptModule *)vmod[j].e)->horiz_right_module;
	  md.horiz_top_module = ((GrowScriptModule *)vmod[j].e)->horiz_top_module;
	  md.horiz_bottom_module = ((GrowScriptModule *)vmod[j].e)->horiz_bottom_module;
	  md.horiz_width = ((GrowScriptModule *)vmod[j].e)->horiz_width;
	  md.horiz_height = ((GrowScriptModule *)vmod[j].e)->horiz_height;
	  md.horiz_fix_width = ((GrowScriptModule *)vmod[j].e)->horiz_fix_width;
	  md.horiz_fix_height = ((GrowScriptModule *)vmod[j].e)->horiz_fix_height;
	  md.left_border_width = ((GrowScriptModule *)vmod[j].e)->left_border_width;
	  md.right_border_width = ((GrowScriptModule *)vmod[j].e)->right_border_width;
	  md.top_border_width = ((GrowScriptModule *)vmod[j].e)->top_border_width;
	  md.bottom_border_width = ((GrowScriptModule *)vmod[j].e)->bottom_border_width;
	  md.fill_module = ((GrowScriptModule *)vmod[j].e)->fill_module;
	  md.window_border_width = ((GrowScriptModule *)vmod[j].e)->window_border_width;
	  md.window_switch_ratio = ((GrowScriptModule *)vmod[j].e)->window_switch_ratio;
	  vmdata.push_back(md);
	}
      }
    }
    if (module_cnt != vmdata.size()) {
      printf("Module index mismatch %d != %d\n", module_cnt, (int)vmdata.size());
      return 0;
    }

    fp << ind << "float wwidth = " << dtostr(ctx->x1 - ctx->x0) << ";" << '\n';
    fp << ind << "float wheight = " << dtostr(ctx->y1 - ctx->y0) << ";" << '\n';
    // Vertical layout
    fp << ind << "int vmprio[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].vert_prio;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int vmtop[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].vert_top_module;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int vmbottom[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].vert_bottom_module;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int vmleft[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].vert_left_module;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int vmright[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].vert_right_module;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "float vmwidth[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << dtostr(vmdata[i].vert_width);
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "float vmheight[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << dtostr(vmdata[i].vert_height);
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int vmfix_width[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].vert_fix_width;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int vmfix_height[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].vert_fix_height;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    // Horizontal layout
    fp << ind << "int hmprio[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].horiz_prio;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int hmtop[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].horiz_top_module;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int hmbottom[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].horiz_bottom_module;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int hmleft[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].horiz_left_module;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int hmright[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].horiz_right_module;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "float hmwidth[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << dtostr(vmdata[i].horiz_width);
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "float hmheight[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << dtostr(vmdata[i].horiz_height);
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int hmfix_width[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].horiz_fix_width;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "int hmfix_height[" << module_cnt << "] = (";
    for (int i = 0; i < vmdata.size(); i++) {
      fp << vmdata[i].horiz_fix_height;
      if (i < vmdata.size() - 1)
	fp << ",";
      else
	fp << ");" << '\n';
    }
    fp << ind << "float mcalc_x[" << module_cnt << "];" << '\n';
    fp << ind << "float mcalc_y[" << module_cnt << "];" << '\n';
    fp << ind << "float mcalc_width[" << module_cnt << "];" << '\n';
    fp << ind << "float mcalc_height[" << module_cnt << "];" << '\n';
    fp << ind << "float mbase_x = " << dtostr(mod_base_x) << ";" << '\n';
    fp << ind << "float mbase_y = " << dtostr(mod_base_y) << ";" << '\n';
    fp << ind << "float mx;" << '\n';
    fp << ind << "float my;" << '\n';
    fp << ind << "float width;" << '\n';
    fp << ind << "float height;" << '\n';
    fp << ind << "SetGraphOptions(2);" << '\n';
    fp << ind << "GetWindowDimension(wwidth,wheight);" << '\n';
    fp << ind << "if (wwidth / wheight > " << dtostr(vmdata[0].window_switch_ratio) << ")" << '\n';
    ind_incr();
    fp << ind << "Layout(wwidth,wheight,hmprio[],hmtop[],hmbottom[],hmleft[],hmright[],hmwidth[],hmheight[],hmfix_width[],hmfix_height[],mcalc_x[],mcalc_y[],mcalc_width[],mcalc_height[]);" << '\n';
    ind_decr();
    fp << ind << "else" << '\n';
    ind_incr();
    fp << ind << "Layout(wwidth,wheight,vmprio[],vmtop[],vmbottom[],vmleft[],vmright[],vmwidth[],vmheight[],vmfix_width[],vmfix_height[],mcalc_x[],mcalc_y[],mcalc_width[],mcalc_height[]);" << '\n';
    ind_decr();
    fp << ind << "endif" << '\n';
  }

  fp << ind << "SetDraw(0);" << '\n';  
  
  if (!streq(nc_name, ""))
    fp << ind << "SetGraphName(\"" << nc_name << "\");" << '\n';
  if (ctx->x0 != 0)
    fp << ind << "SetGraphAttribute(\"x0\"," 
       << dtostr(ctx->x0 - vmdata[0].window_border_width) << ");" << '\n';
  if (ctx->y0 != 0)
    fp << ind << "SetGraphAttribute(\"y0\"," 
       << dtostr(ctx->y0 - vmdata[0].window_border_width) << ");" << '\n';
  if (module_cnt) {    
    fp << ind << "x1 = wwidth + " << dtostr(ctx->x0 + vmdata[0].window_border_width) << ";" << '\n';
    fp << ind << "y1 = wheight + " << dtostr(ctx->y0 + vmdata[0].window_border_width) << ";" << '\n';
    fp << ind << "SetGraphAttribute(\"x1\",x1);" << '\n';
    fp << ind << "SetGraphAttribute(\"y1\",y1);" << '\n';
  } else {
    if (ctx->x1 != 0)
      fp << ind << "SetGraphAttribute(\"x1\"," << dtostr(ctx->x1) << ");" << '\n';
    if (ctx->y1 != 0)
      fp << ind << "SetGraphAttribute(\"y1\"," << dtostr(ctx->y1) << ");" << '\n';
  }
  if (!feq(ctx->scantime, 0.5))
    fp << ind << "SetGraphAttribute(\"Scantime\"," << dtostr(ctx->scantime) << ");" << '\n';
  if (!feq(ctx->fast_scantime, 0.5))
    fp << ind << "SetGraphAttribute(\"FastScantime\"," << dtostr(ctx->fast_scantime) << ");" << '\n';
  if (!feq(ctx->animation_scantime, 0.5))
    fp << ind << "SetGraphAttribute(\"AnimationScantime\"," << dtostr(ctx->animation_scantime) << ");" << '\n';
  if (!streq(ctx->background_image, ""))
    fp << ind << "SetGraphAttribute(\"BackgroundImage\",\"" << ctx->background_image << "\");" << '\n';
  if (ctx->mb3_action != glow_eMB3Action_PopupMenu)
    fp << ind << "SetGraphAttribute(\"MB3Action\"," << ctx->mb3_action << ");" << '\n';
  if (ctx->translate_on != 0)
    fp << ind << "SetGraphAttribute(\"Translate\"," << ctx->translate_on << ");" << '\n';
  if (ctx->anti_aliasing != 0)
    fp << ind << "SetGraphAttribute(\"AntiAliasing\"," << ctx->anti_aliasing << ");" << '\n';
  if (ctx->hot_indication != glow_eHotIndication_LightColor)
    fp << ind << "SetGraphAttribute(\"HotIndication\"," << ctx->hot_indication << ");" << '\n';
  if (ctx->tiptext_size != 2)
    fp << ind << "SetGraphAttribute(\"TooltipTextsize\"," << ctx->tiptext_size << ");" << '\n';
  if (!streq(ctx->color_theme, ""))
    fp << ind << "SetGraphAttribute(\"ColorTheme\",\"" << ctx->color_theme << "\");" << '\n';
  if (ctx->dashboard != 0)
    fp << ind << "SetGraphAttribute(\"Dashboard\"," << ctx->dashboard << ");" << '\n';
  if (ctx->window_resize != 0)
    fp << ind << "SetGraphAttribute(\"WindowResize\"," << ctx->window_resize << ");" << '\n';
  if (!feq(ctx->dash_cell_width, 8.0))
    fp << ind << "SetGraphAttribute(\"DashCellWidth\"," << ctx->dash_cell_width << ");" << '\n';
  if (!feq(ctx->dash_cell_height, 6.0))
    fp << ind << "SetGraphAttribute(\"DashCellHeight\"," << ctx->dash_cell_height << ");" << '\n';
  if (ctx->dash->dash_rows != 5)
    fp << ind << "SetGraphAttribute(\"DashCellRows\"," << ctx->dash->dash_rows << ");" << '\n';
  if (ctx->dash->dash_columns != 4)
    fp << ind << "SetGraphAttribute(\"DashCellColumns\"," << ctx->dash->dash_columns << ");" << '\n';
  if (streq(ctx->color_theme, "$default"))
    fp << ind << "SetColorTheme();" << '\n'; 
  else if (!streq(ctx->default_color_theme, "")) {
    int ct;
    if (strncmp(ctx->default_color_theme, "pwr_colortheme", 14) == 0 && sscanf(&ctx->default_color_theme[14], "%d", &ct) == 1)
      fp << ind << "SetColorTheme(" << ct << ");" << '\n'; 
  }	
  fp << ind << "SetBackgroundColor(" << ctx->background_color << ");" << '\n';
    
  if (module_cnt) {
    char name[40];

    for (int i = 0; i < (int)vmod.size(); i++) {

      vmod[i].e->get_object_name(name, sizeof(name), glow_eName_Object);
      fp << cind << "Module " << name << " (" << vmod[i].x_left << "," << vmod[i].y_low << ") ("
	 << vmod[i].x_right << "," << vmod[i].y_high << ")" << '\n';
      fp << ind << "if (mcalc_width[" << vmod[i].idx << "] != 0.0)" << '\n';
      ind_incr();
      fp << ind << "mx = mbase_x + mcalc_x[" << vmod[i].idx << "];" << '\n';
      fp << ind << "my = mbase_y + mcalc_y[" << vmod[i].idx << "];" << '\n';

      if (vmdata[vmod[i].idx].fill_module) {
	fp << cind << "Fill module" << '\n';
	fp << ind << "id = CreateRectangle(mx,my,mcalc_width[" << 
	  vmod[i].idx << "],mcalc_height[" << vmod[i].idx << "]);" << '\n';
	fp << ind << "SetObjectFill(id,1);" << '\n';
	fp << ind << "SetObjectFillColor(id,318);" << '\n';
	fp << ind << "SetObjectBorder(id,0);" << '\n';
      }

      for (int j = 0; j < (int)velem.size(); j++) {
	if ((velem[j].x_right <= vmod[i].x_right + DELTA && 
	     velem[j].y_high <= vmod[i].y_high + DELTA && 
	     velem[j].x_left >= vmod[i].x_left - DELTA && 
	     velem[j].y_low >= vmod[i].y_low - DELTA) ||
	    ((velem[j].x_right + velem[j].x_left)/2 < vmod[i].x_right &&
	     (velem[j].x_right + velem[j].x_left)/2 > vmod[i].x_left &&
	     (velem[j].y_high + velem[j].y_low)/2 < vmod[i].y_high &&
	     (velem[j].y_high + velem[j].y_low)/2 > vmod[i].y_low)) {
	  velem[j].e->export_script(this, &velem[j], &vmod[i]);
	  velem[j].exported = 1;
	}	
      }

      if (vmdata[vmod[i].idx].vert_top_border || vmdata[vmod[i].idx].horiz_top_border) {
	fp << cind << "Top border" << '\n';
	if (!(vmdata[vmod[i].idx].vert_top_border && vmdata[vmod[i].idx].horiz_top_border)) {
	  fp << ind << "if (mtop[" << vmod[i].idx << "])" << '\n';
	  ind_incr();
	}
	fp << ind << "id = CreateRectangle(mx,my,mcalc_width[" << vmod[i].idx << "]," 
            << dtostr(vmdata[vmod[i].idx].top_border_width) << ");" << '\n';
	fp << ind << "SetObjectFill(id,1);" << '\n';
	fp << ind << "SetObjectFillColor(id,318);" << '\n';
	fp << ind << "SetObjectBorder(id,0);" << '\n';
	if (!(vmdata[vmod[i].idx].vert_top_border && vmdata[vmod[i].idx].horiz_top_border)) {
	  ind_decr();
	  fp << ind << "endif" << '\n';
	}
      }
      if (vmdata[vmod[i].idx].vert_bottom_border || vmdata[vmod[i].idx].horiz_bottom_border) {
	fp << cind << "Bottom border" << '\n';
	if (!(vmdata[vmod[i].idx].vert_bottom_border && vmdata[vmod[i].idx].horiz_bottom_border)) {
	  fp << ind << "if (mbottom[" << vmod[i].idx << "])" << '\n';
	  ind_incr();
	}
        fp << ind << "y1 = my + mcalc_height[" << vmod[i].idx << "]-" << dtostr(vmdata[vmod[i].idx].bottom_border_width) << ";" << '\n';
	fp << ind << "id = CreateRectangle(mx, y1,mcalc_width[" << vmod[i].idx << "]," 
	   << dtostr(vmdata[vmod[i].idx].bottom_border_width) << ");" << '\n';
	fp << ind << "SetObjectFill(id,1);" << '\n';
	fp << ind << "SetObjectFillColor(id,318);" << '\n';
	fp << ind << "SetObjectBorder(id,0);" << '\n';
	if (!(vmdata[vmod[i].idx].vert_bottom_border && vmdata[vmod[i].idx].horiz_bottom_border)) {
	  ind_decr();
	  fp << ind << "endif" << '\n';
	}
      }
      if (vmdata[vmod[i].idx].vert_left_border || vmdata[vmod[i].idx].horiz_left_border) {
	fp << cind << "Left border" << '\n';
	if (!(vmdata[vmod[i].idx].vert_left_border && vmdata[vmod[i].idx].horiz_left_border)) {
	  fp << ind << "if (mleft[" << vmod[i].idx << "])" << '\n';
	  ind_incr();
	}
	fp << ind << "id = CreateRectangle(mx,my," << dtostr(vmdata[vmod[i].idx].left_border_width) << ",mcalc_height[" << vmod[i].idx 
	   << "]);" << '\n';
	fp << ind << "SetObjectFill(id,1);" << '\n';
	fp << ind << "SetObjectFillColor(id,318);" << '\n';
	fp << ind << "SetObjectBorder(id,0);" << '\n';
	if (!(vmdata[vmod[i].idx].vert_left_border && vmdata[vmod[i].idx].horiz_left_border)) {
	  ind_decr();
	  fp << ind << "endif" << '\n';
	}
      }
      if (vmdata[vmod[i].idx].vert_right_border || vmdata[vmod[i].idx].horiz_right_border) {
	fp << cind << "Right border" << '\n';
	if (!(vmdata[vmod[i].idx].vert_right_border && vmdata[vmod[i].idx].horiz_right_border)) {
	  fp << ind << "if (mright[" << vmod[i].idx << "])" << '\n';
	  ind_incr();
	}
	fp << ind << "x1 = mx + mcalc_width[" << vmod[i].idx << "] - " << vmdata[vmod[i].idx].right_border_width << ";" << '\n';
	fp << ind << "id = CreateRectangle(x1,my," << dtostr(vmdata[vmod[i].idx].right_border_width) << ",mcalc_height[" << vmod[i].idx
	   << "]);" << '\n';
	fp << ind << "SetObjectFill(id,1);" << '\n';
	fp << ind << "SetObjectFillColor(id,318);" << '\n';
	fp << ind << "SetObjectBorder(id,0);" << '\n';
	if (!(vmdata[vmod[i].idx].vert_right_border && vmdata[vmod[i].idx].horiz_right_border)) {
	  ind_decr();
	  fp << ind << "endif" << '\n';
	}
      }
      ind_decr();
      fp << ind << "endif" << '\n';
      fp << cind << "End module " << name << '\n';

      if ((i == (int)vmod.size() - 1) && vmdata[0].window_border_width != 0) {
	fp << cind << "Window border" << '\n';

	fp << ind << "x1 = " << dtostr(ctx->x0 - WINDBORDER) << ";" <<  '\n';
	fp << ind << "y1 = " << dtostr(ctx->y0 - WINDBORDER) << ";"  << '\n';
	fp << ind << "width = wwidth + " << dtostr(2*WINDBORDER) << ";" << '\n';
	fp << ind << "height = " << dtostr(WINDBORDER) 
	   << ";" << '\n';
	fp << ind << "id = CreateRectangle(x1,y1,width,height);" << '\n'; 
	fp << ind << "SetObjectFill(id,1);" << '\n';
	fp << ind << "SetObjectFillColor(id,318);" << '\n';
	fp << ind << "SetObjectBorder(id,0);" << '\n';
	
	fp << ind << "y1 = " << dtostr(ctx->y0) << " + wheight;" << '\n';
	fp << ind << "id = CreateRectangle(x1,y1,width,height);" << '\n'; 
	fp << ind << "SetObjectFill(id,1);" << '\n';
	fp << ind << "SetObjectFillColor(id,318);" << '\n';
	fp << ind << "SetObjectBorder(id,0);" << '\n';
		       
	fp << ind << "y1 = " << dtostr(ctx->y0) << ";" << '\n';
	fp << ind << "width = " << dtostr(WINDBORDER) << ";" << '\n';
	fp << ind << "height = wheight;" << '\n';
	fp << ind << "id = CreateRectangle(x1,y1,width,height);" << '\n'; 
	fp << ind << "SetObjectFill(id,1);" << '\n';
	fp << ind << "SetObjectFillColor(id,318);" << '\n';
	fp << ind << "SetObjectBorder(id,0);" << '\n';
	
	fp << ind << "x1 = " << dtostr(ctx->x0) << " + wwidth;" << '\n';
	fp << ind << "id = CreateRectangle(x1,y1,width,height);" << '\n'; 
	fp << ind << "SetObjectFill(id,1);" << '\n';
	fp << ind << "SetObjectFillColor(id,318);" << '\n';
	fp << ind << "SetObjectBorder(id,0);" << '\n';
      }
    }
    for (int j = 0; j < (int)velem.size(); j++) {
      if (!velem[j].exported)
	velem[j].e->export_script(this, 0, 0);
    }
  }
  else
    ctx->a.export_script(this, 0, 0);
  fp << ind << "SetDraw(1);" << '\n';
  ind_decr();
  fp << ind << "endmain" << '\n';

  fp.close();
  return 1;
}

int GlowExportScript::array(GlowArray* o, void* e, void* m)
{
  int i;
  int rsts = 0;
  int sts;

  for (i = 0; i < o->a_size; i++) {
    if (o->a[i]->type() != glow_eObjectType_Con) {
    sts = o->a[i]->export_script(this, e, m);
      if (ODD(sts))
	rsts = sts;
    }
  }
  return rsts;
}

int GlowExportScript::node(GrowNode* o, void* e, void* m)
{
  fp << cind << "Node " << o->n_name << ", " << o->nc->n_name << '\n';
  if (m) {
    sElem *elem = (sElem *)e;
    sElem *mod = (sElem *)m;
    if (fabs(elem->x_left - mod->x_left) < EPS)
      fp << ind << "x1 = mx;" << '\n';
    else
      fp << ind << "x1 = mx + " << dtostr(elem->x_left - mod->x_left) << ";" << '\n';
    if (fabs(elem->y_low - mod->y_low) < EPS)
      fp << ind << "y1 = my;" << '\n';
    else
      fp << ind << "y1 = my + " << dtostr(elem->y_low - mod->y_low) << ";" << '\n';
    if (fabs(elem->x_right - mod->x_right) < EPS)
      fp << ind << "x2 = mx + mcalc_width[" << mod->idx << "];" << '\n';
    else
      fp << ind << "x2 = x1 + " << dtostr(elem->x_right - elem->x_left) << ";" << '\n';
    if (fabs(elem->y_high - mod->y_high) < EPS)
      fp << ind << "y2 = my + mcalc_height[" << mod->idx << "];" << '\n';
    else
      fp << ind << "y2 = y1 + " << dtostr(elem->y_high - elem->y_low) << ";" << '\n';
    fp << ind << "id = CreateObject(\"" << o->nc->n_name << "\",x1,y1,x2,y2);" << '\n';
  }
  else
    fp << ind << "id = CreateObject(\"" << o->nc->n_name << "\"," << dtostr(o->x_left) << "," << dtostr(o->y_low) << "," << dtostr(o->x_right) << "," << dtostr(o->y_high) << ");" << '\n';
  fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';
  if (o->shadow)
    fp << ind << "SetObjectShadow(id,1);" << '\n';
  if (o->line_width != 0)
    fp << ind << "SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No)
    fp << ind << "SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
  if (o->draw_type != glow_eDrawType_Line)
    fp << ind << "SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->text_drawtype != glow_eDrawType_No)
    fp << ind << "SetObjectTextColor(id," << o->text_drawtype  << ");" << '\n';
  if (o->background_drawtype != glow_eDrawType_No)
    fp << ind << "SetObjectBackgroundColor(id," << o->background_drawtype  << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << ind << "SetObjectAttribute(id,\"Transparency\"," << o->transparency << ");" << '\n';
  if (o->text_font != glow_eFont_No)
    fp << ind << "SetObjectTextFont(id," << o->text_font <<  ");" << '\n';
  if (o->text_type != glow_eDrawType_TextHelvetica)
    fp << ind << "SetObjectTextBold(id, 1);" << '\n';

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, ind);

  if (o->annotsize[0] > 0)
    fp << ind << "SetObjectAttribute(id,\"A0\",\"" << o->annotv[0] << "\");" << '\n';
  if (o->annotsize[1] > 0) {
    fp << ind << "SetObjectAttribute(id,\"A1\",\"" << o->annotv[1] << "\");" << '\n';
    fp << ind << "SetObjectAttribute(id,\"Text\",\"" << o->annotv[1] << "\");" << '\n';
  }    

  return 1;
}

int GlowExportScript::rect(GrowRect* o, void* e, void* m)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << cind << "Rectangle " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  if (m) {
    sElem *mod = (sElem *)m;
    if (fabs(ll_x - mod->x_left) < EPS)
      fp << ind << "x1 = mx;" << '\n';
    else
      fp << ind << "x1 = mx + " << dtostr(ll_x - mod->x_left) << ";" << '\n';
    if (fabs(ll_y - mod->y_low) < EPS)
      fp << ind << "y1 = my;" << '\n';
    else
      fp << ind << "y1 = my + " << dtostr(ll_y - mod->y_low) << ";" << '\n';
    if (fabs(ur_x - mod->x_right) < EPS)
      fp << ind << "width = mx + mcalc_width[" << mod->idx << "] - x1;" << '\n';
    else
      fp << ind << "width = " << dtostr(ur_x - ll_x) << ";" << '\n';
    if (fabs(ur_y - mod->y_high) < EPS)
      fp << ind << "height = my + mcalc_height[" << mod->idx << "] - y1;" << '\n';
    else
      fp << ind << "height = " << dtostr(ur_y - ll_y) << ";" << '\n';
    fp << ind << "id = CreateRectangle(x1,y1,width,height);" << '\n';
  }
  else
    fp << ind << "id = CreateRectangle(" << dtostr(ll_x) << "," << dtostr(ll_y) << "," << dtostr(ur_x - ll_x) << "," << dtostr(ur_y - ll_y) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->fill)
    fp << ind << "SetObjectFill(id,1);" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No && (o->fill || o->shadow))
    fp << ind << "SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
 
  if (o->draw_type != glow_eDrawType_Line)
    fp << ind << "SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->background_drawtype != glow_eDrawType_No)
    fp << ind << "SetObjectBackgroundColor(id," << o->background_drawtype  << ");" << '\n';

  if (o->border == 0)
    fp << ind << "SetObjectBorder(id," << o->border << ");" << '\n';
  if (o->line_width != 1)
    fp << ind << "SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->shadow)
    fp << ind << "SetObjectShadow(id,1);" << '\n';
  if (!feq(o->shadow_width, 5.0))
    fp << ind << "SetObjectAttribute(id,\"shadow_width\"," << dtostr(o->shadow_width) << ");" << '\n';
  if (o->shadow_contrast != 2)
    fp << ind << "SetObjectAttribute(id,\"shadow_contrast\"," << o->shadow_contrast << ");" << '\n';
  if (o->relief != glow_eRelief_Up)
    fp << ind << "SetObjectAttribute(id,\"relief\"," << (int)o->relief << ");" << '\n';
  if (o->gradient_contrast != 4)
    fp << ind << "SetObjectAttribute(id,\"gradient_contrast\"," << o->gradient_contrast << ");" << '\n';
  if (o->gradient != glow_eGradient_No)
    fp << ind << "SetObjectAttribute(id,\"gradient\"," << (int)o->gradient << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << ind << "SetObjectAttribute(id,\"transparency\"," << o->transparency << ");" << '\n';
  if (o->invisible != 0)
    fp << ind << "SetObjectAttribute(id,\"invisible\"," << o->invisible << ");" << '\n';
  if (o->fill_eq_background != 0)
    fp << ind << "SetObjectAttribute(id,\"fill_eq_background\"," << o->fill_eq_background << ");" << '\n';
  if (o->fixcolor != 0)
    fp << ind << "SetObjectAttribute(id,\"fixcolor\"," << o->fixcolor << ");" << '\n';
  if (o->disable_shadow != 0)
    fp << ind << "SetObjectAttribute(id,\"disable_shadow\"," << o->disable_shadow << ");" << '\n';
  if (o->disable_gradient != 0)
    fp << ind << "SetObjectAttribute(id,\"disable_gradient\"," << o->disable_gradient << ");" << '\n';
  if (o->bgcolor_gradient != 0)
    fp << ind << "SetObjectAttribute(id,\"bgcolor_gradient\"," << o->bgcolor_gradient << ");" << '\n';
  if (o->fixposition != 0)
    fp << ind << "SetObjectAttribute(id,\"fixposition\"," << o->fixposition << ");" << '\n';

  return 1;
}

int GlowExportScript::rectrounded(GrowRectRounded* o, void* e, void* m)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << cind << "RoundedRect " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << cind << "Rectangle " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  if (m) {
    sElem *mod = (sElem *)m;
    fp << ind << "x1 = mx + " << dtostr(ll_x - mod->x_left) << ";" << '\n';
    fp << ind << "y1 = my + " << dtostr(ll_y - mod->y_low) << ";" << '\n';
    fp << ind << "width = " << dtostr(ur_x - ll_x) << ";" << '\n';
    fp << ind << "height = " << dtostr(ur_y - ll_y) << ";" << '\n';
    fp << ind << "id = CreateRectRounded(x1,y1,width,height);" << '\n';
  }
  else
    fp << ind << "id = CreateRectRounded(" << dtostr(ll_x) << "," << dtostr(ll_y) << "," << dtostr(ur_x - ll_x) << "," << dtostr(ur_y - ll_y) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->fill)
    fp << ind << "SetObjectFill(id,1);" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No && (o->fill || o->shadow))
    fp << ind << "SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
 
  if (o->draw_type != glow_eDrawType_Line)
    fp << ind << "SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';

  if (o->border == 0)
    fp << ind << "SetObjectBorder(id," << o->border << ");" << '\n';
  if (o->line_width != 1)
    fp << ind << "SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->shadow)
    fp << ind << "SetObjectShadow(id,1);" << '\n';
  if (!feq(o->shadow_width, 5.0))
    fp << ind << "SetObjectAttribute(id,\"shadow_width\"," << dtostr(o->shadow_width) << ");" << '\n';
  if (o->shadow_contrast != 2)
    fp << ind << "SetObjectAttribute(id,\"shadow_contrast\"," << o->shadow_contrast << ");" << '\n';
  if (o->relief != glow_eRelief_Up)
    fp << ind << "SetObjectAttribute(id,\"relief\"," << (int)o->relief << ");" << '\n';
  if (o->gradient_contrast != 4)
    fp << ind << "SetObjectAttribute(id,\"gradient_contrast\"," << o->gradient_contrast << ");" << '\n';
  if (o->gradient != glow_eGradient_No)
    fp << ind << "SetObjectAttribute(id,\"gradient\"," << (int)o->gradient << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << ind << "SetObjectAttribute(id,\"transparency\"," << o->transparency << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << ind << "SetObjectAttribute(id,\"thin_shadow\"," << o->thin_shadow << ");" << '\n';
  if (o->disable_shadow != 0)
    fp << ind << "SetObjectAttribute(id,\"disable_shadow\"," << o->disable_shadow << ");" << '\n';
  if (o->disable_gradient != 0)
    fp << ind << "SetObjectAttribute(id,\"disable_gradient\"," << o->disable_gradient << ");" << '\n';
  if (o->fixposition != 0)
    fp << ind << "SetObjectAttribute(id,\"fixposition\"," << o->fixposition << ");" << '\n';
  if (!feq(o->round_amount, 15.0))
    fp << ind << "SetObjectAttribute(id,\"round_amount\"," << dtostr(o->round_amount) << ");" << '\n';

  return 1;
}

int GlowExportScript::line(GrowLine* o, void* e, void* m)
{
  float x1, y1, x2, y2;

  x1 = o->trf.x(o->p1.x, o->p1.y);
  y1 = o->trf.y(o->p1.x, o->p1.y);
  x2 = o->trf.x(o->p2.x, o->p2.y);
  y2 = o->trf.y(o->p2.x, o->p2.y);

  fp << cind << "Line " << o->n_name << " (" << x1 << "," << y1 << "),(" << x1 << "," << y2 << ")" << '\n';
  if (m) {
    sElem *mod = (sElem *)m;
    if (fabs(x1 - mod->x_left) < EPS)
      fp << ind << "x1 = mx;" << '\n';
    else if (fabs(x1 - mod->x_right) < EPS)
      fp << ind << "x1 = mx + mcalc_width[" << mod->idx << "];" << '\n';
    else
      fp << ind << "x1 = mx + " << dtostr(x1 - mod->x_left) << ";" << '\n';
    if (fabs(y1 - mod->y_low) < EPS)
      fp << ind << "y1 = my;" << '\n';
    else if (fabs(y1 - mod->y_high) < EPS)
      fp << ind << "y1 = my+ mcalc_height[" << mod->idx << "];" << '\n';
    else
      fp << ind << "y1 = my + " << dtostr(y1 - mod->y_low) << ";" << '\n';
    if (fabs(x2 - mod->x_left) < EPS)
      fp << ind << "x2 = mx;" << '\n';
    else if (fabs(x2 - mod->x_right) < EPS)
      fp << ind << "x2 = mx + mcalc_width[" << mod->idx << "];" << '\n';
    else
      fp << ind << "x2 = mx + " << dtostr(x2 - mod->x_left) << ";" << '\n';
    if (fabs(y2 - mod->y_low) < EPS)
      fp << ind << "y2 = my;" << '\n';
    else if (fabs(y2 - mod->y_high) < EPS)
      fp << ind << "y2 = mx + mcalc_height[" << mod->idx << "];" << '\n';
    else
      fp << ind << "y2 = my + " << dtostr(y2 - mod->y_low) << ";" << '\n';
    fp << ind << "id = CreateLine(x1,y1,x2,y2);" << '\n';
  }
  else
    fp << ind << "id = CreateLine(" << dtostr(x1) << "," << dtostr(y1) << "," << dtostr(x2) << 
      "," << dtostr(y2) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->line_width != 1)
    fp << ind << "SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->line_type != glow_eLineType_Solid)
    fp << ind << "SetObjectLineType(id," << (int)o->line_type << ");" << '\n';
  if (o->draw_type != glow_eDrawType_Line)
    fp << ind << "SetObjectBorderColor(id," << o->draw_type << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << ind << "SetObjectAttribute(id,\"transparency\"," << o->transparency << ");" << '\n';

  return 1;
}

int GlowExportScript::polyline(GrowPolyLine* o, void* e, void* m)
{
  float x1, y1, x2, y2;

  x1 = o->trf.x(((GlowPoint*)o->a_points[0])->x, ((GlowPoint*)o->a_points[0])->y);
  y1 = o->trf.y(((GlowPoint*)o->a_points[0])->x, ((GlowPoint*)o->a_points[0])->y);
  x2 = o->trf.x(((GlowPoint*)o->a_points[1])->x, ((GlowPoint*)o->a_points[1])->y);
  y2 = o->trf.y(((GlowPoint*)o->a_points[1])->x, ((GlowPoint*)o->a_points[1])->y);


  fp << cind << "Polyline " << o->n_name << " (" << x1 << "," << y1 << "),(" << x2 << "," << y2 << ")" << '\n';
  fp << ind << "id = CreatePolyLine(" << dtostr(x1) << "," << dtostr(y1) << "," << dtostr(x2) << "," << dtostr(y2) << ");" << '\n';

  for (int i = 2; i < o->a_points.a_size; i++) {
    x1 = o->trf.x(((GlowPoint*)o->a_points[i])->x, ((GlowPoint*)o->a_points[i])->y);
    y1 = o->trf.y(((GlowPoint*)o->a_points[i])->x, ((GlowPoint*)o->a_points[i])->y);
    fp << ind << "PolyLineAdd(id," << dtostr(x1) << "," << dtostr(y1) << ");" << '\n';    
  }
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->fill)
    fp << ind << "SetObjectFill(id,1);" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No && (o->fill || o->shadow))
    fp << ind << "SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';

  if (o->draw_type != glow_eDrawType_Line)
    fp << ind << "SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->background_drawtype != glow_eDrawType_No)
    fp << ind << "SetObjectBackgroundColor(id," << o->background_drawtype  << ");" << '\n';
  if (o->border == 0)
    fp << ind << "SetObjectBorder(id," << o->border << ");" << '\n';
  if (o->line_width != 1)
    fp << ind << "SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->shadow)
    fp << ind << "SetObjectShadow(id,1);" << '\n';
  if (!feq(o->shadow_width, 5.0))
    fp << ind << "SetObjectAttribute(id,\"shadow_width\"," << dtostr(o->shadow_width) << ");" << '\n';
  if (o->shadow_contrast != 2)
    fp << ind << "SetObjectAttribute(id,\"shadow_contrast\"," << o->shadow_contrast << ");" << '\n';
  if (o->relief != glow_eRelief_Up)
    fp << ind << "SetObjectAttribute(id,\"relief\"," << (int)o->relief << ");" << '\n';
  if (o->gradient_contrast != 4)
    fp << ind << "SetObjectAttribute(id,\"gradient_contrast\"," << o->gradient_contrast << ");" << '\n';
  if (o->gradient != glow_eGradient_No)
    fp << ind << "SetObjectAttribute(id,\"gradient\"," << (int)o->gradient << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << ind << "SetObjectAttribute(id,\"transparency\"," << o->transparency << ");" << '\n';
  if (o->disable_shadow != 0)
    fp << ind << "SetObjectAttribute(id,\"disable_shadow\"," << o->disable_shadow << ");" << '\n';
  if (o->disable_gradient != 0)
    fp << ind << "SetObjectAttribute(id,\"disable_gradient\"," << o->disable_gradient << ");" << '\n';
  if (o->fill_eq_border != 0)
    fp << ind << "SetObjectAttribute(id,\"fill_eq_border\"," << o->fill_eq_border << ");" << '\n';
  if (o->fill_eq_background != 0)
    fp << ind << "SetObjectAttribute(id,\"fill_eq_background\"," << o->fill_eq_background << ");" << '\n';
  if (o->fill_eq_light != 0)
    fp << ind << "SetObjectAttribute(id,\"fill_eq_light\"," << o->fill_eq_light << ");" << '\n';
  if (o->fill_eq_shadow != 0)
    fp << ind << "SetObjectAttribute(id,\"fill_eq_shadow\"," << o->fill_eq_shadow << ");" << '\n';
  if (o->fill_eq_bglight != 0)
    fp << ind << "SetObjectAttribute(id,\"fill_eq_bglight\"," << o->fill_eq_bglight << ");" << '\n';
  if (o->fill_eq_bgshadow != 0)
    fp << ind << "SetObjectAttribute(id,\"fill_eq_bgshadow\"," << o->fill_eq_bgshadow << ");" << '\n';
  if (o->fixcolor != 0)
    fp << ind << "SetObjectAttribute(id,\"fixcolor\"," << o->fixcolor << ");" << '\n';
  if (o->fixposition != 0)
    fp << ind << "SetObjectAttribute(id,\"fixposition\"," << o->fixposition << ");" << '\n';

  return 1;
}

static int text_size_to_idx(int size)
{
  if (size == 0)
    return 0;
  if (size == 1)
    return 1;
  if (size == 2)
    return 2;
  if (size <= 4)
    return 3;
  if (size <= 6)
    return 4;
  if (size <= 8)
    return 5;
  return 5;
}

int GlowExportScript::text(GrowText* o, void* e, void* m)
{
  float x1, y1;
  int bold;
  int textsize;

  if (o->draw_type == glow_eDrawType_TextHelveticaBold)
    bold = 1;
  else
    bold = 0;
  textsize = text_size_to_idx(o->text_size);

  x1 = o->trf.x(o->p.x, o->p.y);
  y1 = o->trf.y(o->p.x, o->p.y);

  fp << cind << "Text " << o->n_name << " (" << x1 << "," << y1 << ")" << '\n';
  if (m) {
    sElem *mod = (sElem *)m;
    fp << ind << "x1 = mx + " << dtostr(x1 - mod->x_left) << ";" << '\n';
    fp << ind << "y1 = my + " << dtostr(y1 - mod->y_low) << ";" << '\n';
    fp << ind << "id = CreateText(\"" << o->text << "\",x1,y1," <<
    textsize << "," << o->font << "," << bold << "," << o->color_drawtype << ");" << '\n';
  }
  else {
    fp << ind << "id = CreateText(\"" << o->text << "\"," << dtostr(o->p.x) << "," << dtostr(o->p.y) << "," <<
      textsize << "," << o->font << "," << bold << "," << o->color_drawtype << ");" << '\n';
    if (o->trf.is_modified())
      fp << ind << "SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
        << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  }
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

#if 0
  fp << ind << "SetObjectTextSize(id," << textsize << ");" << '\n';
  fp << ind << "SetObjectTextFont(id," << o->font <<  ");" << '\n';
  if (o->draw_type != glow_eDrawType_TextHelvetica)
    fp << ind << "SetObjectTextBold(id, 1);" << '\n';
  if (o->color_drawtype != glow_eDrawType_Line)
    fp << ind << "SetObjectTextColor(id," << o->color_drawtype << ");" << '\n';
#endif
  if (o->adjustment != glow_eAdjustment_Left)
    fp << ind << "SetObjectAttribute(id,\"Adjustment\"," << (int)o->adjustment << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << ind << "SetObjectAttribute(id,\"Transparency\"," << o->transparency << ");" << '\n';

  return 1;
}

int GlowExportScript::annot(GrowSubAnnot* o, void* e, void* m)
{
  return 0;
}

int GlowExportScript::arc(GrowArc* o, void* e, void* m)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << cind << "Arc " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  if (m) {
    sElem *mod = (sElem *)m;
    fp << ind << "x1 = mx + " << dtostr(ll_x - mod->x_left) << ";" << '\n';
    fp << ind << "y1 = my + " << dtostr(ll_y - mod->y_low) << ";" << '\n';
    fp << ind << "x2 = mx + " << dtostr(ur_x - mod->x_left) << ";" << '\n';
    fp << ind << "y2 = my + " << dtostr(ur_y - mod->y_low) << ";" << '\n';
    fp << ind << "id = CreateArc(x1,y1,x2,y2," << o->angle1 << "," << o->angle2 << ");" << '\n';
  }
  else
    fp << ind << "id = CreateArc(" << dtostr(ll_x) << "," << dtostr(ll_y) << "," << dtostr(ur_x) << 
      "," << dtostr(ur_y) << "," << o->angle1 << "," << o->angle2 << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->fill) {
    fp << ind << "SetObjectFill(id,1);" << '\n';
    fp << ind << "SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
  }
  if (o->border == 0)
    fp << ind << "SetObjectBorder(id," << o->border << ");" << '\n';
  if (o->line_width != 1)
    fp << ind << "SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->draw_type != glow_eDrawType_Line)
    fp << ind << "SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->shadow)
    fp << ind << "SetObjectShadow(id,1);" << '\n';
  if (!feq(o->shadow_width, 5.0))
    fp << ind << "SetObjectAttribute(id,\"shadow_width\"," << dtostr(o->shadow_width) << ");" << '\n';
  if (o->shadow_contrast != 2)
    fp << ind << "SetObjectAttribute(id,\"shadow_contrast\"," << o->shadow_contrast << ");" << '\n';
  if (o->relief != glow_eRelief_Up)
    fp << ind << "SetObjectAttribute(id,\"relief\"," << (int)o->relief << ");" << '\n';
  if (o->gradient_contrast != 4)
    fp << ind << "SetObjectAttribute(id,\"gradient_contrast\"," << o->gradient_contrast << ");" << '\n';
  if (o->gradient != glow_eGradient_No)
    fp << ind << "SetObjectAttribute(id,\"gradient\"," << (int)o->gradient << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << ind << "SetObjectAttribute(id,\"transparency\"," << o->transparency << ");" << '\n';
  if (o->fill_eq_light != 0)
    fp << ind << "SetObjectAttribute(id,\"fill_eq_light\"," << o->fill_eq_light << ");" << '\n';
  if (o->fill_eq_shadow != 0)
    fp << ind << "SetObjectAttribute(id,\"fill_eq_shadow\"," << o->fill_eq_shadow << ");" << '\n';
  if (o->fill_eq_background != 0)
    fp << ind << "SetObjectAttribute(id,\"fill_eq_background\"," << o->fill_eq_background << ");" << '\n';
  if (o->fixcolor != 0)
    fp << ind << "SetObjectAttribute(id,\"fixcolor\"," << o->fixcolor << ");" << '\n';
  if (o->disable_shadow != 0)
    fp << ind << "SetObjectAttribute(id,\"disable_shadow\"," << o->disable_shadow << ");" << '\n';
  if (o->disable_gradient != 0)
    fp << ind << "SetObjectAttribute(id,\"disable_gradient\"," << o->disable_gradient << ");" << '\n';
  if (o->fixposition != 0)
    fp << ind << "SetObjectAttribute(id,\"fixposition\"," << o->fixposition << ");" << '\n';

  return 1;
}

int GlowExportScript::point(GlowPoint* o, GlowTransform* trf)
{
  return 0;
}

int GlowExportScript::bar(GrowBar* o, void* e, void* m)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << cind << "Bar " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << ind << "id = CreateBar(" << dtostr(o->ll.x) << "," << dtostr(o->ll.y) << "," << dtostr(o->ur.x) << 
    "," << dtostr(o->ur.y) << ");" << '\n';
  if (o->trf.is_modified())
    fp << ind << "SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
        << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (!o->fill)
    fp << ind << "SetObjectFill(id,0);" << '\n';
  if (o->fill) 
    fp << ind << "SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';

  if (!o->border)
    fp << ind << "SetObjectBorder(id,0);" << '\n';
  if (o->draw_type != glow_eDrawType_No)
    fp << ind << "SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';

  if (o->min_value != 0)
    fp << ind << "SetObjectAttribute(id,\"Bar.MinValue\"," << dtostr(o->min_value) << ");" << '\n';
  if (!feq(o->max_value, 100.0))
    fp << ind << "SetObjectAttribute(id,\"Bar.MaxValue\"," << dtostr(o->max_value) << ");" << '\n';
  if (!feq(o->bar_value, 35.0))
    fp << ind << "SetObjectAttribute(id,\"Bar.Value\"," << dtostr(o->bar_value) << ");" << '\n';
  if (o->bar_drawtype != glow_eDrawType_Inherit)
    fp << ind << "SetObjectAttribute(id,\"Bar.BarColor\"," << o->bar_drawtype << ");" << '\n';
  if (o->bar_bordercolor != glow_eDrawType_Inherit)
    fp << ind << "SetObjectAttribute(id,\"Bar.BorderColor\"," << o->bar_bordercolor << ");" << '\n';
  if (o->bar_borderwidth != 1)
    fp << ind << "SetObjectAttribute(id,\"Bar.BorderWidth\"," << o->bar_borderwidth << ");" << '\n';

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, ind);

  return 1;
}

int GlowExportScript::pie(GrowPie* o, void* e, void* m)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << cind << "Pie " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << ind << "id = CreatePie(" << dtostr(o->ll.x) << "," << dtostr(o->ll.y) << "," << dtostr(o->ur.x) << 
    "," << dtostr(o->ur.y) << ");" << '\n';
  if (o->trf.is_modified())
    fp << ind << "SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
        << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (!o->fill)
    fp << ind << "SetObjectFill(id,0);" << '\n';
  if (o->fill) 
    fp << ind << "SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';

  if (!o->border)
    fp << ind << "SetObjectBorder(id,0);" << '\n';
  if (o->draw_type != glow_eDrawType_No)
    fp << ind << "SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->shadow)
    fp << ind << "SetObjectShadow(id,1);" << '\n';

  if (o->angle1 != 0)
    fp << ind << "SetObjectAttribute(id,\"Pie.Angle1\"," << o->angle1 << ");" << '\n';
  if (o->angle2 != 360)
    fp << ind << "SetObjectAttribute(id,\"Pie.Angle2\"," << o->angle2 << ");" << '\n';
  if (!feq(o->shadow_width, 5.0))
    fp << ind << "SetObjectAttribute(id,\"Pie.ShadowWidth\"," << dtostr(o->shadow_width) << ");" << '\n';
  if (o->shadow_contrast != 2)
    fp << ind << "SetObjectAttribute(id,\"Pie.ShadowContrast\"," << o->shadow_contrast << ");" << '\n';
  if (o->gradient_contrast != 5)
    fp << ind << "SetObjectAttribute(id,\"Pie.GradientContrast\"," << o->gradient_contrast << ");" << '\n';
  if (o->gradient != 0)
    fp << ind << "SetObjectAttribute(id,\"Pie.Gradient\"," << o->gradient << ");" << '\n';
  if (o->relief != glow_eRelief_Up)
    fp << ind << "SetObjectAttribute(id,\"Pie.Relief\"," << o->relief << ");" << '\n';
  if (o->sectors != 12)
    fp << ind << "SetObjectAttribute(id,\"Pie.Sectors\"," << o->sectors << ");" << '\n';
  if (o->min_value != 0.0)
    fp << ind << "SetObjectAttribute(id,\"Pie.MinValue\"," << dtostr(o->min_value) << ");" << '\n';
  if (!feq(o->max_value, 100.0))
    fp << ind << "SetObjectAttribute(id,\"Pie.MaxValue\"," << dtostr(o->max_value) << ");" << '\n';
  for (int i = 0; i < o->sectors; i++) {
    if (o->sector_color[i] != glow_eDrawType_Inherit)
      fp << ind << "SetObjectAttribute(id,\"Pie.SectorColor" << i + 1 << "\"," << o->sector_color[i] << ");" << '\n';
  }

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, ind);

  return 1;
}

int GlowExportScript::trend(GrowTrend* o, void* e, void* m)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);
  //ll_x = o->ll.x;
  //ll_y = o->ll.y;
  //ur_x = o->ur.x;
  //ur_y = o->ur.y;

  fp << cind << "Trend " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << ind << "id = CreateTrend(" << dtostr(ll_x) << "," << dtostr(ll_y) << "," << dtostr(ur_x) << 
    "," << dtostr(ur_y) << ");" << '\n';
  //if (o->trf.is_modified())
    //    fp << ind << "SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
    //    << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (!o->fill)
    fp << ind << "SetObjectFill(id,0);" << '\n';
  if (o->fill) 
    fp << ind << "SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';

  if (!o->border)
    fp << ind << "SetObjectBorder(id,0);" << '\n';
  if (o->draw_type != glow_eDrawType_No)
    fp << ind << "SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';

  if (o->no_of_points != 100)
    fp << ind << "SetObjectAttribute(id,\"Trend.NoOfPoints\"," << o->no_of_points << ");" << '\n';
  if (!feq(o->scan_time, 0.5))
    fp << ind << "SetObjectAttribute(id,\"Trend.ScanTime\"," << dtostr(o->scan_time) << ");" << '\n';
  if (o->curve_width != 1)
    fp << ind << "SetObjectAttribute(id,\"Trend.CurveLineWidth\"," << o->curve_width << ");" << '\n';
  if (o->fill_curve != 0)
    fp << ind << "SetObjectAttribute(id,\"Trend.FillCurve\"," << o->fill_curve << ");" << '\n';
  if (o->horizontal_lines != 4)
    fp << ind << "SetObjectAttribute(id,\"Trend.HorizontalLines\"," << o->horizontal_lines << ");" << '\n';
  if (o->vertical_lines != 4)
    fp << ind << "SetObjectAttribute(id,\"Trend.VerticalLines\"," << o->vertical_lines << ");" << '\n';
  if (!feq(o->y_max_value[0], 100.0))
    fp << ind << "SetObjectAttribute(id,\"Trend.MaxValue1\"," << dtostr(o->y_max_value[0]) << ");" << '\n';
  if (o->y_min_value[0] != 0)
    fp << ind << "SetObjectAttribute(id,\"Trend.MinValue1\"," << dtostr(o->y_min_value[0]) << ");" << '\n';
  if (o->curve_drawtype[0] != glow_eDrawType_Color145)
    fp << ind << "SetObjectAttribute(id,\"Trend.CurveColor1\"," << o->curve_drawtype[0] << ");" << '\n';
  if (o->curve_fill_drawtype[0] != glow_eDrawType_Color139)
    fp << ind << "SetObjectAttribute(id,\"Trend.CurveFillColor1\"," << o->curve_fill_drawtype[0] << ");" << '\n';
  if (!feq(o->y_max_value[1], 100.0))
    fp << ind << "SetObjectAttribute(id,\"Trend.MaxValue2\"," << dtostr(o->y_max_value[1]) << ");" << '\n';
  if (o->y_min_value[1] != 0)
    fp << ind << "SetObjectAttribute(id,\"Trend.MinValue2\"," << dtostr(o->y_min_value[1]) << ");" << '\n';
  if (o->curve_drawtype[1] != glow_eDrawType_Color295)
    fp << ind << "SetObjectAttribute(id,\"Trend.CurveColor2\"," << o->curve_drawtype[1] << ");" << '\n';
  if (o->curve_fill_drawtype[1] != glow_eDrawType_Color289)
    fp << ind << "SetObjectAttribute(id,\"Trend.CurveFillColor2\"," << o->curve_fill_drawtype[1] << ");" << '\n';
  if (o->direction != glow_eHorizDirection_Left)
    fp << ind << "SetObjectAttribute(id,\"Trend.Direction\"," << o->direction << ");" << '\n';

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, ind);

  return 1;
}

int GlowExportScript::axis(GrowAxis* o, void* e, void* m)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << cind << "Axis " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  if (o->user_data)
    fp << ind << "id = CreateAxis(" << dtostr(o->ll.x) << "," << dtostr(o->ll.y) << "," << dtostr(o->ur.x) << 
      "," << dtostr(o->ur.y) << ",0,1,eDirection_Left);" << '\n';
  else
    fp << ind << "id = CreateAxis(" << dtostr(o->ll.x) << "," << dtostr(o->ll.y) << "," << dtostr(o->ur.x) << 
      "," << dtostr(o->ur.y) << ",0,0,eDirection_Left);" << '\n';
  if (o->trf.is_modified())
    fp << ind << "SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << ","
         << dtostr(o->trf.a13) << "," << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," 
         << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->draw_type != glow_eDrawType_No)
    fp << ind << "SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->text_color_drawtype != glow_eDrawType_No)
    fp << ind << "SetObjectTextColor(id," << o->text_color_drawtype  << ");" << '\n';
  if (o->text_size != 1)
    fp << ind << "SetObjectTextSize(id," << o->text_size  << ");" << '\n';

  if (o->user_data) {
    if (o->min_value != 0)
      fp << ind << "SetObjectAttribute(id,\"Axis.MinValue\"," << dtostr(o->min_value) << ");" << '\n';
    if (!feq(o->max_value, 100.0))
      fp << ind << "SetObjectAttribute(id,\"Axis.MaxValue\"," << dtostr(o->max_value) << ");" << '\n';
    if (o->lines != 11)
      fp << ind << "SetObjectAttribute(id,\"Axis.Lines\"," << o->lines << ");" << '\n';
    if (o->longquotient != 1)
      fp << ind << "SetObjectAttribute(id,\"Axis.LongQuotient\"," << o->longquotient << ");" << '\n';
    if (o->valuequotient != 1)
      fp << ind << "SetObjectAttribute(id,\"Axis.ValueQuotient\"," << o->valuequotient << ");" << '\n';
    if (!streq(o->format, "%3.0f"))
      fp << ind << "SetObjectAttribute(id,\"Axis.Format\",\"" << o->format << "\");" << '\n';
  } else {
    if (o->min_value != 0)
      fp << ind << "SetObjectAttribute(id,\"MinValue\"," << dtostr(o->min_value) << ");" << '\n';
    if (!feq(o->max_value, 100.0))
      fp << ind << "SetObjectAttribute(id,\"MaxValue\"," << dtostr(o->max_value) << ");" << '\n';
    if (o->lines != 11)
      fp << ind << "SetObjectAttribute(id,\"Lines\"," << o->lines << ");" << '\n';
    if (o->longquotient != 1)
      fp << ind << "SetObjectAttribute(id,\"LongQuotient\"," << o->longquotient << ");" << '\n';
    if (o->valuequotient != 1)
      fp << ind << "SetObjectAttribute(id,\"ValueQuotient\"," << o->valuequotient << ");" << '\n';
    if (!streq(o->format, "%3.0f"))
      fp << ind << "SetObjectAttribute(id,\"Format\",\"" << o->format << "\");" << '\n';
  }
  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, ind);

  return 1;
}

int GlowExportScript::image(GrowImage* o, void* e, void* m)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << cind << "Image " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << ind << "id = CreateImage(\"" << o->image_filename << "\"," << dtostr(ll_x) << "," << dtostr(ll_y) << "," << dtostr(ur_x) << "," << dtostr(ur_y) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  return 1;
}

int GlowExportScript::window(GrowWindow* o, void* e, void* m)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << cind << "Window " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << ind << "id = CreateWindow(" << dtostr(o->ll.x) << "," << dtostr(o->ll.y) << "," << dtostr(o->ur.x) << 
    "," << dtostr(o->ur.y) << ");" << '\n';
  if (o->trf.is_modified())
    fp << ind << "SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
        << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (!o->border)
    fp << ind << "SetObjectBorder(id,0);" << '\n';
  if (o->draw_type != glow_eDrawType_Line)
    fp << ind << "SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';

  if (!streq(o->input_file_name, ""))
    fp << ind << "SetObjectAttribute(id,\"Window.FileName\",\"" << o->input_file_name << "\");" << '\n';
  if (!feq(o->window_scale, 1.0))
    fp << ind << "SetObjectAttribute(id,\"Window.Scale\"," << dtostr(o->window_scale) << ");" << '\n';
  if (o->vertical_scrollbar != 0)
    fp << ind << "SetObjectAttribute(id,\"Window.VerticalScrollbar\"," << o->vertical_scrollbar << ");" << '\n';
  if (o->horizontal_scrollbar != 0)
    fp << ind << "SetObjectAttribute(id,\"Window.HorizontalScrollbar\"," << o->horizontal_scrollbar << ");" << '\n';
  if (!feq(o->scrollbar_width, 0.5))
    fp << ind << "SetObjectAttribute(id,\"Window.ScrollbarWidth\"," << dtostr(o->scrollbar_width) << ");" << '\n';
  if (o->scrollbar_color != glow_eDrawType_LightGray)
    fp << ind << "SetObjectAttribute(id,\"Window.ScrollbarColor\"," << o->scrollbar_color << ");" << '\n';
  if (!streq(o->owner, ""))
    fp << ind << "SetObjectAttribute(id,\"Window.Owner\",\"" << o->owner << "\");" << '\n';

  return 1;
}

int GlowExportScript::group(GrowGroup* o, void* e, void* m)
{
  int sts;
  int sumsts = 0;

  fp << cind << "Group " << o->n_name << '\n';
  fp << ind << "SelectClear();" << '\n';

  for (int i = 0; i < o->nc->a.size(); i++) {
    if (o->nc->a[i]->type() != glow_eObjectType_Con) {
      sts = o->nc->a[i]->export_script(this, 0, m);
      if (ODD(sts)) {
	fp << ind << "SelectAdd(id);" << '\n';
	sumsts = sts;
      }
    }
  }
  if (EVEN(sumsts))
    return 0;

  fp << ind << "id = GroupSelected();" << '\n';
  
  if (o->trf.is_modified())
    fp << ind << "SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
        << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';

  fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';
  if (o->shadow)
    fp << ind << "SetObjectShadow(id,1);" << '\n';
  if (o->line_width != 0)
    fp << ind << "SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No)
    fp << ind << "SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << ind << "SetObjectAttribute(id,\"Transparency\"," << o->transparency << ");" << '\n';

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, ind);
  return 1;
}

int GlowExportScript::toolbar(GrowToolbar* o, void* e, void* m)
{

  fp << cind << "Toolbar " << o->n_name << '\n';

  if (m) {
    sElem *elem = (sElem *)e;
    sElem *mod = (sElem *)m;
    fp << ind << "x1 = mx + " << dtostr(elem->x_left - mod->x_left) << ";" << '\n';
    fp << ind << "y1 = my + " << dtostr(elem->y_low - mod->y_low) << ";" << '\n';
    fp << ind << "x2 = x1 + " << dtostr(elem->x_right - elem->x_left) << ";" << '\n';
    fp << ind << "y2 = y1 + " << dtostr(elem->y_high - elem->y_low) << ";" << '\n';
    fp << ind << "id = CreateToolbar(\"" << o->nc->n_name << "\",x1,y1,x2,y2);" << '\n';
  }
  else
    fp << ind << "id = CreateToolbar(\"" << o->nc->n_name << "\"," << dtostr(o->x_left) << "," << dtostr(o->y_low) << "," << dtostr(o->x_right) << "," << dtostr(o->y_high) << ");" << '\n';

  fp << ind << "SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';
  if (o->shadow)
    fp << ind << "SetObjectShadow(id,1);" << '\n';
  if (o->line_width != 0)
    fp << ind << "SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No)
    fp << ind << "SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << ind << "SetObjectAttribute(id,\"Transparency\"," << o->transparency << ");" << '\n';

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, ind);
  return 1;
}

int GlowExportScript::scriptmodule(GrowScriptModule* o, void* e, void* m)
{
  return 1;
}
