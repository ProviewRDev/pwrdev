/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2021 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#include <string.h>

#include "glow_growrect.h"
#include "glow_growrectrounded.h"
#include "glow_growline.h"
#include "glow_growpolyline.h"
#include "glow_growconpoint.h"
#include "glow_growtext.h"
#include "glow_growsubannot.h"
#include "glow_growarc.h"
#include "glow_grownode.h"
#include "glow_growbar.h"
#include "glow_growtrend.h"
#include "glow_growpie.h"
#include "glow_growaxis.h"
#include "glow_growgroup.h"
#include "glow_growtoolbar.h"
#include "glow_growimage.h"
#include "glow_growwindow.h"
#include "glow_dashboard.h"
#include "glow_exportscript.h"
#include "ge_methods.h"
#include "co_ccm.h"

#define SCRIPT_SCALE 0.05

static char *dtostr(double f)
{
  static char str[30];
  sprintf(str, "%g", f);
  if (strchr(str, '.') == 0  && strchr(str,'e') == 0)
    strcat(str, ".");
  return str;
}

int GlowExportScript::export_script(char* filename,
    int (*userdata_cb)(void*, void*, std::ofstream&, char*))
{
  char nc_name[80];
  int is_toolbar;
  int has_toolbar;
  int llen;
  int new_line;
  int found;
  char* s;

  userdata_script_cb = userdata_cb;

  if ((s = strrchr(filename, ':')))
    strcpy(nc_name, s + 1);
  else if ((s = strrchr(filename, '/')))
    strcpy(nc_name, s + 1);
  else
    strcpy(nc_name, filename);
  if ((s = strrchr(nc_name, '.')))
    *s = 0;
  fp.open(filename);

  // Graph size
  int default_width = int((ctx->x1 - ctx->x0) * ctx->mw.zoom_factor_x);
  int default_height = int((ctx->y1 - ctx->y0) * ctx->mw.zoom_factor_y);
  if (default_width > 0 && default_height > 0) {
    fp << "!** DefaultWidth: " << default_width << '\n';
    fp << "!** DefaultHeight: " << default_height << '\n';
  }

  // Load of subgraphs
  has_toolbar = 0;
  new_line = 1;
  if (ctx->a_nc.size() > 0) {
    fp << "!** Load: ";
    llen = 10;
    for (int i = 0; i < ctx->a_nc.size(); i++) {
      is_toolbar = 0;
      for (int j = 0; j < ctx->a.size(); j++) {	
	if (ctx->a[j]->type() == glow_eObjectType_GrowToolbar &&
	    ctx->a_nc[i] == ((GrowToolbar *)ctx->a[j])->nc) {
	  is_toolbar = 1;
	  has_toolbar = 1;
	  break;
	}
      }
      if (is_toolbar)
	continue;
      if (llen + strlen(((GlowNodeClass *)ctx->a_nc[i])->n_name) + 2 > K_LINE_SIZE) {
	fp << '\n';
	fp << "!** Load: ";
	llen = 10;
	new_line = 1;
      }
      if (new_line)
	new_line = 0;
      else {
	fp << ",";
	llen++;
      }
      fp << ((GlowNodeClass *)ctx->a_nc[i])->n_name;
      llen += strlen(((GlowNodeClass *)ctx->a_nc[i])->n_name);
    }
    if (has_toolbar) {
      // Add method buttons that are not present
      for (int j = 0; j < GeMethods::opmeth_size; j++) {
	if (strcmp(GeMethods::op_subgraph[j], "") == 0)
	  continue;
	found = 0;
	for (int i = 0; i < ctx->a_nc.size(); i++) {
	  if (strcmp(GeMethods::op_subgraph[j], ((GlowNodeClass *)ctx->a_nc[i])->n_name) == 0) {
	    found = 1;
	    break;
	  }
	}
	if (!found) {
	  if (llen + strlen(GeMethods::op_subgraph[j]) + 2 > K_LINE_SIZE) {
	    fp << '\n';
	    fp << "!** Load: ";
	    llen = 10;
	    new_line = 1;
	  }
	  if (new_line)
	    new_line = 0;
	  else {
	    fp << ",";
	    llen++;
	  }
	  fp << GeMethods::op_subgraph[j];
	  llen += strlen(GeMethods::op_subgraph[j]);
	}
      }
      for (int j = 0; j < GeMethods::mntmeth_size; j++) {
	if (strcmp(GeMethods::mnt_subgraph[j], "") == 0)
	  continue;
	found = 0;
	for (int i = 0; i < ctx->a_nc.size(); i++) {
	  if (strcmp(GeMethods::mnt_subgraph[j], ((GlowNodeClass *)ctx->a_nc[i])->n_name) == 0) {
	    found = 1;
	    break;
	  }
	}
	if (!found) {
	  if (llen + strlen(GeMethods::mnt_subgraph[j]) + 2 > K_LINE_SIZE) {
	    fp << '\n';
	    fp << "!** Load: ";
	    llen = 10;
	    new_line = 1;
	  }
	  if (new_line)
	    new_line = 0;
	  else {
	    fp << ",";
	    llen++;
	  }
	  fp << GeMethods::mnt_subgraph[j];
	  llen += strlen(GeMethods::mnt_subgraph[j]);
	}
      }
    }
    fp << '\n';
  }

  fp << "main()" << '\n';
  fp << "  float x1;" << '\n';
  fp << "  float y1;" << '\n';
  fp << "  float x2;" << '\n';
  fp << "  float y2;" << '\n';
  fp << "  int id;" << '\n';
  fp << "  SetDraw(0);" << '\n';
  
  
  fp << "  SetBackgroundColor(" << ctx->background_color << ");" << '\n';
  if (!streq(nc_name, ""))
    fp << "  SetGraphName(\"" << nc_name << "\");" << '\n';
  if (ctx->x0 != 0)
    fp << "  SetGraphAttribute(\"x0\"," << dtostr(ctx->x0) << ");" << '\n';
  if (ctx->y0 != 0)
    fp << "  SetGraphAttribute(\"y0\"," << dtostr(ctx->y0) << ");" << '\n';
  if (ctx->x1 != 0)
    fp << "  SetGraphAttribute(\"x1\"," << dtostr(ctx->x1) << ");" << '\n';
  if (ctx->y1 != 0)
    fp << "  SetGraphAttribute(\"y1\"," << dtostr(ctx->y1) << ");" << '\n';
  if (!feq(ctx->scantime, 0.5))
    fp << "  SetGraphAttribute(\"Scantime\"," << dtostr(ctx->scantime) << ");" << '\n';
  if (!feq(ctx->fast_scantime, 0.5))
    fp << "  SetGraphAttribute(\"FastScantime\"," << dtostr(ctx->fast_scantime) << ");" << '\n';
  if (!feq(ctx->animation_scantime, 0.5))
    fp << "  SetGraphAttribute(\"AnimationScantime\"," << dtostr(ctx->animation_scantime) << ");" << '\n';
  if (!streq(ctx->background_image, ""))
    fp << "  SetGraphAttribute(\"BackgroundImage\",\"" << ctx->background_image << "\");" << '\n';
  if (ctx->mb3_action != glow_eMB3Action_PopupMenu)
    fp << "  SetGraphAttribute(\"MB3Action\"," << ctx->mb3_action << ");" << '\n';
  if (ctx->translate_on != 0)
    fp << "  SetGraphAttribute(\"Translate\"," << ctx->translate_on << ");" << '\n';
  if (ctx->anti_aliasing != 0)
    fp << "  SetGraphAttribute(\"AntiAliasing\"," << ctx->anti_aliasing << ");" << '\n';
  if (ctx->hot_indication != glow_eHotIndication_LightColor)
    fp << "  SetGraphAttribute(\"HotIndication\"," << ctx->hot_indication << ");" << '\n';
  if (ctx->tiptext_size != 2)
    fp << "  SetGraphAttribute(\"TooltipTextsize\"," << ctx->tiptext_size << ");" << '\n';
  if (!streq(ctx->color_theme, ""))
    fp << "  SetGraphAttribute(\"ColorTheme\",\"" << ctx->color_theme << "\");" << '\n';
  if (ctx->dashboard != 0)
    fp << "  SetGraphAttribute(\"Dashboard\"," << ctx->dashboard << ");" << '\n';
  if (!feq(ctx->dash_cell_width, 8.0))
    fp << "  SetGraphAttribute(\"DashCellWidth\"," << ctx->dash_cell_width << ");" << '\n';
  if (!feq(ctx->dash_cell_height, 6.0))
    fp << "  SetGraphAttribute(\"DashCellHeight\"," << ctx->dash_cell_height << ");" << '\n';
  if (ctx->dash->dash_rows != 5)
    fp << "  SetGraphAttribute(\"DashCellRows\"," << ctx->dash->dash_rows << ");" << '\n';
  if (ctx->dash->dash_columns != 4)
    fp << "  SetGraphAttribute(\"DashCellColumns\"," << ctx->dash->dash_columns << ");" << '\n';
  if (!streq(ctx->default_color_theme, "")) {
    int ct;
    if (strncmp(ctx->default_color_theme, "pwr_colortheme", 14) == 0 && sscanf(&ctx->default_color_theme[14], "%d", &ct) == 1)
      fp << "  SetColorTheme(" << ct << ");" << '\n'; 
  }
    
  ctx->a.export_script(this);
  fp << "  SetDraw(1);" << '\n';
  fp << "endmain" << '\n';

  fp.close();
  return 1;
}

int GlowExportScript::array(GlowArray* o)
{
  int i;
  int rsts = 0;
  int sts;

  for (i = 0; i < o->a_size; i++) {
    if (o->a[i]->type() != glow_eObjectType_Con) {
      sts = o->a[i]->export_script(this);
      if (ODD(sts))
	rsts = sts;
    }
  }
  return rsts;
}

int GlowExportScript::node(GrowNode* o)
{
  fp << "# Node " << o->n_name << ", " << o->nc->n_name << '\n';
  fp << "  id = CreateObject(\"" << o->nc->n_name << "\"," << dtostr(o->x_left) << "," << dtostr(o->y_low) << "," << dtostr(o->x_right) << "," << dtostr(o->y_high) << ");" << '\n';
  fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';
  if (o->shadow)
    fp << "  SetObjectShadow(id,1);" << '\n';
  if (o->line_width != 0)
    fp << "  SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No)
    fp << "  SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
  if (o->draw_type != glow_eDrawType_Line)
    fp << "  SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->text_drawtype != glow_eDrawType_No)
    fp << "  SetObjectTextColor(id," << o->text_drawtype  << ");" << '\n';
  if (o->background_drawtype != glow_eDrawType_No)
    fp << "  SetObjectBackgroundColor(id," << o->background_drawtype  << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << "  SetObjectAttribute(id,\"Transparency\"," << o->transparency << ");" << '\n';
  if (o->text_font != glow_eFont_No)
    fp << "  SetObjectTextFont(id," << o->text_font <<  ");" << '\n';
  if (o->text_type != glow_eDrawType_TextHelvetica)
    fp << "  SetObjectTextBold(id, 1);" << '\n';

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, (char *)"  ");

  if (o->annotsize[0] > 0)
    fp << "  SetObjectAttribute(id,\"A0\",\"" << o->annotv[0] << "\");" << '\n';
  if (o->annotsize[1] > 0) {
    fp << "  SetObjectAttribute(id,\"A1\",\"" << o->annotv[1] << "\");" << '\n';
    fp << "  SetObjectAttribute(id,\"Text\",\"" << o->annotv[1] << "\");" << '\n';
  }    

  return 1;
}

int GlowExportScript::rect(GrowRect* o)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << "# Rectangle " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << "  id = CreateRectangle(" << dtostr(ll_x) << "," << dtostr(ll_y) << "," << dtostr(ur_x - ll_x) << "," << dtostr(ur_y - ll_y) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->fill)
    fp << "  SetObjectFill(id,1);" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No && (o->fill || o->shadow))
    fp << "  SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
 
  if (o->draw_type != glow_eDrawType_Line)
    fp << "  SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->background_drawtype != glow_eDrawType_No)
    fp << "  SetObjectBackgroundColor(id," << o->background_drawtype  << ");" << '\n';

  if (o->border == 0)
    fp << "  SetObjectBorder(id," << o->border << ");" << '\n';
  if (o->line_width != 1)
    fp << "  SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->shadow)
    fp << "  SetObjectShadow(id,1);" << '\n';
  if (!feq(o->shadow_width, 5.0))
    fp << "  SetObjectAttribute(id,\"shadow_width\"," << dtostr(o->shadow_width) << ");" << '\n';
  if (o->shadow_contrast != 2)
    fp << "  SetObjectAttribute(id,\"shadow_contrast\"," << o->shadow_contrast << ");" << '\n';
  if (o->relief != glow_eRelief_Up)
    fp << "  SetObjectAttribute(id,\"relief\"," << (int)o->relief << ");" << '\n';
  if (o->gradient_contrast != 4)
    fp << "  SetObjectAttribute(id,\"gradient_contrast\"," << o->gradient_contrast << ");" << '\n';
  if (o->gradient != glow_eGradient_No)
    fp << "  SetObjectAttribute(id,\"gradient\"," << (int)o->gradient << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << "  SetObjectAttribute(id,\"transparency\"," << o->transparency << ");" << '\n';
  if (o->invisible != 0)
    fp << "  SetObjectAttribute(id,\"invisible\"," << o->invisible << ");" << '\n';
  if (o->fill_eq_background != 0)
    fp << "  SetObjectAttribute(id,\"fill_eq_background\"," << o->fill_eq_background << ");" << '\n';
  if (o->fixcolor != 0)
    fp << "  SetObjectAttribute(id,\"fixcolor\"," << o->fixcolor << ");" << '\n';
  if (o->disable_shadow != 0)
    fp << "  SetObjectAttribute(id,\"disable_shadow\"," << o->disable_shadow << ");" << '\n';
  if (o->disable_gradient != 0)
    fp << "  SetObjectAttribute(id,\"disable_gradient\"," << o->disable_gradient << ");" << '\n';
  if (o->bgcolor_gradient != 0)
    fp << "  SetObjectAttribute(id,\"bgcolor_gradient\"," << o->bgcolor_gradient << ");" << '\n';
  if (o->fixposition != 0)
    fp << "  SetObjectAttribute(id,\"fixposition\"," << o->fixposition << ");" << '\n';

  return 1;
}

int GlowExportScript::rectrounded(GrowRectRounded* o)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << "# RoundedRect " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << "  id = CreateRectRounded(" << dtostr(ll_x) << "," << dtostr(ll_y) << "," << dtostr(ur_x - ll_x) << "," << dtostr(ur_y - ll_y) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->fill)
    fp << "  SetObjectFill(id,1);" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No && (o->fill || o->shadow))
    fp << "  SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
 
  if (o->draw_type != glow_eDrawType_Line)
    fp << "  SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';

  if (o->border == 0)
    fp << "  SetObjectBorder(id," << o->border << ");" << '\n';
  if (o->line_width != 1)
    fp << "  SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->shadow)
    fp << "  SetObjectShadow(id,1);" << '\n';
  if (!feq(o->shadow_width, 5.0))
    fp << "  SetObjectAttribute(id,\"shadow_width\"," << dtostr(o->shadow_width) << ");" << '\n';
  if (o->shadow_contrast != 2)
    fp << "  SetObjectAttribute(id,\"shadow_contrast\"," << o->shadow_contrast << ");" << '\n';
  if (o->relief != glow_eRelief_Up)
    fp << "  SetObjectAttribute(id,\"relief\"," << (int)o->relief << ");" << '\n';
  if (o->gradient_contrast != 4)
    fp << "  SetObjectAttribute(id,\"gradient_contrast\"," << o->gradient_contrast << ");" << '\n';
  if (o->gradient != glow_eGradient_No)
    fp << "  SetObjectAttribute(id,\"gradient\"," << (int)o->gradient << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << "  SetObjectAttribute(id,\"transparency\"," << o->transparency << ");" << '\n';
  if (o->disable_shadow != 0)
    fp << "  SetObjectAttribute(id,\"disable_shadow\"," << o->disable_shadow << ");" << '\n';
  if (o->disable_gradient != 0)
    fp << "  SetObjectAttribute(id,\"disable_gradient\"," << o->disable_gradient << ");" << '\n';
  if (o->fixposition != 0)
    fp << "  SetObjectAttribute(id,\"fixposition\"," << o->fixposition << ");" << '\n';
  if (!feq(o->round_amount, 15.0))
    fp << "  SetObjectAttribute(id,\"round_amount\"," << dtostr(o->round_amount) << ");" << '\n';

  return 1;
}

int GlowExportScript::line(GrowLine* o)
{
  float x1, y1, x2, y2;

  x1 = o->trf.x(o->p1.x, o->p1.y);
  y1 = o->trf.y(o->p1.x, o->p1.y);
  x2 = o->trf.x(o->p2.x, o->p2.y);
  y2 = o->trf.y(o->p2.x, o->p2.y);

  fp << "# Line " << o->n_name << " (" << x1 << "," << y1 << "),(" << x1 << "," << y2 << ")" << '\n';
  fp << "  id = CreateLine(" << dtostr(x1) << "," << dtostr(y1) << "," << dtostr(x2) << 
    "," << dtostr(y2) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->line_width != 1)
    fp << "  SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->line_type != glow_eLineType_Solid)
    fp << "  SetObjectLineType(id," << (int)o->line_type << ");" << '\n';
  if (o->draw_type != glow_eDrawType_Line)
    fp << "  SetObjectBorderColor(id," << o->draw_type << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << "  SetObjectAttribute(id,\"transparency\"," << o->transparency << ");" << '\n';

  return 1;
}

int GlowExportScript::polyline(GrowPolyLine* o)
{
  float x1, y1, x2, y2;

  x1 = o->trf.x(((GlowPoint*)o->a_points[0])->x, ((GlowPoint*)o->a_points[0])->y);
  y1 = o->trf.y(((GlowPoint*)o->a_points[0])->x, ((GlowPoint*)o->a_points[0])->y);
  x2 = o->trf.x(((GlowPoint*)o->a_points[1])->x, ((GlowPoint*)o->a_points[1])->y);
  y2 = o->trf.y(((GlowPoint*)o->a_points[1])->x, ((GlowPoint*)o->a_points[1])->y);


  fp << "# Polyline " << o->n_name << " (" << x1 << "," << y1 << "),(" << x2 << "," << y2 << ")" << '\n';
  fp << "  id = CreatePolyLine(" << dtostr(x1) << "," << dtostr(y1) << "," << dtostr(x2) << "," << dtostr(y2) << ");" << '\n';

  for (int i = 2; i < o->a_points.a_size; i++) {
    x1 = o->trf.x(((GlowPoint*)o->a_points[i])->x, ((GlowPoint*)o->a_points[i])->y);
    y1 = o->trf.y(((GlowPoint*)o->a_points[i])->x, ((GlowPoint*)o->a_points[i])->y);
    fp << "  PolyLineAdd(id," << dtostr(x1) << "," << dtostr(y1) << ");" << '\n';    
  }
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->fill)
    fp << "  SetObjectFill(id,1);" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No && (o->fill || o->shadow))
    fp << "  SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';

  if (o->draw_type != glow_eDrawType_Line)
    fp << "  SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->background_drawtype != glow_eDrawType_No)
    fp << "  SetObjectBackgroundColor(id," << o->background_drawtype  << ");" << '\n';
  if (o->border == 0)
    fp << "  SetObjectBorder(id," << o->border << ");" << '\n';
  if (o->line_width != 1)
    fp << "  SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->shadow)
    fp << "  SetObjectShadow(id,1);" << '\n';
  if (!feq(o->shadow_width, 5.0))
    fp << "  SetObjectAttribute(id,\"shadow_width\"," << dtostr(o->shadow_width) << ");" << '\n';
  if (o->shadow_contrast != 2)
    fp << "  SetObjectAttribute(id,\"shadow_contrast\"," << o->shadow_contrast << ");" << '\n';
  if (o->relief != glow_eRelief_Up)
    fp << "  SetObjectAttribute(id,\"relief\"," << (int)o->relief << ");" << '\n';
  if (o->gradient_contrast != 4)
    fp << "  SetObjectAttribute(id,\"gradient_contrast\"," << o->gradient_contrast << ");" << '\n';
  if (o->gradient != glow_eGradient_No)
    fp << "  SetObjectAttribute(id,\"gradient\"," << (int)o->gradient << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << "  SetObjectAttribute(id,\"transparency\"," << o->transparency << ");" << '\n';
  if (o->disable_shadow != 0)
    fp << "  SetObjectAttribute(id,\"disable_shadow\"," << o->disable_shadow << ");" << '\n';
  if (o->disable_gradient != 0)
    fp << "  SetObjectAttribute(id,\"disable_gradient\"," << o->disable_gradient << ");" << '\n';
  if (o->fill_eq_border != 0)
    fp << "  SetObjectAttribute(id,\"fill_eq_border\"," << o->fill_eq_border << ");" << '\n';
  if (o->fill_eq_background != 0)
    fp << "  SetObjectAttribute(id,\"fill_eq_background\"," << o->fill_eq_background << ");" << '\n';
  if (o->fill_eq_light != 0)
    fp << "  SetObjectAttribute(id,\"fill_eq_light\"," << o->fill_eq_light << ");" << '\n';
  if (o->fill_eq_shadow != 0)
    fp << "  SetObjectAttribute(id,\"fill_eq_shadow\"," << o->fill_eq_shadow << ");" << '\n';
  if (o->fill_eq_bglight != 0)
    fp << "  SetObjectAttribute(id,\"fill_eq_bglight\"," << o->fill_eq_bglight << ");" << '\n';
  if (o->fill_eq_bgshadow != 0)
    fp << "  SetObjectAttribute(id,\"fill_eq_bgshadow\"," << o->fill_eq_bgshadow << ");" << '\n';
  if (o->fixcolor != 0)
    fp << "  SetObjectAttribute(id,\"fixcolor\"," << o->fixcolor << ");" << '\n';
  if (o->fixposition != 0)
    fp << "  SetObjectAttribute(id,\"fixposition\"," << o->fixposition << ");" << '\n';

  return 1;
}

static int text_size_to_idx(int size)
{
  if (size == 0)
    return 0;
  if (size == 1)
    return 1;
  if (size == 2)
    return 2;
  if (size <= 4)
    return 3;
  if (size <= 6)
    return 4;
  if (size <= 8)
    return 5;
  return 5;
}

int GlowExportScript::text(GrowText* o)
{
  float x1, y1;
  int bold;
  int textsize;

  if (o->draw_type == glow_eDrawType_TextHelveticaBold)
    bold = 1;
  else
    bold = 0;
  textsize = text_size_to_idx(o->text_size);

  x1 = o->trf.x(o->p.x, o->p.y);
  y1 = o->trf.y(o->p.x, o->p.y);

  fp << "# Text " << o->n_name << " (" << x1 << "," << y1 << ")" << '\n';
  fp << "  id = CreateText(\"" << o->text << "\"," << dtostr(o->p.x) << "," << dtostr(o->p.y) << "," <<
    textsize << "," << o->font << "," << bold << "," << o->color_drawtype << ");" << '\n';
  if (o->trf.is_modified())
    fp << "  SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
        << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

#if 0
  fp << "  SetObjectTextSize(id," << textsize << ");" << '\n';
  fp << "  SetObjectTextFont(id," << o->font <<  ");" << '\n';
  if (o->draw_type != glow_eDrawType_TextHelvetica)
    fp << "  SetObjectTextBold(id, 1);" << '\n';
  if (o->color_drawtype != glow_eDrawType_Line)
    fp << "  SetObjectTextColor(id," << o->color_drawtype << ");" << '\n';
#endif
  if (o->adjustment != glow_eAdjustment_Left)
    fp << "  SetObjectAttribute(id,\"Adjustment\"," << (int)o->adjustment << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << "  SetObjectAttribute(id,\"Transparency\"," << o->transparency << ");" << '\n';

  return 1;
}

int GlowExportScript::annot(GrowSubAnnot* o)
{
  return 0;
}

int GlowExportScript::arc(GrowArc* o)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << "# Arc " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << "  id = CreateArc(" << dtostr(ll_x) << "," << dtostr(ll_y) << "," << dtostr(ur_x) << 
    "," << dtostr(ur_y) << "," << o->angle1 << "," << o->angle2 << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->fill) {
    fp << "  SetObjectFill(id,1);" << '\n';
    fp << "  SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
  }
  if (o->border == 0)
    fp << "  SetObjectBorder(id," << o->border << ");" << '\n';
  if (o->line_width != 1)
    fp << "  SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->draw_type != glow_eDrawType_Line)
    fp << "  SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->shadow)
    fp << "  SetObjectShadow(id,1);" << '\n';
  if (!feq(o->shadow_width, 5.0))
    fp << "  SetObjectAttribute(id,\"shadow_width\"," << dtostr(o->shadow_width) << ");" << '\n';
  if (o->shadow_contrast != 2)
    fp << "  SetObjectAttribute(id,\"shadow_contrast\"," << o->shadow_contrast << ");" << '\n';
  if (o->relief != glow_eRelief_Up)
    fp << "  SetObjectAttribute(id,\"relief\"," << (int)o->relief << ");" << '\n';
  if (o->gradient_contrast != 4)
    fp << "  SetObjectAttribute(id,\"gradient_contrast\"," << o->gradient_contrast << ");" << '\n';
  if (o->gradient != glow_eGradient_No)
    fp << "  SetObjectAttribute(id,\"gradient\"," << (int)o->gradient << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << "  SetObjectAttribute(id,\"transparency\"," << o->transparency << ");" << '\n';
  if (o->fill_eq_light != 0)
    fp << "  SetObjectAttribute(id,\"fill_eq_light\"," << o->fill_eq_light << ");" << '\n';
  if (o->fill_eq_shadow != 0)
    fp << "  SetObjectAttribute(id,\"fill_eq_shadow\"," << o->fill_eq_shadow << ");" << '\n';
  if (o->fill_eq_background != 0)
    fp << "  SetObjectAttribute(id,\"fill_eq_background\"," << o->fill_eq_background << ");" << '\n';
  if (o->fixcolor != 0)
    fp << "  SetObjectAttribute(id,\"fixcolor\"," << o->fixcolor << ");" << '\n';
  if (o->disable_shadow != 0)
    fp << "  SetObjectAttribute(id,\"disable_shadow\"," << o->disable_shadow << ");" << '\n';
  if (o->disable_gradient != 0)
    fp << "  SetObjectAttribute(id,\"disable_gradient\"," << o->disable_gradient << ");" << '\n';
  if (o->fixposition != 0)
    fp << "  SetObjectAttribute(id,\"fixposition\"," << o->fixposition << ");" << '\n';

  return 1;
}

int GlowExportScript::point(GlowPoint* o, GlowTransform* trf)
{
  return 0;
}

int GlowExportScript::bar(GrowBar* o)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << "# Bar " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << "  id = CreateBar(" << dtostr(o->ll.x) << "," << dtostr(o->ll.y) << "," << dtostr(o->ur.x) << 
    "," << dtostr(o->ur.y) << ");" << '\n';
  if (o->trf.is_modified())
    fp << "  SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
        << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (!o->fill)
    fp << "  SetObjectFill(id,0);" << '\n';
  if (o->fill) 
    fp << "  SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';

  if (!o->border)
    fp << "  SetObjectBorder(id,0);" << '\n';
  if (o->draw_type != glow_eDrawType_No)
    fp << "  SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';

  if (o->min_value != 0)
    fp << "  SetObjectAttribute(id,\"Bar.MinValue\"," << dtostr(o->min_value) << ");" << '\n';
  if (!feq(o->max_value, 100.0))
    fp << "  SetObjectAttribute(id,\"Bar.MaxValue\"," << dtostr(o->max_value) << ");" << '\n';
  if (!feq(o->bar_value, 35.0))
    fp << "  SetObjectAttribute(id,\"Bar.Value\"," << dtostr(o->bar_value) << ");" << '\n';
  if (o->bar_drawtype != glow_eDrawType_Inherit)
    fp << "  SetObjectAttribute(id,\"Bar.BarColor\"," << o->bar_drawtype << ");" << '\n';
  if (o->bar_bordercolor != glow_eDrawType_Inherit)
    fp << "  SetObjectAttribute(id,\"Bar.BorderColor\"," << o->bar_bordercolor << ");" << '\n';
  if (o->bar_borderwidth != 1)
    fp << "  SetObjectAttribute(id,\"Bar.BorderWidth\"," << o->bar_borderwidth << ");" << '\n';

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, (char *)"  ");

  return 1;
}

int GlowExportScript::pie(GrowPie* o)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << "# Pie " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << "  id = CreatePie(" << dtostr(o->ll.x) << "," << dtostr(o->ll.y) << "," << dtostr(o->ur.x) << 
    "," << dtostr(o->ur.y) << ");" << '\n';
  if (o->trf.is_modified())
    fp << "  SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
        << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (!o->fill)
    fp << "  SetObjectFill(id,0);" << '\n';
  if (o->fill) 
    fp << "  SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';

  if (!o->border)
    fp << "  SetObjectBorder(id,0);" << '\n';
  if (o->draw_type != glow_eDrawType_No)
    fp << "  SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->shadow)
    fp << "  SetObjectShadow(id,1);" << '\n';

  if (o->angle1 != 0)
    fp << "  SetObjectAttribute(id,\"Pie.Angle1\"," << o->angle1 << ");" << '\n';
  if (o->angle2 != 360)
    fp << "  SetObjectAttribute(id,\"Pie.Angle2\"," << o->angle2 << ");" << '\n';
  if (!feq(o->shadow_width, 5.0))
    fp << "  SetObjectAttribute(id,\"Pie.ShadowWidth\"," << dtostr(o->shadow_width) << ");" << '\n';
  if (o->shadow_contrast != 2)
    fp << "  SetObjectAttribute(id,\"Pie.ShadowContrast\"," << o->shadow_contrast << ");" << '\n';
  if (o->gradient_contrast != 5)
    fp << "  SetObjectAttribute(id,\"Pie.GradientContrast\"," << o->gradient_contrast << ");" << '\n';
  if (o->gradient != 0)
    fp << "  SetObjectAttribute(id,\"Pie.Gradient\"," << o->gradient << ");" << '\n';
  if (o->relief != glow_eRelief_Up)
    fp << "  SetObjectAttribute(id,\"Pie.Relief\"," << o->relief << ");" << '\n';
  if (o->sectors != 12)
    fp << "  SetObjectAttribute(id,\"Pie.Sectors\"," << o->sectors << ");" << '\n';
  if (o->min_value != 0.0)
    fp << "  SetObjectAttribute(id,\"Pie.MinValue\"," << dtostr(o->min_value) << ");" << '\n';
  if (!feq(o->max_value, 100.0))
    fp << "  SetObjectAttribute(id,\"Pie.MaxValue\"," << dtostr(o->max_value) << ");" << '\n';
  for (int i = 0; i < o->sectors; i++) {
    if (o->sector_color[i] != glow_eDrawType_Inherit)
      fp << "  SetObjectAttribute(id,\"Pie.SectorColor" << i + 1 << "\"," << o->sector_color[i] << ");" << '\n';
  }

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, (char *)"  ");

  return 1;
}

int GlowExportScript::trend(GrowTrend* o)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);
  //ll_x = o->ll.x;
  //ll_y = o->ll.y;
  //ur_x = o->ur.x;
  //ur_y = o->ur.y;

  fp << "# Trend " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << "  id = CreateTrend(" << dtostr(ll_x) << "," << dtostr(ll_y) << "," << dtostr(ur_x) << 
    "," << dtostr(ur_y) << ");" << '\n';
  //if (o->trf.is_modified())
    //    fp << "  SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
    //    << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (!o->fill)
    fp << "  SetObjectFill(id,0);" << '\n';
  if (o->fill) 
    fp << "  SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';

  if (!o->border)
    fp << "  SetObjectBorder(id,0);" << '\n';
  if (o->draw_type != glow_eDrawType_No)
    fp << "  SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';

  if (o->no_of_points != 100)
    fp << "  SetObjectAttribute(id,\"Trend.NoOfPoints\"," << o->no_of_points << ");" << '\n';
  if (!feq(o->scan_time, 0.5))
    fp << "  SetObjectAttribute(id,\"Trend.ScanTime\"," << dtostr(o->scan_time) << ");" << '\n';
  if (o->curve_width != 1)
    fp << "  SetObjectAttribute(id,\"Trend.CurveLineWidth\"," << o->curve_width << ");" << '\n';
  if (o->fill_curve != 0)
    fp << "  SetObjectAttribute(id,\"Trend.FillCurve\"," << o->fill_curve << ");" << '\n';
  if (o->horizontal_lines != 4)
    fp << "  SetObjectAttribute(id,\"Trend.HorizontalLines\"," << o->horizontal_lines << ");" << '\n';
  if (o->vertical_lines != 4)
    fp << "  SetObjectAttribute(id,\"Trend.VerticalLines\"," << o->vertical_lines << ");" << '\n';
  if (!feq(o->y_max_value[0], 100.0))
    fp << "  SetObjectAttribute(id,\"Trend.MaxValue1\"," << dtostr(o->y_max_value[0]) << ");" << '\n';
  if (o->y_min_value[0] != 0)
    fp << "  SetObjectAttribute(id,\"Trend.MinValue1\"," << dtostr(o->y_min_value[0]) << ");" << '\n';
  if (o->curve_drawtype[0] != glow_eDrawType_Color145)
    fp << "  SetObjectAttribute(id,\"Trend.CurveColor1\"," << o->curve_drawtype[0] << ");" << '\n';
  if (o->curve_fill_drawtype[0] != glow_eDrawType_Color139)
    fp << "  SetObjectAttribute(id,\"Trend.CurveFillColor1\"," << o->curve_fill_drawtype[0] << ");" << '\n';
  if (!feq(o->y_max_value[1], 100.0))
    fp << "  SetObjectAttribute(id,\"Trend.MaxValue2\"," << dtostr(o->y_max_value[1]) << ");" << '\n';
  if (o->y_min_value[1] != 0)
    fp << "  SetObjectAttribute(id,\"Trend.MinValue2\"," << dtostr(o->y_min_value[1]) << ");" << '\n';
  if (o->curve_drawtype[1] != glow_eDrawType_Color295)
    fp << "  SetObjectAttribute(id,\"Trend.CurveColor2\"," << o->curve_drawtype[1] << ");" << '\n';
  if (o->curve_fill_drawtype[1] != glow_eDrawType_Color289)
    fp << "  SetObjectAttribute(id,\"Trend.CurveFillColor2\"," << o->curve_fill_drawtype[1] << ");" << '\n';
  if (o->direction != glow_eHorizDirection_Left)
    fp << "  SetObjectAttribute(id,\"Trend.Direction\"," << o->direction << ");" << '\n';

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, (char *)"  ");

  return 1;
}

int GlowExportScript::axis(GrowAxis* o)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << "# Axis " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  if (o->user_data)
    fp << "  id = CreateAxis(" << dtostr(o->ll.x) << "," << dtostr(o->ll.y) << "," << dtostr(o->ur.x) << 
      "," << dtostr(o->ur.y) << ",0,1,eDirection_Left);" << '\n';
  else
    fp << "  id = CreateAxis(" << dtostr(o->ll.x) << "," << dtostr(o->ll.y) << "," << dtostr(o->ur.x) << 
      "," << dtostr(o->ur.y) << ",0,0,eDirection_Left);" << '\n';
  if (o->trf.is_modified())
    fp << "  SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << ","
         << dtostr(o->trf.a13) << "," << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," 
         << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (o->draw_type != glow_eDrawType_No)
    fp << "  SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';
  if (o->text_color_drawtype != glow_eDrawType_No)
    fp << "  SetObjectTextColor(id," << o->text_color_drawtype  << ");" << '\n';
  if (o->text_size != 1)
    fp << "  SetObjectTextSize(id," << o->text_size  << ");" << '\n';

  if (o->user_data) {
    if (o->min_value != 0)
      fp << "  SetObjectAttribute(id,\"Axis.MinValue\"," << dtostr(o->min_value) << ");" << '\n';
    if (!feq(o->max_value, 100.0))
      fp << "  SetObjectAttribute(id,\"Axis.MaxValue\"," << dtostr(o->max_value) << ");" << '\n';
    if (o->lines != 11)
      fp << "  SetObjectAttribute(id,\"Axis.Lines\"," << o->lines << ");" << '\n';
    if (o->longquotient != 1)
      fp << "  SetObjectAttribute(id,\"Axis.LongQuotient\"," << o->longquotient << ");" << '\n';
    if (o->valuequotient != 1)
      fp << "  SetObjectAttribute(id,\"Axis.ValueQuotient\"," << o->valuequotient << ");" << '\n';
    if (!streq(o->format, "%3.0f"))
      fp << "  SetObjectAttribute(id,\"Axis.Format\",\"" << o->format << "\");" << '\n';
  } else {
    if (o->min_value != 0)
      fp << "  SetObjectAttribute(id,\"MinValue\"," << dtostr(o->min_value) << ");" << '\n';
    if (!feq(o->max_value, 100.0))
      fp << "  SetObjectAttribute(id,\"MaxValue\"," << dtostr(o->max_value) << ");" << '\n';
    if (o->lines != 11)
      fp << "  SetObjectAttribute(id,\"Lines\"," << o->lines << ");" << '\n';
    if (o->longquotient != 1)
      fp << "  SetObjectAttribute(id,\"LongQuotient\"," << o->longquotient << ");" << '\n';
    if (o->valuequotient != 1)
      fp << "  SetObjectAttribute(id,\"ValueQuotient\"," << o->valuequotient << ");" << '\n';
    if (!streq(o->format, "%3.0f"))
      fp << "  SetObjectAttribute(id,\"Format\",\"" << o->format << "\");" << '\n';
  }
  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, (char *)"  ");

  return 1;
}

int GlowExportScript::image(GrowImage* o)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << "# Image " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << "  id = CreateImage(\"" << o->image_filename << "\"," << dtostr(ll_x) << "," << dtostr(ll_y) << "," << dtostr(ur_x) << "," << dtostr(ur_y) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  return 1;
}

int GlowExportScript::window(GrowWindow* o)
{
  float ll_x, ll_y, ur_x, ur_y;

  ll_x = o->trf.x(o->ll.x, o->ll.y);
  ll_y = o->trf.y(o->ll.x, o->ll.y);
  ur_x = o->trf.x(o->ur.x, o->ur.y);
  ur_y = o->trf.y(o->ur.x, o->ur.y);

  fp << "# Window " << o->n_name << " (" << ll_x << "," << ll_y << "),(" << ur_x << "," << ur_y << ")" << '\n';
  fp << "  id = CreateWindow(" << dtostr(o->ll.x) << "," << dtostr(o->ll.y) << "," << dtostr(o->ur.x) << 
    "," << dtostr(o->ur.y) << ");" << '\n';
  if (o->trf.is_modified())
    fp << "  SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
        << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';
  if (!streq(o->n_name, ""))
    fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';

  if (!o->border)
    fp << "  SetObjectBorder(id,0);" << '\n';
  if (o->draw_type != glow_eDrawType_Line)
    fp << "  SetObjectBorderColor(id," << o->draw_type  << ");" << '\n';

  if (!streq(o->input_file_name, ""))
    fp << "  SetObjectAttribute(id,\"Window.FileName\",\"" << o->input_file_name << "\");" << '\n';
  if (!feq(o->window_scale, 1.0))
    fp << "  SetObjectAttribute(id,\"Window.Scale\"," << dtostr(o->window_scale) << ");" << '\n';
  if (o->vertical_scrollbar != 0)
    fp << "  SetObjectAttribute(id,\"Window.VerticalScrollbar\"," << o->vertical_scrollbar << ");" << '\n';
  if (o->horizontal_scrollbar != 0)
    fp << "  SetObjectAttribute(id,\"Window.HorizontalScrollbar\"," << o->horizontal_scrollbar << ");" << '\n';
  if (!feq(o->scrollbar_width, 0.5))
    fp << "  SetObjectAttribute(id,\"Window.ScrollbarWidth\"," << dtostr(o->scrollbar_width) << ");" << '\n';
  if (o->scrollbar_color != glow_eDrawType_LightGray)
    fp << "  SetObjectAttribute(id,\"Window.ScrollbarColor\"," << o->scrollbar_color << ");" << '\n';
  if (!streq(o->owner, ""))
    fp << "  SetObjectAttribute(id,\"Window.Owner\",\"" << o->owner << "\");" << '\n';

  return 1;
}

int GlowExportScript::group(GrowGroup* o)
{
  int sts;
  int sumsts = 0;

  fp << "# Group " << o->n_name << '\n';
  fp << "  SelectClear();" << '\n';

  for (int i = 0; i < o->nc->a.size(); i++) {
    if (o->nc->a[i]->type() != glow_eObjectType_Con) {
      sts = o->nc->a[i]->export_script(this);
      if (ODD(sts)) {
	fp << "  SelectAdd(id);" << '\n';
	sumsts = sts;
      }
    }
  }
  if (EVEN(sumsts))
    return 0;

  fp << "  id = GroupSelected();" << '\n';
  
  if (o->trf.is_modified())
    fp << "  SetObjectTransform(id," << dtostr(o->trf.a11) << "," << dtostr(o->trf.a12) << "," << dtostr(o->trf.a13) << "," 
        << dtostr(o->trf.a21) << "," << dtostr(o->trf.a22) << "," << dtostr(o->trf.a23) << "," << dtostr(o->trf.rotation) << ");" << '\n';

  fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';
  if (o->shadow)
    fp << "  SetObjectShadow(id,1);" << '\n';
  if (o->line_width != 0)
    fp << "  SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No)
    fp << "  SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << "  SetObjectAttribute(id,\"Transparency\"," << o->transparency << ");" << '\n';

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, (char *)"  ");
  return 1;
}

int GlowExportScript::toolbar(GrowToolbar* o)
{

  fp << "# Toolbar " << o->n_name << '\n';

  fp << "  id = CreateToolbar(\"" << o->nc->n_name << "\"," << dtostr(o->x_left) << "," << dtostr(o->y_low) << "," << dtostr(o->x_right) << "," << dtostr(o->y_high) << ");" << '\n';

  fp << "  SetObjectAttribute(id,\"Name\",\"" << o->n_name << "\");" << '\n';
  if (o->shadow)
    fp << "  SetObjectShadow(id,1);" << '\n';
  if (o->line_width != 0)
    fp << "  SetObjectLineWidth(id," << o->line_width << ");" << '\n';
  if (o->fill_drawtype != glow_eDrawType_No)
    fp << "  SetObjectFillColor(id," << o->fill_drawtype << ");" << '\n';
  if (!feq(o->transparency, 0.0))
    fp << "  SetObjectAttribute(id,\"Transparency\"," << o->transparency << ");" << '\n';

  if (userdata_script_cb && o->user_data) 
    userdata_script_cb(o->user_data, o, fp, (char *)"  ");
  return 1;
}

