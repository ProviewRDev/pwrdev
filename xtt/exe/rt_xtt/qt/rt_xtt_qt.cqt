/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2019 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

/* rt_xtt_qt.cpp -- Display plant and node hiererachy */

#include "co_dcli.h"
#include "co_string.h"
#include "co_syi.h"

#include "cow_login_qt.h"
#include "cow_qt_helpers.h"
//#include "cow_style_qt.h"
#include "cow_xhelp_qt.h"

#include "xtt_hotkey_qt.h"
#include "xtt_methodtoolbar_qt.h"
#include "xtt_xcolwind.h"
#include "xtt_xnav_qt.h"

#include "rt_xtt_qt.h"

#include <QApplication>
#include <QCloseEvent>
#include <QDesktopWidget>
#include <QInputDialog>
#include <QMenuBar>
#include <QVBoxLayout>

void XttQt::hotkey_Command(char* arg, void* userdata)
{
  Xtt* xtt = (Xtt*)userdata;
  xtt->hotkey_activate_command(arg);
}

void XttQt::hotkey_ToggleDig(char* arg, void* userdata)
{
  hotkey_activate_toggledig(arg);
}

void XttQt::hotkey_SetDig(char* arg, void* userdata)
{
  hotkey_activate_setdig(arg);
}

void XttQt::hotkey_ResetDig(char* arg, void* userdata)
{
  hotkey_activate_resetdig(arg);
}

bool XttQtWidget::eventFilter(QObject* obj, QEvent* event)
{
  return XttHotkey::event_handler(event, obj);
}

void XttQt::open_input_dialog(const char* text, const char* title,
    const char* init_text, void (*ok_cb)(Xtt*, char*))
{
  bool ok;
  QString str = QInputDialog::getText(toplevel, translate_utf8(title),
      translate_utf8(text), QLineEdit::Normal, fl(init_text), &ok);
  if (ok) {
    (ok_cb)(this, qPrintableLatin1(str));
  }
}

void XttQt::message(char severity, const char* msg)
{
  msg_label->setText(QString::fromLatin1(msg));
  if (!streq(msg, "")) {
    msg_label->setVisible(true);
  }
}

void XttQt::close(void* ctx, int terminate)
{
  XttQt* xtt = (XttQt*)ctx;
  char title[80];

  if (terminate) {
    if (!xtt->wow) {
      return;
    }

    strcpy(title, "Confirm");
    xtt->wow->DisplayQuestion(
        xtt, title, "Do you want to close", close_ok, 0, 0);
  } else {
    xtt->xnav->displayed = 0;
    xtt->toplevel->setVisible(false);
  }
}

void XttQt::set_dimension(void* ctx, int width, int height)
{
  XttQt* xtt = (XttQt*)ctx;
  xtt->toplevel->resize(width, height);
}

void XttQt::map(void* ctx)
{
  XttQt* xtt = (XttQt*)ctx;

  pop(xtt->toplevel);
  xtt->xnav->displayed = 1;
}

void XttQt::set_prompt(const char* prompt)
{
  if (streq(prompt, "")) {
    cmd_prompt->setVisible(false);
    msg_label->setVisible(true);
  } else {
    msg_label->setVisible(false);
    cmd_prompt->setText(QString::fromLatin1(prompt));
    cmd_prompt->setVisible(true);
  }
}

void XttQt::open_change_value()
{
  int sts;

  if (input_open) {
    cmd_entry->setVisible(false);
    set_prompt("");
    input_open = 0;
    return;
  }

  sts = xnav->check_attr_value();
  if (EVEN(sts)) {
    message('E', XNav::get_message(sts));
    return;
  }

  if (command_open) {
    command_open = 0;
  } else {
    cmd_entry->setVisible(true);
  }

  message(' ', "");
  cmd_entry->setFocus();

  cmd_entry->setText("");
  set_prompt(qPrintable(translate_utf8("value >")));
  input_open = 1;
}

void XttQtWidget::activate_change_value()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->open_change_value();
}

void XttQtWidget::activate_command()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  if (xtt->command_open) {
    xtt->cmd_entry->setVisible(false);
    xtt->set_prompt("");
    xtt->command_open = 0;
    return;
  }

  xtt->cmd_entry->setText("");

  if (xtt->input_open) {
    xtt->input_open = 0;
  } else {
    xtt->cmd_entry->setVisible(true);
  }
  xtt->message(' ', "");
  xtt->cmd_entry->setFocus();

  xtt->set_prompt("xtt >");
  xtt->command_open = 1;
}

void XttQtWidget::activate_print()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_print();
}

void XttQt::print()
{
  char title[120] = "Xtt ";
  char nodename[80];
  pwr_tStatus sts;

  syi_NodeName(&sts, nodename, sizeof(nodename));
  if (ODD(sts)) {
    strcat(title, nodename);
  }

  CoWowQt::CreateBrowPrintDialogQt(title, xnav->brow->ctx, ((XNavQt*)xnav)->brow_widget);
  if (sts == WOW__PRINTDIALOGDISABLED) {
    pwr_tFileName filename;
    pwr_tCmd cmd;

    dcli_translate_filename(filename, "$pwrp_tmp/xnav.ps");
    xnav->print(filename);

    sprintf(cmd, "$pwr_exe/rt_print.sh %s", filename);
    system(cmd);
  }
}

void XttQtWidget::activate_login()
{
  xtt->xnav->open_login();
}

void XttQtWidget::activate_logout()
{
  xtt->xnav->logout();
}

void XttQtWidget::activate_find()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_find();
}

void XttQtWidget::activate_findregex()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_findregex();
}

void XttQtWidget::activate_findnext()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_findnext();
}

void XttQtWidget::activate_collapse()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_collapse();
}

void XttQtWidget::activate_openobject()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_openobject();
}

void XttQtWidget::activate_openplc()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_openplc();
}

void XttQtWidget::activate_showcrossref()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->xnav->show_crossref();
}

void XttQtWidget::activate_opengraph()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_opengraph();
}

void XttQtWidget::activate_collect_insert()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_collect_insert();
}

void XttQtWidget::activate_collect_show()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->xnav->collect_show();
}

void XttQtWidget::activate_collect_remove()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->xnav->collect_remove();
}

void XttQtWidget::activate_collect_clear()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->xnav->collect_clear();
}

void XttQtWidget::activate_collect_opengraph()
{
  pwr_tCmd cmd = "open graph /collect";

  if (!xtt->xnav->is_authorized()) {
    return;
  }

  int showed = 0;
  if (xtt->xnav->brow->ctx != xtt->xnav->collect_brow->ctx) {
    xtt->xnav->collect_show();
    showed = 1;
  }

  xtt->xnav->command(cmd);

  if (showed) {
    // Hide
    xtt->xnav->collect_show();
  }
}

void XttQtWidget::activate_collect_window()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->xnav->collect_window(1, xcolwind_eType_Collect);
}

void XttQtWidget::activate_collect_new_window()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->xnav->collect_window(0, xcolwind_eType_Collect);
}

void XttQtWidget::activate_collect_signals()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->xnav->collect_window(0, xcolwind_eType_CollectSignals);
}

void XttQtWidget::activate_collect_iosignals()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->xnav->collect_window(0, xcolwind_eType_CollectIOSignals);
}

void XttQtWidget::activate_collect_open()
{
  pwr_tCmd cmd = "collect open";

  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->xnav->command(cmd);
}

void XttQtWidget::activate_advanceduser()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_advanceduser();
}

void XttQtWidget::activate_zoom_in()
{
  xtt->activate_zoom_in();
}

void XttQtWidget::activate_zoom_out()
{
  xtt->activate_zoom_out();
}

void XttQtWidget::activate_zoom_reset()
{
  xtt->xnav->unzoom();
}

void XttQtWidget::activate_help()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_help();
}

void XttQtWidget::activate_help_project()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_help_project();
}

void XttQtWidget::activate_help_navigator()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_help_navigator();
}

void XttQtWidget::activate_help_proview()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->activate_help_proview();
}

void XttQtWidget::activate_back()
{
  if (!xtt->xnav->is_authorized()) {
    return;
  }

  xtt->xnav->brow_push();
}

void XttQtWidget::focusInEvent(QFocusEvent* event)
{
  if (!xtt->focustimer.disabled()) {
    if (xtt->xnav) {
      xtt->xnav->set_inputfocus();
    }
    xtt->focustimer.disable(400);
  }

  QWidget::focusInEvent(event);
}

void XttQtWidget::valchanged_cmd_entry()
{
  if (xtt->cmd_entry->text().isEmpty()) {
    xtt->cmd_entry->setVisible(false);
    xtt->set_prompt("");
    xtt->input_open = 0;
    xtt->command_open = 0;
    xtt->xnav->set_inputfocus();
    xtt->message('E', "Input error, invalid character");
    return;
  }

  char* text = qPrintableLatin1(xtt->cmd_entry->text());

  if (xtt->input_open) {
    int sts = xtt->xnav->set_attr_value(text);
    xtt->cmd_entry->setVisible(false);
    xtt->set_prompt("");
    xtt->input_open = 0;
    xtt->xnav->set_inputfocus();
    if (EVEN(sts)) {
      xtt->message('E', XNav::get_message(sts));
    }
  } else if (xtt->command_open) {
    xtt->xnav->command(text);
    xtt->cmd_entry->setVisible(false);
    xtt->set_prompt("");
    xtt->command_open = 0;
    xtt->xnav->set_inputfocus();
  }
}

int main(int argc, char* argv[])
{
  log_setLevel(LOG_TRACE);
  int sts;

  QApplication app(argc, argv);
  // QApplication::setStyle(new PwrStyle());
  new XttQt(argc, argv, &sts);
  app.exec();
  exit(sts);
}

XttQt::~XttQt()
{
  delete cmd_recall;
  delete value_recall;
  delete hotkey;
  delete methodtoolbar;
  delete xnav;
}

void XttQtWidget::closeEvent(QCloseEvent* event)
{
  xtt->close(xtt,
      xtt->xnav->op || xtt->xnav->ge_main || xtt->xnav->multiview_main ? 0 : 1);
  event->ignore();
}

XttQt::XttQt(int argc, char* argv[], int* return_sts)
    : Xtt(&argc, &argv, return_sts)
{
  if (EVEN(*return_sts)) { // Set by the Xtt() constructor
    exit(*return_sts);
  }

  const int window_width = 400;
  const int window_height = 700;
  pwr_tStatus sts;
  char title[120] = "Xtt ";
  char nodename[80];

  setlocale(LC_TIME, "en_US");
  setlocale(LC_NUMERIC, "POSIX");

  syi_NodeName(&sts, nodename, sizeof(nodename));
  if (ODD(sts)) {
    strcat(title, nodename);
  }

  log_debug("%s ", argv[0]);
  for (int i = 1; i < argc; i++) {
    fprintf(stderr, "%s ", argv[i]);
  }
  fprintf(stderr, "\n");

  // Qt
  toplevel = new XttQtWidget(this);
  toplevel->setMinimumSize(window_width, window_height);
  toplevel->setWindowTitle(fl(title));
  toplevel->setAttribute(Qt::WA_DeleteOnClose);

  CoWowQt::SetWindowIcon(toplevel);

  QMenuBar* menu_bar = new QMenuBar();

  // File Entry
  QMenu* file = menu_bar->addMenu(translate_utf8("&File"));
  addMenuItem(
      toplevel, file, "&Print", SLOT(activate_print()), "", "$pwr_exe/wb_print.png");
  addMenuItem(toplevel, file, "&Login", SLOT(activate_login()));
  addMenuItem(toplevel, file, "Log&out", SLOT(activate_logout()));
  addMenuItem(
      toplevel, file, "&Close", SLOT(close()), "CTRL+W", "$pwr_exe/xtt_close.png");

  // Edit Entry
  QMenu* edit = menu_bar->addMenu(translate_utf8("&Edit"));
  // Submenu Search
  QMenu* edit_search = edit->addMenu(translate_utf8("&Search"));
  addMenuItem(
      toplevel, edit_search, "&Find Object", SLOT(activate_find()), "CTRL+F");
  addMenuItem(toplevel, edit_search, "Find &Regular expression",
      SLOT(activate_findregex()));
  addMenuItem(toplevel, edit_search, "Find &Next", SLOT(activate_findnext()),
      "CTRL+SHIFT+F");
  // End submenu

  addMenuItem(toplevel, edit, "Co&llapse", SLOT(activate_collapse()));

  // Functions menu
  QMenu* functions = menu_bar->addMenu(translate_utf8("&Functions"));
  addMenuItem(toplevel, functions, "&Open Object...",
      SLOT(activate_openobject()), "CTRL+A");
  addMenuItem(
      toplevel, functions, "Open &Program", SLOT(activate_openplc()), "CTRL+L");
  addMenuItem(toplevel, functions, "Open &ClassGraph",
      SLOT(activate_opengraph()), "CTRL+G");
  addMenuItem(toplevel, functions, "Show C&rossreferences",
      SLOT(activate_showcrossref()), "CTRL+R");
  addMenuItem(toplevel, functions, "Change &Value",
      SLOT(activate_change_value()), "CTRL+Q");
  addMenuItem(
      toplevel, functions, "Co&mmand", SLOT(activate_command()), "CTRL+B");

  // Submenu Search
  QMenu* functions_collect = functions->addMenu(translate_utf8("&Collect"));
  addMenuItem(toplevel, functions_collect, "&Insert",
      SLOT(activate_collect_insert()), "CTRL+V");
  addMenuItem(toplevel, functions_collect, "&Show",
      SLOT(activate_collect_show()), "CTRL+N");
  addMenuItem(
      toplevel, functions_collect, "&Remove", SLOT(activate_collect_remove()));
  addMenuItem(
      toplevel, functions_collect, "C&lear", SLOT(activate_collect_clear()));
  addMenuItem(toplevel, functions_collect, "O&pen Graph",
      SLOT(activate_collect_opengraph()));
  addMenuItem(toplevel, functions_collect, "&Copy to Window",
      SLOT(activate_collect_window()));
  addMenuItem(toplevel, functions_collect, "&New Window",
      SLOT(activate_collect_new_window()));
  addMenuItem(toplevel, functions_collect, "&Signals",
      SLOT(activate_collect_signals()), "CTRL+SHIFT+T");
  addMenuItem(toplevel, functions_collect, "&IO Signals",
      SLOT(activate_collect_iosignals()), "CTRL+T");
  addMenuItem(
      toplevel, functions_collect, "&Open", SLOT(activate_collect_open()));
  // End submenu

  addMenuItem(toplevel, functions, "&Advanced user",
      SLOT(activate_advanceduser()), "CTRL+U");

  // View menu
  QMenu* view = menu_bar->addMenu(translate_utf8("&View"));
  addMenuItem(toplevel, view, "Zoom &In", SLOT(activate_zoom_in()), "CTRL+I",
      "$pwr_exe/xtt_zoom_in.png");
  addMenuItem(toplevel, view, "Zoom &Out", SLOT(activate_zoom_out()), "CTRL+O",
      "$pwr_exe/xtt_zoom_out.png");
  addMenuItem(toplevel, view, "Zoom &Reset", SLOT(activate_zoom_reset()), "",
      "$pwr_exe/xtt_zoom_reset.png");

  // Menu Help
  QMenu* help = menu_bar->addMenu(translate_utf8("&Help"));
  addMenuItem(toplevel, help, "&Overview", SLOT(activate_help()), "CTRL+H",
      "$pwr_exe/xtt_help.png");
  addMenuItem(toplevel, help, "&Navigator", SLOT(activate_help_navigator()));
  addMenuItem(toplevel, help, "&Project", SLOT(activate_help_project()));
  addMenuItem(toplevel, help, "&About Proview", SLOT(activate_help_proview()));

  // Toolbar
  QToolBar* tools = new QToolBar();
  addToolItem(toplevel, tools, "Go back", SLOT(activate_back()), "$pwr_exe/xtt_arrowleft.png");
  QAction* tools_advuser = addToolItem(toplevel, tools, "Advanced user",
      SLOT(activate_advanceduser()), "$pwr_exe/xtt_advuser.png");
  addToolItem(toplevel, tools, "Zoom in", SLOT(activate_zoom_in()),
      "$pwr_exe/xtt_zoom_in.png");
  addToolItem(toplevel, tools, "Zoom out", SLOT(activate_zoom_out()),
      "$pwr_exe/xtt_zoom_out.png");
  addToolItem(toplevel, tools, "Zoom reset", SLOT(activate_zoom_reset()),
      "$pwr_exe/xtt_zoom_reset.png");

  // Toolbar
  methodtoolbar
      = new XttMethodToolbarQt(0, 0, ~pwr_mXttOpMethodsMask_ParentObjectGraph,
          ~pwr_mXttMntMethodsMask_RtNavigator, "");
  QToolBar* tools2 = (QToolBar*)((XttMethodToolbarQt*)methodtoolbar)->build();

  // Statusbar and cmd input
  QStatusBar* statusbar = new QStatusBar();
  msg_label = new QLabel("");
  cmd_prompt = new QLabel("value > ");

  cmd_recall = new CoWowRecall();
  value_recall = new CoWowRecall();
  cmd_entry = new CoWowEntryQt(cmd_recall);
  QObject::connect(cmd_entry, SIGNAL(returnPressed()), toplevel,
      SLOT(valchanged_cmd_entry()));

  statusbar->addWidget(msg_label);
  statusbar->addWidget(cmd_prompt);
  add_expanding(statusbar, cmd_entry);
  statusbar->setFixedHeight(25);

  statusbar->show();

  xnav = new XNavQt(this, "Plant", &brow_widget, (xnav_sStartMenu*)root_menu,
      opplace_str, op_close_button, &sts);
  xnav->message_cb = &xtt_message_cb;
  xnav->close_cb = &close;
  xnav->map_cb = &map;
  xnav->change_value_cb = &change_value;
  xnav->set_dimension_cb = &set_dimension;
  xnav->selection_changed_cb = &selection_changed;
  xnav->attach_audio = attach_audio;

  methodtoolbar->m_xnav = xnav;
  methodtoolbar->m_parent_ctx = xnav;
  methodtoolbar->get_select_cb = xnav_get_select;

  QVBoxLayout* vbox1 = new QVBoxLayout();
  vbox1->addWidget(menu_bar);
  vbox1->addWidget(tools);

  QLabel* xtt_image = new_image_label(toplevel, "$pwr_exe/pwr_logohalf2y.png");

  QHBoxLayout* hbox1 = new QHBoxLayout();
  hbox1->addLayout(vbox1);
  hbox1->addWidget(xtt_image);

  QVBoxLayout* vbox = new QVBoxLayout();
  vbox->addLayout(hbox1);
  vbox->addWidget(tools2);
  add_expanding(vbox, brow_widget);
  vbox->addWidget(statusbar);

  toplevel->setLayout(vbox);
  toplevel->show();

  msg_label->setVisible(false);
  cmd_prompt->setVisible(false);
  cmd_entry->setVisible(false);

  // Create help window
  CoXHelp* xhelp = new CoXHelpQt(this, xhelp_eUtility_Xtt, &sts);
  xhelp->open_URL_cb = open_URL_cb;
  CoXHelp::set_default(xhelp);

  if (!xnav->is_authorized(pwr_mAccess_AllRt, 0)) {
    xnav->open_login();
  }

  wow = new CoWowQt(toplevel);
  if (!quiet) {
    if (xnav->cologin) {
      // Set login window as parent to warranty as focus is left to parent.
      ((CoWowQt*)wow)->SetParent(((CoLoginQt*)xnav->cologin)->toplevel);
    }

    wow->DisplayWarranty();

    if (xnav->cologin) {
      ((CoWowQt*)wow)->SetParent(toplevel);
    }
  }

  timerid = wow->timer_new();

  // Start timer to check for qcom events
  timerid->add(1000, qcom_events, this);

  hotkey = new XttHotkey("$HOME/Rt_xtt");

  hotkey->register_action("SetDig", hotkey_SetDig, this);
  hotkey->register_action("ResetDig", hotkey_ResetDig, this);
  hotkey->register_action("ToggleDig", hotkey_ToggleDig, this);
  hotkey->register_action("Command", hotkey_Command, this);

  QApplication::desktop()->installEventFilter(toplevel);
  methodtoolbar->set_sensitive();

  if (select_opplace) {
    list_opplace();
  }

  if (xnav->gbl.advanced_user && no_advanceduser) {
    xnav->gbl.advanced_user = 0;
    tools_advuser->setVisible(false);
  }
}
