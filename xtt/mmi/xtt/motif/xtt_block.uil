! 
!  ProviewR   Open Source Process Control.
!  Copyright (C) 2005-2023 SSAB EMEA AB.
! 
!  This file is part of ProviewR.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with ProviewR. If not, see <http://www.gnu.org/licenses/>
! 
!  Linking ProviewR statically or dynamically with other modules is
!  making a combined work based on ProviewR. Thus, the terms and
!  conditions of the GNU General Public License cover the whole 
!  combination.
! 
!  In addition, as a special exception, the copyright holders of
!  ProviewR give you permission to, from the build function in the
!  ProviewR Configurator, combine ProviewR with modules generated by the
!  ProviewR PLC Editor to a PLC program, regardless of the license
!  terms of these modules. You may copy and distribute the resulting
!  combined work under the terms of your choice, provided that every 
!  copy of the combined work is accompanied by a complete copy of 
!  the source code of ProviewR (the version used to produce the
!  combined work), being distributed under the terms of the GNU 
!  General Public License plus this exception.
!
module xtt_block
        version = 'v1.0'
        names = case_sensitive
        objects = {
                XmSeparator = gadget ;
                }

include file 'inc_xtt.uil';

identifier
	blk_ctx;
procedure
	blk_activate_cancel(integer);
	blk_activate_apply(integer);
	blk_activate_ok(integer);
	blk_create_apply(integer);
	blk_create_ok(integer);
	blk_create_toggleA(integer);
	blk_create_toggleB(integer);
	blk_create_toggleC(integer);
	blk_create_toggleD(integer);
	blk_create_toggleNo(integer);

value
    pbWidth: 72;
    pbTopOffset: 8;
    menu_font : font ('-*-Helvetica-Bold-R-Normal--12-*-*-*-P-*-ISO8859-1');



object blk_window : XmMainWindow {
  arguments {
  };
  controls {
    XmForm adb;
  };
};


object adb: XmForm {
  arguments {
    XmNcancelButton = XmPushButton cancelPb;
  };
  controls {
    XmRadioBox radioBox;
    XmFrame pushButFrame;
  };
};

radioBox: XmRadioBox {
  arguments {
    XmNwidth = 150;
    XmNborderWidth = 0;
    XmNisHomogeneous = false;
    XmNleftAttachment = XmATTACH_FORM;
    XmNtopAttachment = XmATTACH_FORM;
    XmNbottomAttachment = XmATTACH_FORM;
    XmNleftOffset = 15;
    XmNbottomOffset = 50;
    XmNtopOffset = 0;
  };
  controls {
    XmToggleButton  {
      arguments {
	XmNx = 14;
	XmNy = 13;
	XmNlabelString = compound_string(c_Aalarm);
        XmNfontList = menu_font;
      };
      callbacks {
	MrmNcreateCallback = procedure blk_create_toggleA(blk_ctx) ;
      };
    };
    XmToggleButton {
      arguments {
	XmNx = 23;
	XmNy = 26;
	XmNlabelString = compound_string(c_Balarm);
        XmNfontList = menu_font;
      };
      callbacks {
	MrmNcreateCallback = procedure blk_create_toggleB(blk_ctx) ;
      };
    };
    XmToggleButton {
      arguments {
	XmNx = 46;
	XmNy = 64;
	XmNlabelString = compound_string(c_Calarm);
        XmNfontList = menu_font;
      };
      callbacks {
	MrmNcreateCallback = procedure blk_create_toggleC(blk_ctx) ;
      };
    };
    XmToggleButton {
      arguments {
	XmNx = 27;
	XmNy = 96;
	XmNlabelString = compound_string(c_Dalarm);
        XmNfontList = menu_font;
      };
      callbacks {
	MrmNcreateCallback = procedure blk_create_toggleD(blk_ctx) ;
      };
    };
    XmToggleButton {
      arguments {
	XmNx = 43;
	XmNy = 132;
	XmNlabelString = compound_string(c_NoBlock);
        XmNfontList = menu_font;
      };
      callbacks {
	MrmNcreateCallback = procedure blk_create_toggleNo(blk_ctx) ;
      };
    };
  };
};

pushButFrame: XmFrame {
  arguments {
    XmNheight = 50;
    XmNleftAttachment = XmATTACH_FORM;
    XmNtopOffset = 20;
    XmNtopWidget = XmRadioBox radioBox;
    XmNrightAttachment = XmATTACH_FORM;
    XmNbottomAttachment = XmATTACH_FORM;
    XmNshadowType = XmSHADOW_ETCHED_IN;
    XmNshadowThickness = 2;
    XmNmarginHeight = 3;
    XmNmarginWidth = 3;
  };
  controls {
    XmForm {
      arguments {
      };
      controls {
	XmPushButton okPb;
	XmPushButton savePb;
	XmPushButton cancelPb;
      };
    };
  };
};

okPb: XmPushButton {
  arguments {
    XmNlabelString = c_Ok;
    XmNleftAttachment = XmATTACH_FORM;
    XmNtopAttachment = XmATTACH_FORM;
    XmNleftOffset = 10;
    XmNtopOffset = pbTopOffset;
    XmNwidth = pbWidth;
    XmNfontList	= menu_font;
  };
  callbacks {
    XmNactivateCallback = procedure blk_activate_ok(blk_ctx) ;
    MrmNcreateCallback = procedure blk_create_ok(blk_ctx) ;
  };
};

savePb: XmPushButton {
  arguments {
    XmNlabelString = c_Apply;
    XmNleftAttachment = XmATTACH_POSITION;
    XmNtopAttachment = XmATTACH_FORM;
    XmNtopOffset = pbTopOffset;
    XmNwidth = pbWidth;
    XmNleftPosition = 42;
    XmNfontList	= menu_font;
  };
  callbacks {
    XmNactivateCallback = procedure blk_activate_apply(blk_ctx) ;
    MrmNcreateCallback = procedure blk_create_apply(blk_ctx) ;
  };
};
cancelPb: XmPushButton {
  arguments {
    XmNlabelString = c_Cancel;
    XmNleftAttachment = XmATTACH_NONE;
    XmNtopAttachment = XmATTACH_FORM;
    XmNleftOffset = 190;
    XmNtopOffset = pbTopOffset;
    XmNwidth = pbWidth;
    XmNx = 190;
    XmNrightAttachment = XmATTACH_FORM;
    XmNrightOffset = 10;
    XmNfontList	= menu_font;
  };
  callbacks {
    XmNactivateCallback = procedure blk_activate_cancel(blk_ctx) ;
  };
};


end module;





