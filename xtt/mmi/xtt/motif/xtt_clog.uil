! 
!  ProviewR   Open Source Process Control.
!  Copyright (C) 2005-2023 SSAB EMEA AB.
! 
!  This file is part of ProviewR.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with ProviewR. If not, see <http://www.gnu.org/licenses/>
! 
!  Linking ProviewR statically or dynamically with other modules is
!  making a combined work based on ProviewR. Thus, the terms and
!  conditions of the GNU General Public License cover the whole 
!  combination.
! 
!  In addition, as a special exception, the copyright holders of
!  ProviewR give you permission to, from the build function in the
!  ProviewR Configurator, combine ProviewR with modules generated by the
!  ProviewR PLC Editor to a PLC program, regardless of the license
!  terms of these modules. You may copy and distribute the resulting
!  combined work under the terms of your choice, provided that every 
!  copy of the combined work is accompanied by a complete copy of 
!  the source code of ProviewR (the version used to produce the
!  combined work), being distributed under the terms of the GNU 
!  General Public License plus this exception.
!
module rt_xtt_clog
        version = 'v1.0'
        names = case_sensitive
        objects = {
                XmSeparator = gadget ;
                }

include file 'inc_xtt.uil';

identifier
	clog_ctx;
procedure
	clog_activate_exit(integer);
	clog_activate_select_file(integer);
	clog_activate_next_file(integer);
	clog_activate_prev_file(integer);
	clog_activate_update(integer);
	clog_activate_zoom_in(integer);
	clog_activate_zoom_out(integer);
	clog_activate_zoom_reset(integer);
	clog_activate_filter(integer);
	clog_activate_help(integer);
	clog_activate_helpmsg(integer);
	clog_create_form(integer);

value
	menu_font : font ('-*-Helvetica-Bold-R-Normal--12-*-*-*-P-*-ISO8859-1');

!----------------------------------------
! First declare the 'top lclogl' widgets.  These are not controlled by
! any other widgets.  They are each fetched individually as needed.
!----------------------------------------

object  clog_window : XmMainWindow
{
  arguments
  {
    XmNx = 0;
    XmNy = 0;
  };
  controls
  {
     XmMenuBar	clog_menu;
     XmForm     clog_form;
  };
};


object clog_form : XmForm
{
  arguments
  {
     XmNwidth = 200;
     XmNheight = 200;
     XmNresizePolicy = XmRESIZE_NONE;
  };
  controls
  {
     XmPanedWindow clog_pane;
  };
};

object clog_menu : XmMenuBar
{
  arguments
  {
    XmNorientation 	= XmHORIZONTAL;
    XmNspacing  	= 15;
    XmNmenuHelpWidget 	= XmCascadeButton clog_help_entry; 
  };
  controls
  {
    XmCascadeButton clog_file_entry;
    XmCascadeButton clog_view_entry;
    XmCascadeButton clog_help_entry;
  };
};

object clog_file_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString  = c_File;
    XmNfontList	    = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Filter;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure clog_activate_filter(clog_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_SelectFile;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure clog_activate_select_file(clog_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_NextFile;
            XmNmnemonic = keysym('N');
	    XmNaccelerator = "Ctrl<Key>N";
	    XmNacceleratorText = compound_string('Ctrl+N');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure clog_activate_next_file(clog_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_PreviousFile;
            XmNmnemonic = keysym('P');
	    XmNaccelerator = "Ctrl<Key>P";
	    XmNacceleratorText = compound_string('Ctrl+P');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure clog_activate_prev_file(clog_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Update;
            XmNmnemonic = keysym('U');
	    XmNaccelerator = "Ctrl<Key>U";
	    XmNacceleratorText = compound_string('Ctrl+U');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure clog_activate_update(clog_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Close;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure clog_activate_exit(clog_ctx);
          };
	};
      };
    };
  };
};

object clog_view_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString = c_View;
    XmNfontList	   = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_in;
            XmNmnemonic = keysym('I');
	    XmNaccelerator = "Ctrl<Key>I";
	    XmNacceleratorText = compound_string('Ctrl+I');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure clog_activate_zoom_in(clog_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_out;
            XmNmnemonic = keysym('O');
	    XmNaccelerator = "Ctrl<Key>O";
	    XmNacceleratorText = compound_string('Ctrl+O');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure clog_activate_zoom_out(clog_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_reset;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure clog_activate_zoom_reset(clog_ctx);
          };
	};
      };
    };
  };
};

object clog_help_entry : XmCascadeButton      
{
  arguments
  {
      XmNlabelString = c_Help;
      XmNfontList    = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
            XmNlabelString = c_Consolelog;
            XmNfontList	   = menu_font;
          };
          callbacks
          {
            XmNactivateCallback = procedure clog_activate_help(clog_ctx);
          };
        };
        XmPushButton
        {
          arguments
          {
            XmNlabelString = c_Help_on_selected_msg;
            XmNfontList	   = menu_font;
          };
          callbacks
          {
            XmNactivateCallback = procedure clog_activate_helpmsg(clog_ctx);
          };
        };
      }; !Controls
    }; !Pulldown_menu
  }; !Controls
}; ! help_entry

object clog_pane : XmPanedWindow
{
   arguments
   {
     XmNleftAttachment 		= XmATTACH_FORM;
     XmNrightAttachment 	= XmATTACH_FORM;
     XmNbottomAttachment    	= XmATTACH_FORM;
     XmNtopAttachment    	= XmATTACH_FORM;
   };
   controls
   {
   };
   callbacks
   {
     MrmNcreateCallback = procedure clog_create_form( clog_ctx);
   };
};

!
!  Filter Dialog
!

value
	buttonWidth :		70; 
	buttonBottomOffset :	15;      
	buttonLeftOffset :	30;      
	cancelLeftPosition :	45; 
	titleTopOffset :	20;	
	titleLeftOffset :	30;	
	titleTitleLeftOffset :  40;	
	titleToggleTopOffset :  15;  
	toggleToggleTopOffset :	 2;


procedure
    clog_filter_tog_cr(any);
    clog_filter_string_cr(any);
    clog_filter_act_but_cb(any);


object filterForm : XmFormDialog {
    arguments {
	XmNdialogTitle = 'Filter';
        XmNwidth = 400;
        XmNheight = 300;
        XmNautoUnmanage = false;
	XmNnoResize = true;
        XmNbuttonFontList	= menu_font;
        XmNlabelFontList	= menu_font;
        XmNtextFontList	   	= menu_font;
    };
    controls {
        XmLabel		severityTitle;
        XmToggleButton  success;
        XmToggleButton  info;
        XmToggleButton  warning;
        XmToggleButton  error;
        XmToggleButton  fatal;
        XmToggleButton  text;
        XmLabel		stringTitle;
	XmText		string;
        XmPushButton	okPb;
        XmPushButton	applyPb;
        XmPushButton	cancelPb;
    };
};




object severityTitle : XmLabel {
    arguments {
        XmNlabelString = 'Message Severity';
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = titleTopOffset;
        XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = titleTitleLeftOffset;
    };
};


object success : XmToggleButton {
    arguments {
        XmNlabelString = 'Success';
	XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = titleTopOffset;
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel severityTitle;
	XmNleftOffset = buttonLeftOffset;
	XmNuserData = 1;
    };
    controls {
    };
    callbacks {
	MrmNcreateCallback = procedure clog_filter_tog_cr(clog_ctx);
    };
};


object info : XmToggleButton {
    arguments {
        XmNlabelString = 'Info';
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmToggleButton success;
	XmNtopOffset = toggleToggleTopOffset;
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel severityTitle;
	XmNleftOffset = buttonLeftOffset;
	XmNuserData = 2;
    };
    controls {
    };
    callbacks {
	MrmNcreateCallback = procedure clog_filter_tog_cr(clog_ctx);
    };
};


object warning : XmToggleButton {
    arguments {
        XmNlabelString = 'Warning';
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmToggleButton info;
	XmNtopOffset = toggleToggleTopOffset;
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel severityTitle;
	XmNleftOffset = buttonLeftOffset;
	XmNuserData = 3;
    };
    controls {
    };
    callbacks {
	MrmNcreateCallback = procedure clog_filter_tog_cr(clog_ctx);
    };
};


object error : XmToggleButton {
    arguments {
        XmNlabelString = 'Error';
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmToggleButton warning;
	XmNtopOffset = toggleToggleTopOffset;
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel severityTitle;
	XmNleftOffset = buttonLeftOffset;
	XmNuserData = 4;
    };
    controls {
    };
    callbacks {
	MrmNcreateCallback = procedure clog_filter_tog_cr(clog_ctx);
    };
};

object fatal : XmToggleButton {
    arguments {
        XmNlabelString = 'Fatal';
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmToggleButton error;
	XmNtopOffset = toggleToggleTopOffset;
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel severityTitle;
	XmNleftOffset = buttonLeftOffset;
	XmNuserData = 5;
    };
    controls {
    };
    callbacks {
	MrmNcreateCallback = procedure clog_filter_tog_cr(clog_ctx);
    };
};

object text : XmToggleButton {
    arguments {
        XmNlabelString = 'Text';
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmToggleButton fatal;
	XmNtopOffset = toggleToggleTopOffset;
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel severityTitle;
	XmNleftOffset = buttonLeftOffset;
	XmNuserData = 6;
    };
    controls {
    };
    callbacks {
	MrmNcreateCallback = procedure clog_filter_tog_cr(clog_ctx);
    };
};

object stringTitle : XmLabel {
    arguments {
        XmNlabelString = 'String';
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmToggleButton text;
        XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = titleTitleLeftOffset;
    };
};

object string : XmText
{
   arguments
   {
	XmNtopAttachment = XmATTACH_OPPOSITE_WIDGET;
	XmNtopWidget = XmLabel stringTitle;
	XmNtopOffset = toggleToggleTopOffset;
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmLabel severityTitle;
	XmNleftOffset = buttonLeftOffset;
        XmNrightAttachment = XmATTACH_FORM;
        XmNrightOffset = 10;
        XmNrows 		= 1;
        XmNborderWidth		= 0;
        XmNshadowThickness	= 1;
        XmNheight		= 30;
        XmNfontList	   	= menu_font;
   };
   controls
   {
   };
   callbacks
   {
	MrmNcreateCallback = procedure clog_filter_string_cr(clog_ctx);
   };
};

!----------------------------
object	okPb : XmPushButton {
	
    arguments {	
	XmNlabelString = 'OK';
	XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = buttonLeftOffset; 
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = buttonBottomOffset;
	XmNwidth = buttonWidth;
	XmNuserData = 1;
	};
    callbacks {
	XmNactivateCallback = procedure clog_filter_act_but_cb(clog_ctx); 
	};
};


object	applyPb  : XmPushButton {
	
    arguments {
	XmNlabelString = 'Apply';
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = cancelLeftPosition;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = buttonBottomOffset;
	XmNwidth = buttonWidth;
	XmNuserData = 2;
	};
    callbacks {
	XmNactivateCallback = procedure clog_filter_act_but_cb(clog_ctx); 
	};
};

object	cancelPb   : XmPushButton {
	
    arguments {
	XmNlabelString = 'Cancel';
	XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = buttonLeftOffset;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = buttonBottomOffset;
	XmNwidth = buttonWidth;
	XmNuserData = 3;
	};
    callbacks {
	XmNactivateCallback = procedure clog_filter_act_but_cb(clog_ctx); 
	};
};



!-----------------------------------------------------------------
! 
! File selection window
!
!________________________________________________________________
procedure
    clog_filesel_ok_cb(any);
    clog_filesel_cancel_cb(any);
    clog_filesel_list_cr(any);


object fileselForm : XmFormDialog {
    arguments {
	XmNwidth = 320;
	XmNheight = 350;
        XmNdialogTitle = 'File selection';
        XmNdefaultButton = XmPushButton fileselOk;
        XmNcancelButton = XmPushButton fileselCancel;
        XmNbuttonFontList	   	= menu_font;
        XmNlabelFontList	   	= menu_font;
        XmNautoUnmanage = false;
        XmNtextFontList	   	= menu_font;
    };
    controls {
	XmPushButton fileselOk;
        XmPushButton fileselApply;
        XmPushButton fileselCancel;
        XmScrolledList fileselList;
    };
};



object fileselOk : XmPushButton {
    arguments {
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 20;
        XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 20;
	XmNwidth = 80;
        XmNlabelString = 'OK';
	XmNuserData = 1;
    };
    controls {
    };
    callbacks {
	XmNactivateCallback = procedure clog_filesel_ok_cb(clog_ctx); 
    };
};


object fileselApply : XmPushButton {
    arguments {
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 20;
        XmNleftAttachment = XmATTACH_WIDGET;
	XmNleftWidget = XmPushButton fileselOk;
	XmNleftOffset = 10;
	XmNwidth = 80;
        XmNlabelString = 'Apply';
	XmNuserData = 2;
    };
    controls {
    };
    callbacks {
	XmNactivateCallback = procedure clog_filesel_ok_cb(clog_ctx); 
    };
};


object fileselCancel : XmPushButton {
    arguments {
	XmNwidth = 80;
        XmNlabelString = 'Cancel';
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 20;
        XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 20;
    };
    callbacks {
	XmNactivateCallback = procedure clog_filesel_cancel_cb(clog_ctx); 
    };
};

object fileselList : XmScrolledList {
    arguments {
	XmNbottomAttachment = XmATTACH_WIDGET;
	XmNbottomWidget = XmPushButton fileselOk;
	XmNbottomOffset = 15;
        XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 5;
        XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 5;
        XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 5;
	XmNselectionPolicy = XmEXTENDED_SELECT;
        XmNfontList	   	= menu_font;
    };
    controls {
    };
    callbacks {
	MrmNcreateCallback = procedure clog_filesel_list_cr(clog_ctx);	
    };
};



end module;
