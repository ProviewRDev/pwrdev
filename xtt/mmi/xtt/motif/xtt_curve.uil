! 
!  ProviewR   Open Source Process Control.
!  Copyright (C) 2005-2023 SSAB EMEA AB.
! 
!  This file is part of ProviewR.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with ProviewR. If not, see <http://www.gnu.org/licenses/>
! 
!  Linking ProviewR statically or dynamically with other modules is
!  making a combined work based on ProviewR. Thus, the terms and
!  conditions of the GNU General Public License cover the whole 
!  combination.
! 
!  In addition, as a special exception, the copyright holders of
!  ProviewR give you permission to, from the build function in the
!  ProviewR Configurator, combine ProviewR with modules generated by the
!  ProviewR PLC Editor to a PLC program, regardless of the license
!  terms of these modules. You may copy and distribute the resulting
!  combined work under the terms of your choice, provided that every 
!  copy of the combined work is accompanied by a complete copy of 
!  the source code of ProviewR (the version used to produce the
!  combined work), being distributed under the terms of the GNU 
!  General Public License plus this exception.
!
module ge_curve
        version = 'v1.0'
        names = case_sensitive
        objects = {
                XmSeparator = gadget ;
                }

include file 'inc_xtt.uil';

identifier
	gec_ctx;
procedure
	gec_activate_exit(integer);
	gec_activate_configure(integer);
	gec_activate_print(integer);
	gec_activate_zoomin(integer);
	gec_activate_zoomout(integer);
	gec_activate_zoomreset(integer);
	gec_activate_background(integer);
	gec_activate_showname(integer);
	gec_activate_filledcurves(integer);
	gec_activate_xlimits(integer);
	gec_activate_help(integer);
	gec_create_pane(integer);
	gec_create_nameform(integer);
	gec_create_growform(integer);
	gec_create_curveform(integer);
        gec_create_minmax_textmin(integer); 
        gec_create_minmax_textmax(integer); 
        gec_activate_minmax_ok(integer);

value
	menu_font : font ('-*-Helvetica-Bold-R-Normal--12-*-*-*-P-*-ISO8859-1');

!----------------------------------------
! First declare the 'top level' widgets.  These are not controlled by
! any other widgets.  They are each fetched individually as needed.
!----------------------------------------

object  ge_curve_window : XmMainWindow
{
  arguments
  {
    XmNx = 0;
    XmNy = 0;
    XmNwidth = 450;
    XmNheight = 400;
  };
  controls
  {
     XmMenuBar	curve_menu;
     XmPanedWindow  main_pane;
  };
};


object main_pane : XmPanedWindow
{
   arguments
   {
     XmNtraversalOn = false;
   };
   controls
   {
     XmPanedWindow name_form;
     XmForm curve_form;
   };
  callbacks
  {
    MrmNcreateCallback = procedure gec_create_pane(gec_ctx);
  };
};

object name_form: XmPanedWindow
{
  arguments
  {
!    XmNleftAttachment 	= 	XmATTACH_FORM;
!    XmNbottomAttachment    	= XmATTACH_FORM;
!    XmNtopAttachment    	= XmATTACH_FORM;
    XmNwidth = 200;
  };
  callbacks
  {
    MrmNcreateCallback = procedure gec_create_nameform(gec_ctx);
  };
};

object curve_form : XmForm
{
  arguments
  {
!     XmNresizePolicy = XmRESIZE_NONE;
  };
  controls
  {
     XmPanedWindow     grow_form;
     XmPanedWindow     growcurve_form;
  };
};

object growcurve_form : XmPanedWindow
{
  arguments
  {
    XmNleftAttachment 	= 	XmATTACH_WIDGET;
    XmNleftWidget 	= 	XmPanedWindow grow_form;
    XmNrightAttachment 	= 	XmATTACH_FORM;
    XmNbottomAttachment    	= XmATTACH_FORM;
    XmNtopAttachment    	= XmATTACH_FORM;
  };
  callbacks
  {
    MrmNcreateCallback = procedure gec_create_curveform(gec_ctx);
  };
};

object grow_form : XmPanedWindow
{
  arguments
  {
    XmNleftAttachment 	= 	XmATTACH_FORM;
    XmNbottomAttachment    	= XmATTACH_FORM;
    XmNtopAttachment    	= XmATTACH_FORM;
    XmNwidth = 200;
  };
  callbacks
  {
    MrmNcreateCallback = procedure gec_create_growform(gec_ctx);
  };
};

object curve_menu : XmMenuBar
{
  arguments
  {
    XmNorientation 	= XmHORIZONTAL;
    XmNspacing  	= 15;
    XmNmenuHelpWidget 	= XmCascadeButton help_entry; 
  };
  controls
  {
    XmCascadeButton file_entry;
    XmCascadeButton view_entry;
    XmCascadeButton help_entry;
  };
};

object file_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString  = c_File;
    XmNfontList	    = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Refresh;
            XmNmnemonic = keysym('R');
	    XmNaccelerator = "Ctrl<Key>R";
	    XmNacceleratorText = compound_string('Ctrl+R');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure gec_activate_configure(gec_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Print;
            XmNmnemonic = keysym('P');
	    XmNaccelerator = "Ctrl<Key>P";
	    XmNacceleratorText = compound_string('Ctrl+P');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure gec_activate_print(gec_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Close;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure gec_activate_exit(gec_ctx);
          };
	};
      };
    };
  };
};

object view_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString = c_View;
    XmNfontList	   = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_in;
            XmNmnemonic = keysym('i');
	    XmNaccelerator = "Ctrl<Key>I";
	    XmNacceleratorText = compound_string('Ctrl+I');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure gec_activate_zoomin(gec_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_out;
            XmNmnemonic = keysym('o');
	    XmNaccelerator = "Ctrl<Key>O";
	    XmNacceleratorText = compound_string('Ctrl+O');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure gec_activate_zoomout(gec_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_reset;
            XmNmnemonic = keysym('r');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure gec_activate_zoomreset(gec_ctx);
          };
	};
        XmToggleButton
        {
          arguments
          {
  	    XmNlabelString = c_Bright_background;
            XmNmnemonic = keysym('B');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNvalueChangedCallback = procedure gec_activate_background(gec_ctx);
          };
	};
        XmToggleButton
        {
          arguments
          {
  	    XmNlabelString = c_Show_names;
            XmNmnemonic = keysym('S');
	    XmNaccelerator = "Ctrl<Key>W";
	    XmNacceleratorText = compound_string('Ctrl+W');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNvalueChangedCallback = procedure gec_activate_showname(gec_ctx);
          };
	};
        XmToggleButton
        {
          arguments
          {
  	    XmNlabelString = c_Filled_curves;
            XmNmnemonic = keysym('F');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNvalueChangedCallback = procedure gec_activate_filledcurves(gec_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_X_axis_limits;
            XmNmnemonic = keysym('X');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure gec_activate_xlimits(gec_ctx);
          };
	};
      };
    };
  };
};


object help_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString = c_Help;
    XmNfontList	   = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Help;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
	    XmNactivateCallback = procedure gec_activate_help(gec_ctx);
          };
	};
      };
    };
  };
};

!
!-----------------------------------------------------------------
! 
! Min/Max-value Dialog box
!
!________________________________________________________________
object   minmax_dialog : XmFormDialog
{
  arguments
  {
     XmNnoResize = true;
     XmNwidth = 400;
     XmNheight = 150;
     XmNdefaultPosition = true;
!     XmNautoUnmanage     = false;
     XmNdialogTitle = k_Min_Max_value;
     XmNdefaultButton = minmax_ok;
     XmNbuttonFontList	   	= menu_font;
     XmNlabelFontList	   	= menu_font;
     XmNtextFontList	   	= menu_font;
  };
  controls
  {
     XmLabel	    minmax_label1;
     XmLabel	    minmax_label2;
     XmTextField    minmax_text1;
     XmTextField    minmax_text2;
     XmPushButton   minmax_ok;
     XmPushButton   minmax_cancel;
  };
}; 

object minmax_label1 : XmLabel
{
  arguments
  {
     XmNx = 10;
     XmNy = 10;
     XmNlabelString = k_MinValue;
  };
};

object minmax_label2 : XmLabel
{
  arguments
  {
     XmNx = 10;
     XmNy = 40;
     XmNlabelString = k_MaxValue;
  };
};

object minmax_text1 : XmTextField
{
  arguments
  {
     XmNx = 150;
     XmNy = 10;
  };
  callbacks
  {
     MrmNcreateCallback = procedure gec_create_minmax_textmin( gec_ctx); 
  };
};

object minmax_text2 : XmTextField
{
  arguments
  {
     XmNx = 150;
     XmNy = 40;
  };
  callbacks
  {
     MrmNcreateCallback = procedure gec_create_minmax_textmax( gec_ctx); 
  };
};

object minmax_ok : XmPushButton
{
  arguments
  {
     XmNwidth = 80;
     XmNx = 20;
     XmNy = 100;
     XmNlabelString = k_Ok;
  };
  callbacks
  { 
     XmNactivateCallback = procedure gec_activate_minmax_ok( gec_ctx); 
  };
};

object minmax_cancel : XmPushButton
{
  arguments
  {
     XmNwidth = 80;
     XmNx = 280;
     XmNy = 100;
     XmNlabelString = k_Cancel;
  };
};


end module;











