! 
!  ProviewR   Open Source Process Control.
!  Copyright (C) 2005-2022 SSAB EMEA AB.
! 
!  This file is part of ProviewR.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with ProviewR. If not, see <http://www.gnu.org/licenses/>
! 
!  Linking ProviewR statically or dynamically with other modules is
!  making a combined work based on ProviewR. Thus, the terms and
!  conditions of the GNU General Public License cover the whole 
!  combination.
! 
!  In addition, as a special exception, the copyright holders of
!  ProviewR give you permission to, from the build function in the
!  ProviewR Configurator, combine ProviewR with modules generated by the
!  ProviewR PLC Editor to a PLC program, regardless of the license
!  terms of these modules. You may copy and distribute the resulting
!  combined work under the terms of your choice, provided that every 
!  copy of the combined work is accompanied by a complete copy of 
!  the source code of ProviewR (the version used to produce the
!  combined work), being distributed under the terms of the GNU 
!  General Public License plus this exception.
!
module rt_xtt
        version = 'v1.0'
        names = case_sensitive
        objects = {
                XmSeparator = gadget ;
                }

include file 'inc_xtt.uil';

identifier
	xtt_ctx;
procedure
	xtt_activate_exit(integer);
	xtt_activate_print(integer);
	xtt_activate_find(integer);
	xtt_activate_findregex(integer);
	xtt_activate_findnext(integer);
	xtt_activate_collapse(integer);
	xtt_activate_openplc(integer);
	xtt_activate_openobject(integer);
	xtt_activate_opengraph(integer);
	xtt_activate_showcrossref(integer);
	xtt_activate_change_value(integer);
	xtt_activate_command(integer);
	xtt_activate_collect_insert(integer);
	xtt_activate_collect_remove(integer);
	xtt_activate_collect_clear(integer);
	xtt_activate_collect_show(integer);
	xtt_activate_advanceduser(integer);
	xtt_activate_zoom_in(integer);
	xtt_activate_zoom_out(integer);
	xtt_activate_zoom_reset(integer);
	xtt_activate_help(integer);
	xtt_activate_help_project(integer);
	xtt_activate_help_proview(integer);
	xtt_create_msg_label(integer);
	xtt_create_cmd_prompt(integer);
	xtt_create_cmd_input(integer);
	xtt_create_xnav_form(integer);
	xtt_create_india_label(integer); 
	xtt_create_india_text(integer); 
	xtt_activate_india_ok(integer); 
	xtt_activate_india_cancel(integer); 
value
	menu_font : font ('-*-Helvetica-Bold-R-Normal--12-*-*-*-P-*-ISO8859-1');

!----------------------------------------
! First declare the 'top level' widgets.  These are not controlled by
! any other widgets.  They are each fetched individually as needed.
!----------------------------------------

object  xtt_window : XmMainWindow
{
  arguments
  {
    XmNx = 0;
    XmNy = 0;
  };
  controls
  {
     XmMenuBar	xtt_menu;
     XmForm     form;
  };
};


object form : XmForm
{
  arguments
  {
     XmNwidth = 200;
     XmNheight = 200;
     XmNresizePolicy = XmRESIZE_NONE;
  };
  controls
  {
     XmPanedWindow xnav_form;
     XmLabel	msg_label;
     XmText	cmd_input;
     XmLabel	cmd_prompt;
  };
};

object xtt_menu : XmMenuBar
{
  arguments
  {
    XmNorientation 	= XmHORIZONTAL;
    XmNspacing  	= 15;
    XmNmenuHelpWidget 	= XmCascadeButton help_entry; 
  };
  controls
  {
    XmCascadeButton file_entry;
    XmCascadeButton edit_entry;
    XmCascadeButton functions_entry;
    XmCascadeButton view_entry;
    XmCascadeButton help_entry;
  };
};

object file_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString  = c_File;
    XmNfontList	    = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
            XmNlabelString = c_Print;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_print(xtt_ctx);
          };
        };
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Close;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_exit(xtt_ctx);
          };
	};
      };
    };
  };
};

object edit_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString  = c_Edit;
    XmNfontList	    = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmCascadeButton 
        {
          arguments 
          {
	    XmNlabelString = c_Search;
	    XmNmnemonic         = keysym("S");
            XmNfontList	   = menu_font;
          };
          controls 
          {
	    XmPulldownMenu 
            {
	      arguments 
              {
	      };
	      controls 
              {
	        XmPushButton 
                {
	          arguments 
                  {
		    XmNlabelString = c_Find_Object;
		    XmNmnemonic         = keysym("F");
	            XmNaccelerator = "Ctrl<Key>F";
	            XmNacceleratorText = compound_string('Ctrl+F');
                    XmNfontList	   = menu_font;
	          };
	          callbacks 
                  { 
		    XmNactivateCallback = procedure xtt_activate_find(xtt_ctx);
	          };
	        };
	        XmPushButton 
                {
	          arguments 
                  {
		    XmNlabelString = c_Find_Regular_expression;
		    XmNmnemonic         = keysym("i");
                    XmNfontList	   = menu_font;
	          };
	          callbacks 
                  { 
		    XmNactivateCallback = procedure xtt_activate_findregex(xtt_ctx);
	          };
	        };
	        XmPushButton 
                {
	          arguments 
                  {
		    XmNlabelString = c_Find_Next;
		    XmNmnemonic         = keysym("N");
	            XmNaccelerator = "Shift Ctrl<Key>F";
	            XmNacceleratorText = compound_string('Ctrl+Shift+F');
                    XmNfontList	   = menu_font;
	          };
	          callbacks 
                  { 
		    XmNactivateCallback = procedure xtt_activate_findnext(xtt_ctx);
	          };
	        };
	      };
	    };
          };
        };
        XmPushButton
        {
          arguments
          {
            XmNlabelString = c_Collapse;
            XmNmnemonic = keysym('l');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_collapse(xtt_ctx);
          };
        };
      };
    };
  };
};

object functions_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString = c_Functions;
    XmNfontList	   = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Open_Object;
            XmNmnemonic = keysym('b');
	    XmNaccelerator = "Ctrl<Key>A";
	    XmNacceleratorText = compound_string('Ctrl+A');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_openobject(xtt_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Open_Plc;
            XmNmnemonic = keysym('L');
	    XmNaccelerator = "Ctrl<Key>L";
	    XmNacceleratorText = compound_string('Ctrl+L');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_openplc(xtt_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Open_ClassGraph;
            XmNmnemonic = keysym('p');
	    XmNaccelerator = "Ctrl<Key>G";
	    XmNacceleratorText = compound_string('Ctrl+G');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_opengraph(xtt_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Show_Crossreferences;
            XmNmnemonic = keysym('R');
	    XmNaccelerator = "Ctrl<Key>R";
	    XmNacceleratorText = compound_string('Ctrl+R');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_showcrossref(xtt_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Change_Value;
            XmNmnemonic = keysym('H');
	    XmNaccelerator = "Ctrl<Key>Q";
	    XmNacceleratorText = compound_string('Ctrl+Q');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_change_value(xtt_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Command;
            XmNmnemonic = keysym('o');
	    XmNaccelerator = "Ctrl<Key>B";
	    XmNacceleratorText = compound_string('Ctrl+B');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_command(xtt_ctx);
          };
	};
        XmCascadeButton 
        {
          arguments 
          {
	    XmNlabelString = c_Collect;
	    XmNmnemonic         = keysym("C");
            XmNfontList	   = menu_font;
          };
          controls 
          {
	    XmPulldownMenu 
            {
	      arguments 
              {
	      };
	      controls 
              {
                XmPushButton
                {
                  arguments
                  {
  	            XmNlabelString = c_Insert;
                    XmNmnemonic = keysym('I');
	            XmNaccelerator = "Ctrl<Key>V";
	            XmNacceleratorText = compound_string('Ctrl+V');
                    XmNfontList	   = menu_font;
	          };
	          callbacks
                  {
                    XmNactivateCallback = procedure xtt_activate_collect_insert(xtt_ctx);
                  };
	        };
                XmPushButton
                {
                  arguments
                  {
  	            XmNlabelString = c_Show;
                    XmNmnemonic = keysym('s');
	            XmNaccelerator = "Ctrl<Key>N";
	            XmNacceleratorText = compound_string('Ctrl+N');
                    XmNfontList	   = menu_font;
	          };
	          callbacks
                  {
                    XmNactivateCallback = procedure xtt_activate_collect_show(xtt_ctx);
                  };
	        };
                XmPushButton
                {
                  arguments
                  {
  	            XmNlabelString = c_Remove;
                    XmNmnemonic = keysym('r');
                    XmNfontList	   = menu_font;
	          };
	          callbacks
                  {
                    XmNactivateCallback = procedure xtt_activate_collect_remove(xtt_ctx);
                  };
	        };
                XmPushButton
                {
                  arguments
                  {
  	            XmNlabelString = c_Clear;
                    XmNmnemonic = keysym('c');
                    XmNfontList	   = menu_font;
	          };
	          callbacks
                  {
                    XmNactivateCallback = procedure xtt_activate_collect_clear(xtt_ctx);
                  };
	        };
              };
	    };
	  };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Advanced_user;
            XmNmnemonic = keysym('A');
	    XmNaccelerator = "Ctrl<Key>U";
	    XmNacceleratorText = compound_string('Ctrl+U');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_advanceduser(xtt_ctx);
          };
	};
      };
    };
  };
};

object view_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString = c_View;
    XmNfontList	   = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_in;
            XmNmnemonic = keysym('I');
	    XmNaccelerator = "Ctrl<Key>I";
	    XmNacceleratorText = compound_string('Ctrl+I');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_zoom_in(xtt_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_out;
            XmNmnemonic = keysym('O');
	    XmNaccelerator = "Ctrl<Key>O";
	    XmNacceleratorText = compound_string('Ctrl+O');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_zoom_out(xtt_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_reset;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xtt_activate_zoom_reset(xtt_ctx);
          };
	};
      };
    };
  };
};


object help_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString = c_Help;
    XmNfontList	   = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Overview;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
	    XmNactivateCallback = procedure xtt_activate_help(xtt_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Project;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
	    XmNactivateCallback = procedure xtt_activate_help_project(xtt_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_About_Proview;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
	    XmNactivateCallback = procedure xtt_activate_help_proview(xtt_ctx);
          };
	};
      };
    };
  };
};

object xnav_form : XmPanedWindow
{
   arguments
   {
     XmNleftAttachment 	= 	XmATTACH_FORM;
     XmNrightAttachment 	= XmATTACH_FORM;
     XmNbottomAttachment    	= XmATTACH_FORM;
     XmNbottomOffset        	= 50;
     XmNtopAttachment    	= XmATTACH_FORM;
   };
   controls
   {
   };
   callbacks
   {
     MrmNcreateCallback = procedure xtt_create_xnav_form( xtt_ctx);
   };
};

object msg_label : XmLabel
{
   arguments
   {
     XmNborderWidth 		= 0;
     XmNrightAttachment 	= XmATTACH_FORM;
     XmNleftAttachment 		= XmATTACH_FORM;
     XmNbottomAttachment    	= XmATTACH_FORM;
     XmNalignment		= XmALIGNMENT_BEGINNING;
     XmNlabelString		= "";
     XmNheight			= 20;
     XmNfontList	   		= menu_font;
   };
   controls
   {
   };
   callbacks
   {
     MrmNcreateCallback = procedure xtt_create_msg_label( xtt_ctx);
   };
};

object cmd_prompt : XmLabel
{
   arguments
   {
!      XmNborderWidth 		= 1;
      XmNleftAttachment 	= XmATTACH_FORM;
      XmNbottomAttachment    	= XmATTACH_FORM;
      XmNbottomOffset        	= 20;
      XmNtopAttachment    	= XmATTACH_WIDGET;
      XmNtopWidget		= XmPanedWindow xnav_form;
      XmNalignment		= XmALIGNMENT_BEGINNING;
      XmNlabelString		= "";
      XmNwidth			= 50;
      XmNheight			= 30;
      XmNfontList	   	= menu_font;
   };
   controls
   {
   };
   callbacks
   {
     MrmNcreateCallback = procedure xtt_create_cmd_prompt ( xtt_ctx) ;
   };
};

object cmd_input : XmText
{
   arguments
   {
      XmNleftAttachment 	= XmATTACH_FORM;
      XmNleftOffset        	= 50;
      XmNrightAttachment 	= XmATTACH_FORM;
      XmNbottomAttachment    	= XmATTACH_FORM;
      XmNbottomOffset        	= 20;
      XmNtopAttachment    	= XmATTACH_WIDGET;
      XmNtopWidget		= XmPanedWindow xnav_form;
!      XmNeditMode		= XmMULTI_LINE_EDIT;
      XmNrows 			= 1;
      XmNborderWidth		= 0;
      XmNshadowThickness	= 0;
      XmNheight			= 30;
      XmNfontList	   	= menu_font;
   };
   controls
   {
   };
   callbacks
   {
     MrmNcreateCallback = procedure xtt_create_cmd_input( xtt_ctx);
   };
};

!
!-----------------------------------------------------------------
! 
! Input Dialog box
!
!________________________________________________________________
object   input_dialog : XmFormDialog
{
  arguments
  {
     XmNnoResize = true;
     XmNwidth = 400;
     XmNheight = 150;
     XmNdefaultPosition = true;
     XmNautoUnmanage     = false;
     XmNdialogTitle = "Find";
     XmNdefaultButton = india_ok;
     XmNbuttonFontList	   	= menu_font;
     XmNlabelFontList	   	= menu_font;
     XmNtextFontList	   	= menu_font;
  };
  controls
  {
     XmLabel	    india_label;
     XmTextField    india_text;
     XmPushButton   india_ok;
     XmPushButton   india_cancel;
  };
}; 

object india_label : XmLabel
{
  arguments
  {
     XmNx = 10;
     XmNy = 10;
     XmNlabelString = "";
  };
  callbacks
  {
     MrmNcreateCallback = procedure xtt_create_india_label( xtt_ctx); 
  };
};

object india_text : XmTextField
{
  arguments
  {
     XmNx = 150;
     XmNy = 10;
  };
  callbacks
  {
     MrmNcreateCallback = procedure xtt_create_india_text( xtt_ctx); 
  };
};

object india_ok : XmPushButton
{
  arguments
  {
     XmNwidth = 80;
     XmNx = 20;
     XmNy = 100;
     XmNlabelString = k_Ok;
  };
  callbacks
  { 
     XmNactivateCallback = procedure xtt_activate_india_ok( xtt_ctx); 
  };
};

object india_cancel : XmPushButton
{
  arguments
  {
     XmNwidth = 80;
     XmNx = 280;
     XmNy = 100;
     XmNlabelString = k_Cancel;
  };
  callbacks
  { 
     XmNactivateCallback = procedure xtt_activate_india_cancel( xtt_ctx); 
  };
};


end module;

