! 
!  ProviewR   Open Source Process Control.
!  Copyright (C) 2005-2023 SSAB EMEA AB.
! 
!  This file is part of ProviewR.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with ProviewR. If not, see <http://www.gnu.org/licenses/>
! 
!  Linking ProviewR statically or dynamically with other modules is
!  making a combined work based on ProviewR. Thus, the terms and
!  conditions of the GNU General Public License cover the whole 
!  combination.
! 
!  In addition, as a special exception, the copyright holders of
!  ProviewR give you permission to, from the build function in the
!  ProviewR Configurator, combine ProviewR with modules generated by the
!  ProviewR PLC Editor to a PLC program, regardless of the license
!  terms of these modules. You may copy and distribute the resulting
!  combined work under the terms of your choice, provided that every 
!  copy of the combined work is accompanied by a complete copy of 
!  the source code of ProviewR (the version used to produce the
!  combined work), being distributed under the terms of the GNU 
!  General Public License plus this exception.
!
module wb_xhelp
        version = 'v1.0'
        names = case_sensitive
        objects = {
                XmSeparator = gadget ;
                }

include file 'inc_xtt.uil';

identifier
	xhelp_ctx;
procedure
	xhelp_activate_exit(integer);
	xhelp_activate_search(integer);
	xhelp_activate_searchnext(integer);
	xhelp_activate_searchprevious(integer);
	xhelp_activate_zoom_in(integer);
	xhelp_activate_zoom_out(integer);
	xhelp_activate_zoom_reset(integer);
	xhelp_activate_help(integer);
	xhelp_create_xhelpnav_form(integer);
	xhelp_create_india_label(integer); 
	xhelp_create_india_text(integer); 
	xhelp_activate_india_ok(integer); 
	xhelp_activate_india_cancel(integer); 

value
	menu_font : font ('-*-Helvetica-Bold-R-Normal--12-*-*-*-P-*-ISO8859-1');

!----------------------------------------
! First declare the 'top level' widgets.  These are not controlled by
! any other widgets.  They are each fetched individually as needed.
!----------------------------------------

object  xhelp_window : XmMainWindow
{
  arguments
  {
    XmNx = 0;
    XmNy = 0;
    XmNwidth = 450;
    XmNheight = 400;
  };
  controls
  {
     XmMenuBar	xhelp_menu;
     XmPanedWindow  main_pane;
  };
};


object main_pane : XmPanedWindow
{
   arguments
   {
     XmNtraversalOn = false;
   };
   controls
   {
     XmPanedWindow xhelpnav_form;
   };
};


object xhelp_menu : XmMenuBar
{
  arguments
  {
    XmNorientation 	= XmHORIZONTAL;
    XmNspacing  	= 15;
    XmNmenuHelpWidget 	= XmCascadeButton help_entry; 
  };
  controls
  {
    XmCascadeButton file_entry;
    XmCascadeButton edit_entry;
    XmCascadeButton view_entry;
    XmCascadeButton help_entry;
  };
};

object file_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString  = c_File;
    XmNfontList	    = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Close;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xhelp_activate_exit(xhelp_ctx);
          };
	};
      };
    };
  };
};

object functions_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString = c_Functions;
    XmNfontList	   = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Open_Plc;
            XmNmnemonic = keysym('O');
	    XmNaccelerator = "Ctrl<Key>L";
	    XmNacceleratorText = compound_string('Ctrl+L');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
!            XmNactivateCallback = procedure xhelp_activate_openplc(xhelp_ctx);
          };
	};
      };
    };
  };
};


object edit_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString = c_Edit;
    XmNfontList	   = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Search;
            XmNmnemonic = keysym('S');
	    XmNaccelerator = "Ctrl<Key>F";
	    XmNacceleratorText = compound_string('Ctrl+F');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xhelp_activate_search(xhelp_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_SearchNext;
            XmNmnemonic = keysym('N');
	    XmNaccelerator = "Ctrl<Key>G";
	    XmNacceleratorText = compound_string('Ctrl+G');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xhelp_activate_searchnext(xhelp_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_SearchPrevious;
            XmNmnemonic = keysym('P');
	    XmNaccelerator = "Ctrl<Key>R";
	    XmNacceleratorText = compound_string('Ctrl+R');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xhelp_activate_searchprevious(xhelp_ctx);
          };
	};
      };
    };
  };
};

object view_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString = c_View;
    XmNfontList	   = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_in;
            XmNmnemonic = keysym('I');
	    XmNaccelerator = "Ctrl<Key>I";
	    XmNacceleratorText = compound_string('Ctrl+I');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xhelp_activate_zoom_in(xhelp_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_out;
            XmNmnemonic = keysym('O');
	    XmNaccelerator = "Ctrl<Key>O";
	    XmNacceleratorText = compound_string('Ctrl+O');
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xhelp_activate_zoom_out(xhelp_ctx);
          };
	};
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Zoom_reset;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
            XmNactivateCallback = procedure xhelp_activate_zoom_reset(xhelp_ctx);
          };
	};
      };
    };
  };
};

object help_entry : XmCascadeButton      
{
  arguments
  {
    XmNlabelString = c_Help;
    XmNfontList	   = menu_font;
  };
  controls
  {
    XmPulldownMenu
    {
      controls
      {
        XmPushButton
        {
          arguments
          {
  	    XmNlabelString = c_Help;
            XmNfontList	   = menu_font;
	  };
	  callbacks
          {
	    XmNactivateCallback = procedure xhelp_activate_help(xhelp_ctx);
          };
	};
      };
    };
  };
};

object xhelpnav_form : XmPanedWindow
{
   arguments
   {
!     XmNleftAttachment 	= 	XmATTACH_FORM;
!     XmNrightAttachment 	= XmATTACH_FORM;
!     XmNbottomAttachment    	= XmATTACH_FORM;
!     XmNbottomOffset        	= 150;
!     XmNtopAttachment    	= XmATTACH_FORM;
!     XmNheight = 300;
!     XmNpaneMaximum = 700;
   };
   controls
   {
   };
   callbacks
   {
     MrmNcreateCallback = procedure xhelp_create_xhelpnav_form( xhelp_ctx);
   };
};

!
!-----------------------------------------------------------------
! 
! Input Dialog box
!
!________________________________________________________________
object   input_dialog : XmFormDialog
{
  arguments
  {
     XmNnoResize = true;
     XmNwidth = 400;
     XmNheight = 150;
     XmNdefaultPosition = true;
     XmNautoUnmanage     = false;
     XmNdialogTitle = "Find";
     XmNdefaultButton = india_ok;
     XmNbuttonFontList	   	= menu_font;
     XmNlabelFontList	   	= menu_font;
     XmNtextFontList	   	= menu_font;
  };
  controls
  {
     XmLabel	    india_label;
     XmTextField    india_text;
     XmPushButton   india_ok;
     XmPushButton   india_cancel;
  };
}; 

object india_label : XmLabel
{
  arguments
  {
     XmNx = 10;
     XmNy = 10;
     XmNlabelString = "";
  };
  callbacks
  {
     MrmNcreateCallback = procedure xhelp_create_india_label( xhelp_ctx); 
  };
};

object india_text : XmTextField
{
  arguments
  {
     XmNx = 150;
     XmNy = 10;
  };
  callbacks
  {
     MrmNcreateCallback = procedure xhelp_create_india_text( xhelp_ctx); 
  };
};

object india_ok : XmPushButton
{
  arguments
  {
     XmNwidth = 80;
     XmNx = 20;
     XmNy = 100;
     XmNlabelString = "OK";
  };
  callbacks
  { 
     XmNactivateCallback = procedure xhelp_activate_india_ok( xhelp_ctx); 
  };
};

object india_cancel : XmPushButton
{
  arguments
  {
     XmNwidth = 80;
     XmNx = 280;
     XmNy = 100;
     XmNlabelString = "Cancel";
  };
  callbacks
  { 
     XmNactivateCallback = procedure xhelp_activate_india_cancel( xhelp_ctx); 
  };
};

end module;














