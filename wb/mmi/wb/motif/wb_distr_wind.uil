! 
!  ProviewR   Open Source Process Control.
!  Copyright (C) 2005-2023 SSAB EMEA AB.
! 
!  This file is part of ProviewR.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with ProviewR. If not, see <http://www.gnu.org/licenses/>
! 
!  Linking ProviewR statically or dynamically with other modules is
!  making a combined work based on ProviewR. Thus, the terms and
!  conditions of the GNU General Public License cover the whole 
!  combination.
! 
!  In addition, as a special exception, the copyright holders of
!  ProviewR give you permission to, from the build function in the
!  ProviewR Configurator, combine ProviewR with modules generated by the
!  ProviewR PLC Editor to a PLC program, regardless of the license
!  terms of these modules. You may copy and distribute the resulting
!  combined work under the terms of your choice, provided that every 
!  copy of the combined work is accompanied by a complete copy of 
!  the source code of ProviewR (the version used to produce the
!  combined work), being distributed under the terms of the GNU 
!  General Public License plus this exception.
!
module distr_wind
	version = 'v1.0'
	names = case_sensitive
 
identifier
	distrw_ctx;

procedure
        distrw_create_adb( integer);
        distrw_destroy_adb( integer);
	distrw_activate_ok( integer);
	distrw_create_ok( integer);
	distrw_activate_cancel( integer);
	distrw_activate_close( integer);
	distrw_activate_select_node( integer);
	distrw_activate_copy_all( integer);
	distrw_activate_copy_load( integer);
	distrw_activate_copy_appl( integer);
	distrw_activate_copy_graph( integer);
	distrw_activate_copy_system( integer);
	distrw_activate_show_load( integer);
	distrw_activate_show_appl( integer);
	distrw_activate_show_graph( integer);
	distrw_activate_show_system( integer);
	distrw_create_copylist( integer);
        distrw_nodes_destroy_cb( integer);
	distrw_nodes_cancel_cb( integer);
        distrw_nodes_ok_cb( integer);
        distrw_nodes_apply_cb( integer);
        distrw_nodes_list_cr( integer);

value
	menu_font : font ('-*-Helvetica-Bold-R-Normal--12-*-*-*-P-*-ISO8859-1');

object distrw_window : XmMainWindow
{  
   arguments
   {
     XmNwidth = 0;
     XmNheight = 0;
   };  
   controls
   {
     XmForm  distrw_adb;

   }; !Controls

   callbacks
   {
   };
};

object distrw_adb : XmForm
{
  arguments
  {
    XmNwidth = 800;
    XmNheight = 400;
    XmNresizePolicy = XmRESIZE_NONE;
    XmNdefaultButton = XmPushButton ok;
    XmNcancelButton = XmPushButton cancel;
  };
   controls
   {
     XmMenuBar		menuBar;
     XmPushButton	ok;
     XmPushButton	cancel;
     XmScrolledList 	copyList;
   };
   callbacks
   {
     MrmNcreateCallback = procedure distrw_create_adb ( distrw_ctx) ;
     XmNdestroyCallback = procedure distrw_destroy_adb( distrw_ctx);
   };
};

object menuBar : XmMenuBar
{
  arguments {
    XmNorientation = XmHORIZONTAL;
    XmNspacing     = 15;                   ! Pixels between XmNlistItems in menu
    XmNtopAttachment    = XmATTACH_FORM;
    XmNleftAttachment   = XmATTACH_FORM;
    XmNrightAttachment    = XmATTACH_FORM;
  };
  controls {                              
    XmCascadeButton filePulldown;
    XmCascadeButton functionsPulldown;
  };
  callbacks {
  };
};

object filePulldown : XmCascadeButton
{
  arguments{    
    XmNlabelString      = compound_string("File");	
    XmNmnemonic         = keysym("F");
    XmNfontList	        = menu_font;
  };
  controls{    XmPulldownMenu filePulldownMenu;	};
};


object filePulldownMenu : XmPulldownMenu
{
  arguments{    XmNorientation = XmVERTICAL;	};
  controls
  {
    XmPushButton
    {
      arguments
      {
        XmNlabelString = compound_string("Select Node");
	XmNmnemonic = keysym('N');
	XmNaccelerator = "Ctrl<Key>N";
	XmNacceleratorText = compound_string('Ctrl+N');
        XmNfontList	        = menu_font;
      };
      callbacks
      {
        XmNactivateCallback = procedure distrw_activate_select_node(distrw_ctx);
      };
    }; 
    XmPushButton
    {
      arguments { 
	XmNlabelString = compound_string("Close"); 
        XmNmnemonic         = keysym("C");
        XmNfontList	        = menu_font;
      };
      callbacks { 
	XmNactivateCallback = procedure distrw_activate_close( distrw_ctx); 
      };
    };
  }; ! Close Pulldown controls
}; ! Close Pulldown

object functionsPulldown : XmCascadeButton
{
  arguments{    
    XmNlabelString = compound_string("Functions");	
    XmNmnemonic         = keysym("F");
    XmNfontList	        = menu_font;
  };
  controls{    XmPulldownMenu functionsPulldownMenu;	};
};

object functionsPulldownMenu : XmPulldownMenu
{
  arguments{    XmNorientation = XmVERTICAL;	};
  controls
  {
    XmPushButton
    {
      arguments
      {
        XmNlabelString = compound_string("Copy All");
	XmNmnemonic = keysym('C');
        XmNfontList	        = menu_font;
      };
      callbacks
      {
        XmNactivateCallback = procedure distrw_activate_copy_all(distrw_ctx);
      };
    }; 
    XmPushButton
    {
      arguments
      {
        XmNlabelString = compound_string("Copy Load");
	XmNmnemonic = keysym('L');
	XmNaccelerator = "Ctrl<Key>L";
	XmNacceleratorText = compound_string('Ctrl+L');
        XmNfontList	        = menu_font;
      };
      callbacks
      {
        XmNactivateCallback = procedure distrw_activate_copy_load(distrw_ctx);
      };
    }; 
    XmPushButton
    {
      arguments
      {
        XmNlabelString = compound_string("Copy Application");
	XmNmnemonic = keysym('A');
	XmNaccelerator = "Ctrl<Key>A";
	XmNacceleratorText = compound_string('Ctrl+A');
        XmNfontList	        = menu_font;
      };
      callbacks
      {
        XmNactivateCallback = procedure distrw_activate_copy_appl(distrw_ctx);
      };
    }; 
    XmPushButton
    {
      arguments
      {
        XmNlabelString = compound_string("Copy Graph");
	XmNmnemonic = keysym('G');
	XmNaccelerator = "Ctrl<Key>G";
	XmNacceleratorText = compound_string('Ctrl+G');
        XmNfontList	        = menu_font;
      };
      callbacks
      {
        XmNactivateCallback = procedure distrw_activate_copy_graph(distrw_ctx);
      };
    }; 
    XmPushButton
    {
      arguments
      {
        XmNlabelString = compound_string("Copy System");
	XmNmnemonic = keysym('S');
        XmNfontList	        = menu_font;
      };
      callbacks
      {
        XmNactivateCallback = procedure distrw_activate_copy_system(distrw_ctx);
      };
    }; 
    XmPushButton
    {
      arguments
      {
        XmNlabelString = compound_string("Show LoadFiles");
	XmNmnemonic = keysym('p');
        XmNfontList	        = menu_font;
      };
      callbacks
      {
        XmNactivateCallback = procedure distrw_activate_show_load(distrw_ctx);
      };
    }; 
    XmPushButton
    {
      arguments
      {
        XmNlabelString = compound_string("Show Application");
	XmNmnemonic = keysym('p');
        XmNfontList	        = menu_font;
      };
      callbacks
      {
        XmNactivateCallback = procedure distrw_activate_show_appl(distrw_ctx);
      };
    }; 
    XmPushButton
    {
      arguments
      {
        XmNlabelString = compound_string("Show Graph");
	XmNmnemonic = keysym('r');
        XmNfontList	        = menu_font;
      };
      callbacks
      {
        XmNactivateCallback = procedure distrw_activate_show_graph(distrw_ctx);
      };
    }; 
    XmPushButton
    {
      arguments
      {
        XmNlabelString = compound_string("Show System");
	XmNmnemonic = keysym('y');
        XmNfontList	        = menu_font;
      };
      callbacks
      {
        XmNactivateCallback = procedure distrw_activate_show_system(distrw_ctx);
      };
    }; 
  }; ! Functions Pulldown controls
}; ! Functions Pulldown


object ok : XmPushButton
{
	arguments
	{
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNbottomOffset = 20;
          XmNleftAttachment = XmATTACH_FORM;
	  XmNleftOffset = 20;
	  XmNwidth = 80;
          XmNlabelString = 'OK';
          XmNfontList	        = menu_font;
	};
	callbacks
	{
	  MrmNcreateCallback = procedure distrw_create_ok ( distrw_ctx) ;
	  XmNactivateCallback = procedure distrw_activate_ok ( distrw_ctx) ;
	};
};
object cancel : XmPushButton
{
	arguments
	{
	  XmNwidth = 80;
          XmNlabelString = 'Cancel';
	  XmNbottomAttachment = XmATTACH_FORM;
	  XmNbottomOffset = 20;
          XmNrightAttachment = XmATTACH_FORM;
	  XmNrightOffset = 20;
          XmNfontList	        = menu_font;
	};
	callbacks
	{
	  XmNactivateCallback = procedure distrw_activate_cancel ( distrw_ctx) ;
	};
};

object copyList : XmScrolledList {
    arguments {
	XmNbottomAttachment = XmATTACH_WIDGET;
	XmNbottomWidget = XmPushButton ok;
	XmNbottomOffset = 15;
        XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 5;
        XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmMenuBar menuBar;
	XmNtopOffset = 5;
        XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 5;
	XmNselectionPolicy = XmEXTENDED_SELECT;
	XmNfontList= font('*courier-bold-r-normal--*-140-75-75-m-*-*-*');
        ! XmNfontList	        = menu_font;
    };
    controls {
    };
    callbacks {
	MrmNcreateCallback = procedure distrw_create_copylist( distrw_ctx);	
    };
};

object nodesWindow : XmFormDialog {
    arguments {
	XmNwidth = 280;
	XmNheight = 260;
        XmNdialogTitle = 'Distribute: Select Node';
        XmNdefaultButton = XmPushButton nodesOk;
        XmNcancelButton = XmPushButton nodesCancel;
	XmNautoUnmanage     = false;
    };
    controls {
	XmPushButton nodesOk;
        XmPushButton nodesApply;
        XmPushButton nodesCancel;
        XmScrolledList nodesNodeList;
    };
    callbacks {
	XmNdestroyCallback = procedure distrw_nodes_destroy_cb(distrw_ctx);
    };
};



object nodesOk : XmPushButton {
    arguments {
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 20;
        XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 10;
	XmNwidth = 80;
        XmNlabelString = 'OK';
        XmNfontList	        = menu_font;
    };
    controls {
    };
    callbacks {
	XmNactivateCallback = procedure distrw_nodes_ok_cb(distrw_ctx); 
    };
};


object nodesCancel : XmPushButton {
    arguments {
	XmNwidth = 80;
        XmNlabelString = 'Cancel';
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 20;
        XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 10;
        XmNfontList	        = menu_font;
    };
    callbacks {
	XmNactivateCallback = procedure distrw_nodes_cancel_cb(distrw_ctx); 
    };
};

object nodesApply : XmPushButton {
    arguments {
	XmNwidth = 80;
        XmNlabelString = 'Apply';
	XmNleftAttachment = XmATTACH_POSITION;
	XmNleftPosition = 35;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNbottomOffset = 20;
        XmNfontList	        = menu_font;
    };
    callbacks {
	XmNactivateCallback = procedure distrw_nodes_apply_cb(distrw_ctx);
    };
};

object nodesNodeList : XmScrolledList {
    arguments {
	XmNbottomAttachment = XmATTACH_WIDGET;
	XmNbottomWidget = XmPushButton nodesCancel;
	XmNbottomOffset = 15;
        XmNrightAttachment = XmATTACH_FORM;
	XmNrightOffset = 5;
        XmNtopAttachment = XmATTACH_FORM;
	XmNtopOffset = 5;
        XmNleftAttachment = XmATTACH_FORM;
	XmNleftOffset = 5;
	XmNselectionPolicy = XmEXTENDED_SELECT;
        XmNfontList	        = menu_font;
    };
    controls {
    };
    callbacks {
	MrmNcreateCallback = procedure distrw_nodes_list_cr(distrw_ctx);	
    };
};


end module;

