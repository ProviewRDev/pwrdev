! 
!  ProviewR   Open Source Process Control.
!  Copyright (C) 2005-2022 SSAB EMEA AB.
! 
!  This file is part of ProviewR.
!
!  This program is free software; you can redistribute it and/or 
!  modify it under the terms of the GNU General Public License as 
!  published by the Free Software Foundation, either version 2 of 
!  the License, or (at your option) any later version.
!
!  This program is distributed in the hope that it will be useful 
!  but WITHOUT ANY WARRANTY; without even the implied warranty of 
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
!  GNU General Public License for more details.
!
!  You should have received a copy of the GNU General Public License 
!  along with ProviewR. If not, see <http://www.gnu.org/licenses/>
! 
!  Linking ProviewR statically or dynamically with other modules is
!  making a combined work based on ProviewR. Thus, the terms and
!  conditions of the GNU General Public License cover the whole 
!  combination.
! 
!  In addition, as a special exception, the copyright holders of
!  ProviewR give you permission to, from the build function in the
!  ProviewR Configurator, combine ProviewR with modules generated by the
!  ProviewR PLC Editor to a PLC program, regardless of the license
!  terms of these modules. You may copy and distribute the resulting
!  combined work under the terms of your choice, provided that every 
!  copy of the combined work is accompanied by a complete copy of 
!  the source code of ProviewR (the version used to produce the
!  combined work), being distributed under the terms of the GNU 
!  General Public License plus this exception.
!
module foedit
	version = 'v1.0'
	names = case_sensitive
 

value
    bitmap_colors : color_table ( background color = ' ', foreground color = '*');
! Icon size 50x50
    icon : exported icon ( color_table=bitmap_colors,
'                                                  ',
'                                                  ',
'  * * * * * * * * * *  *   *  * * * * * * * * * **',
' * * * * * * * * * * * **  * * * * * * * * * * * *',
'  * * * * * * * * * *  * * *  * * * * * * * * * **',
' * * * * * * * * * * * *  ** * * * * * * * * * * *',
'  * * * * * * * * * *  *   *  * * * * * * * * * **',
' * * * * * * * * * * ********* * * * * * * * * * *',
'  * * * * * * * * ***    *    *** * * * * * * * **',
' * * * * * * * ***       *       *** * * * * * * *',
'  * * * * * * **        ***        ** * * * * * **',
' * * * * * * **         ***         ** * * * * * *',
'  * * * * * *          * * *          * * * * * **',
' * * * * * *           * * *           * * * * * *',
'  * * * * **      *************        ** * * * **',
' * * * * **    *  ***************  *    ** * * * *',
'  * * * **      *******************      ** * * **',
' * * * * *      *******************      * * * * *',
'  * * * *        ******  *  *******       * * * **',
' * * * **         *****  *   *******      ** * * *',
'  * * * *         *****  *   *******      * * * **',
' * * * *          *****  *   *******       * * * *',
'       *       ********  *  *  *****       *     *',
' **   **    ***   ****** * *   ********    * *** *',
'  *   **  **      ***** ***   ******   **  **   **',
' * * * **************************************   **',
'   * * *  **      *****************    **  **   **',
' *  *  *    ***   ****************  ***    * *** *',
'       *       *********************       *     *',
' * * * *          **************           * * * *',
'  * * * *         *****  *   ****         * * * **',
' * * * **         *****  *   ****         ** * * *',
'  * * * *        ******  *  * ****        * * * **',
' * * * * *      *******  *  *   ***      * * * * *',
'  * * * **      *******  *  *    **      ** * * **',
' * * * * *     *  *****  *  *      *    ** * * * *',
'  * * * * **      ****** * *           ** * * * **',
' * * * * * *      ****** * *           * * * * * *',
'  * * * * * *     ****** * *          *** * * * **',
' * * * * * * **         ***         ** * * * * * *',
'  * * * * * * **        ***        ** * * * * * **',
' * * * * * * * ***       *       *** * * * * * * *',
'  * * * * * * * * ***    *    *** * * * * * * * **',
' * * * * * * * * * * ********* * * * * * * * * * *',
'  * * * * * * * * * *   ***   * * * * * * * * * **',
' * * * * * * * * * * * *     * * * * * * * * * * *',
'  * * * * * * * * * *   ***   * * * * * * * * * **',
' * * * * * * * * * * *     * * * * * * * * * * * *',
'  * * * * * * * * * *   ***   * * * * * * * * * **',
' *************************************************');

value
  k_palette_width		: 170;
  k_label_height		: 35;
  k_text_left_offset	: 150;

identifier
  foe_ctx;

procedure
  foe_activate_save(integer);
  foe_activate_exit(integer);
  foe_activate_print(integer);
  foe_activate_printoverv(integer);
  foe_activate_printselect(integer);
  foe_activate_syntax(integer);
  foe_activate_compile(integer);
  foe_activate_plcattribute(integer);
  foe_activate_winddelete(integer);
  foe_activate_quit(integer);
  foe_activate_savetrace(integer);
  foe_activate_restoretrace(integer);

  foe_create_widget_cb(integer);
  foe_create_palette_object(integer);

  foe_activate_cut(integer);
  foe_activate_copy(integer);
  foe_activate_paste(integer);
  foe_activate_moveregion(integer);
  foe_activate_attribute(integer);
  foe_activate_subwindow(integer);
  foe_activate_undelete(integer);
  foe_activate_unselect(integer);
  foe_activate_delete(integer);
  foe_activate_changetext(integer);

  foe_activate_gridsize1(integer);
  foe_activate_gridsize2(integer);
  foe_activate_gridsize3(integer);
  foe_activate_gridsize4(integer);
  foe_activate_gridsize5(integer);
  foe_activate_showgrid(integer);
  foe_activate_zoomin(integer);
  foe_activate_zoomout(integer);
  foe_activate_unzoom(integer);
  foe_activate_redraw(integer);
  foe_activate_palette_plant(integer);
  foe_activate_palette_object(integer);
  foe_activate_palette_con(integer);
  foe_activate_refcon(integer);
  foe_activate_showexeord(integer);

  foe_activate_search(integer);
  foe_activate_searchobject(integer);
  foe_activate_searchstring(integer);
  foe_activate_searchnext(integer);

  foe_activate_trace_togg(integer);
  foe_activate_simulate_togg(integer);
  foe_activate_view_togg(integer);
  foe_activate_edit_togg(integer);

  foe_activate_getobj (integer); !SG 11.04.91
  foe_activate_expand (integer);
  foe_activate_compress (integer);
  foe_activate_helpclass( integer);
  foe_activate_help (integer);


  foe_create_adb(integer); !SG 24.02.91
  foe_create_label(integer); 
  foe_create_textinput(integer); 
  foe_valchanged_textinput(integer); 
  foe_create_edit_form(integer); 
  foe_create_subpane(integer);
  foe_yes_popupmsg(integer);
  foe_no_popupmsg(integer);
  foe_cancel_popupmsg(integer);

  foe_popdown_pop(integer);

value
  menu_font : font ('-*-Helvetica-Bold-R-Normal--12-*-*-*-P-*-ISO8859-1');

object foe_window : XmMainWindow {  
  arguments {
    XmNwidth = 1000;
    XmNheight = 700;
  };  
  controls {
    XmMenuBar        foe_menu;
    XmForm  foe_adb;
  };
};

object foe_adb : XmForm {
  arguments {
    XmNresizePolicy = XmRESIZE_NONE;
  };
  controls {
    XmText     foe_textinput;
    XmLabel	foe_label;
    XmPanedWindow    pane_subwidget;
    XmForm	edit_form;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_adb ( foe_ctx);
  };
};


object edit_form : XmForm {
  arguments  {
    XmNborderWidth	= 1;
    XmNtopAttachment    = XmATTACH_WIDGET;
    XmNtopWidget	= XmLabel foe_label;
    XmNbottomAttachment   = XmATTACH_FORM;
    XmNrightAttachment    = XmATTACH_FORM;
    XmNleftAttachment    = XmATTACH_WIDGET;
    XmNleftWidget        = XmPanedWindow pane_subwidget;
  };
  callbacks { 
    MrmNcreateCallback = procedure foe_create_edit_form( foe_ctx); 
  };
};

object pane_subwidget : XmPanedWindow {
  arguments {
    XmNwidth = k_palette_width;
    XmNborderWidth = 1;
    XmNtopAttachment    = XmATTACH_FORM;
    XmNtopOffset        = k_label_height;
    XmNbottomAttachment 	= XmATTACH_FORM;
    XmNleftAttachment 	= XmATTACH_FORM;
    !!    XmNtraversalOn		= false;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_subpane ( foe_ctx);
  };
};

object foe_menu : XmMenuBar {
  arguments {
    XmNorientation 		= XmHORIZONTAL;
    XmNspacing  			= 15;
    XmNmenuHelpWidget 		= XmCascadeButton help_entry; 
  };
  controls {
    XmCascadeButton file_entry;
    XmCascadeButton edit_entry;
    XmCascadeButton search_entry;
    XmCascadeButton view_entry;
    !    XmCascadeButton connections_entry;
    XmCascadeButton functions_entry;
    XmCascadeButton mode_entry;
    XmCascadeButton help_entry;
  };
};

object foe_label : XmLabel {
  arguments {
    XmNborderWidth = 1;
    XmNtopAttachment 	= XmATTACH_FORM;
    XmNrightAttachment 	= XmATTACH_FORM;
    XmNleftAttachment 	= XmATTACH_FORM;
    XmNbottomAttachment = XmATTACH_WIDGET;
    XmNbottomWidget    	= XmPanedWindow pane_subwidget;
    XmNmarginLeft       = 10;
    XmNalignment       	= XmALIGNMENT_BEGINNING;
    XmNlabelString     	= "";
    XmNheight		= 40;
    XmNfontList	    	= menu_font;
  };
  controls {
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_label ( foe_ctx);
  };
};

object foe_textinput : XmText {
  arguments {
    XmNtopAttachment 	= XmATTACH_FORM;
    XmNleftAttachment 	= XmATTACH_FORM;
    XmNleftOffset       = k_text_left_offset;
    XmNbottomAttachment = XmATTACH_WIDGET;
    XmNbottomWidget	= XmPanedWindow pane_subwidget;
    !    XmNtopAttachment 	= XmATTACH_FORM;
    !    XmNrightAttachment 	= XmATTACH_FORM;
    XmNx			        = 100;
    XmNeditMode		= XmMULTI_LINE_EDIT;
    XmNrows 		= 1;
    XmNcolumns 		= 35;
    XmNborderWidth	= 0;
    !    XmNheight     	= 40;
    XmNfontList	        = menu_font;
  };
  controls {
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_textinput ( foe_ctx);
    XmNvalueChangedCallback = procedure foe_valchanged_textinput( foe_ctx); 
  };
};



!
! ** File Menu **
!
object file_entry : XmCascadeButton {
  arguments {
    XmNlabelString = compound_string("File");
    XmNmnemonic = keysym('F');
    XmNfontList	    = menu_font;
    XmNuserData = 1;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb ( foe_ctx);
  };
  controls {
    XmPulldownMenu {
      controls {
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Save");
	    XmNmnemonic = keysym('S');
	    XmNaccelerator = "Ctrl<Key>S";
	    XmNacceleratorText = compound_string('Ctrl+S');
	    XmNfontList	    = menu_font;
	    XmNuserData = 2;
	  };
	  callbacks {
	      MrmNcreateCallback = procedure foe_create_widget_cb (foe_ctx);
	      XmNactivateCallback = procedure foe_activate_save(foe_ctx);
	      XmNhelpCallback = procedure foe_activate_save(foe_ctx);
	  };
	};
	XmCascadeButton {
	  arguments {
	    XmNlabelString = compound_string("Print");
	    XmNmnemonic = keysym('P');
	    XmNfontList	    = menu_font;
	  };
	  controls {
	    XmPulldownMenu {
	      controls {
		XmPushButton {
		  arguments {
		    XmNlabelString = compound_string("Documents");
		    XmNmnemonic = keysym('D');
		    !	           XmNaccelerator = "Ctrl<Key>D";
		    !	           XmNacceleratorText = compound_string('Ctrl+D');
		    XmNuserData = 3;
		    XmNfontList	    = menu_font;
		  };
		  callbacks {
		    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
		    XmNactivateCallback = procedure foe_activate_print(foe_ctx);
		    XmNhelpCallback = procedure foe_activate_print(foe_ctx);
		  };
		};

		XmPushButton {
		  arguments {
		    XmNlabelString = compound_string("Overview");
		    XmNmnemonic = keysym('O');
		    XmNfontList	    = menu_font;
		    XmNuserData = 4;
		  };
		  callbacks {
		    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
		    XmNactivateCallback = procedure foe_activate_printoverv(foe_ctx);
		    XmNhelpCallback = procedure foe_activate_printoverv(foe_ctx);
		  };
		};
		XmPushButton {
		  arguments {
		    XmNlabelString = compound_string("Selected Documents");
		    XmNmnemonic = keysym('S');
		    XmNfontList	    = menu_font;
		    XmNuserData = 5;
		  };
		  callbacks {
		    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
		    XmNactivateCallback = procedure foe_activate_printselect(foe_ctx);
		    XmNhelpCallback = procedure foe_activate_printselect(foe_ctx);
		  };
	        };

	     
	      }; 
	    }; 
	  }; 
	};
	XmSeparator {
	};
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Syntax");
	    XmNmnemonic = keysym('x');
	    XmNfontList	    = menu_font;
	    XmNuserData = 6;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	    XmNactivateCallback = procedure foe_activate_syntax(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_syntax(foe_ctx);
	  };
	};
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Build");
	    XmNmnemonic = keysym('B');
	    XmNfontList	    = menu_font;
	    XmNuserData = 7;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	    XmNactivateCallback = procedure foe_activate_compile(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_compile(foe_ctx);
	  };
	};
	XmSeparator {
	};
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Plc Attributes...");
	    XmNmnemonic = keysym('A');
	    XmNfontList	    = menu_font;
	    XmNuserData = 8;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb (foe_ctx);
	    XmNactivateCallback = procedure foe_activate_plcattribute (foe_ctx);
	    XmNhelpCallback = procedure foe_activate_plcattribute (foe_ctx);
	  };
	};
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Delete Window");
	    XmNmnemonic = keysym('W');
	    XmNfontList	    = menu_font;
	    XmNuserData = 9;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	    XmNactivateCallback = procedure foe_activate_winddelete(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_winddelete(foe_ctx);
	  };
	};
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("SaveTrace");
	    XmNmnemonic = keysym('W');
	    XmNfontList	    = menu_font;
	    XmNuserData = 10;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	    XmNactivateCallback = procedure foe_activate_savetrace(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_savetrace(foe_ctx);
	  };
	};
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("RestoreTrace");
	    XmNmnemonic = keysym('W');
	    XmNfontList	    = menu_font;
	    XmNuserData = 11;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	    XmNactivateCallback = procedure foe_activate_restoretrace(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_restoretrace(foe_ctx);
	  };
	};
	XmSeparator {
	};
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Close");
	    XmNmnemonic = keysym('C');
	    !	           XmNaccelerator = "Ctrl<Key>C";
	    !	           XmNacceleratorText = compound_string('Ctrl+C');
	    XmNuserData = 12;
	    XmNfontList	    = menu_font;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	    XmNactivateCallback = procedure foe_activate_quit(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_quit(foe_ctx);
	  };
	};
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("");
	    XmNfontList	    = menu_font;
	    XmNuserData = 13;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	    XmNactivateCallback = procedure foe_activate_exit(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_exit(foe_ctx);
	  };
	};
      };
    };
  };
};




!
! ** Edit Menu **
!
object edit_entry : XmCascadeButton {
  arguments {
    XmNlabelString = compound_string("Edit");
    XmNmnemonic = keysym('E');
    XmNfontList	    = menu_font;
    XmNuserData = 14;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb ( foe_ctx);
  };
  controls {
    XmPulldownMenu {
      controls {
	XmPushButton push_undelete;
	XmPushButton push_unselect;
	XmSeparator  separator;
	XmPushButton push_cut;
	XmPushButton push_copy;
	XmPushButton push_paste;
	XmSeparator  separator;
	XmPushButton push_connect;
	XmSeparator  separator;
	XmPushButton push_delete;
	XmPushButton push_changetext;
	XmPushButton push_expand;
	XmPushButton push_compress;
      };
    };
  };
};


object push_cut :	XmPushButton {
  arguments {
    XmNlabelString = compound_string("Cut");
    XmNmnemonic = keysym('t');
    XmNaccelerator = "Ctrl<Key>X";
    XmNacceleratorText = compound_string('Ctrl+X');
    !	           XmNaccelerator = "Alt<Key>DRemove:";
    !	           XmNacceleratorText = compound_string('Alt+Remove');
    XmNfontList	    = menu_font;
    XmNuserData = 15;
  };
  callbacks {
    XmNactivateCallback = procedure foe_activate_cut(foe_ctx);
    XmNhelpCallback = procedure foe_activate_cut(foe_ctx);
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
  };
};

object push_copy :     XmPushButton {
  arguments {
    XmNlabelString = compound_string("Copy");
    XmNmnemonic = keysym('C');
    XmNaccelerator = "Ctrl<Key>C";
    XmNacceleratorText = compound_string('Ctrl+C');
    !	           XmNaccelerator = "Alt Shift<Key>DRemove:";
    !	           XmNacceleratorText = compound_string('Alt+Shift+Remove');
    XmNfontList	    = menu_font;
    XmNuserData = 16;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
    XmNactivateCallback = procedure foe_activate_copy(foe_ctx);
    XmNhelpCallback = procedure foe_activate_copy(foe_ctx);
  };
}; !Push_button

object push_paste :     XmPushButton {
  arguments {
    XmNlabelString = compound_string("Paste");
    XmNmnemonic = keysym('P');
    XmNaccelerator = "Ctrl<Key>V";
    XmNacceleratorText = compound_string('Ctrl+V');
    !	           XmNaccelerator = "Alt<Key>Insert:";
    !	           XmNacceleratorText = compound_string('Alt+Insert');
    XmNfontList	    = menu_font;
    XmNuserData = 17;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
    XmNactivateCallback = procedure foe_activate_paste(foe_ctx);
    XmNhelpCallback = procedure foe_activate_paste(foe_ctx);
  };
};

object separator: XmSeparator {
};


object push_undelete :     XmPushButton {
  arguments {
    XmNlabelString = compound_string("Undo Delete");
    XmNmnemonic = keysym('U');
    XmNfontList	    = menu_font;
    XmNuserData = 18;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
    XmNactivateCallback = procedure foe_activate_undelete(foe_ctx);
    XmNhelpCallback = procedure foe_activate_undelete(foe_ctx);
  };
};

object push_unselect :     XmPushButton {
  arguments {
    XmNlabelString = compound_string("Undo Select");
    XmNmnemonic = keysym('S');
    XmNfontList	    = menu_font;
    XmNuserData = 19;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
    XmNactivateCallback = procedure foe_activate_unselect(foe_ctx);
    XmNhelpCallback = procedure foe_activate_unselect(foe_ctx);
  };
}; !Push_button

object push_connect : XmPushButton {
  arguments {
    XmNlabelString = compound_string("Connect");
    XmNmnemonic = keysym('o');
    XmNaccelerator = "Ctrl<Key>Q";
    XmNacceleratorText = compound_string('Ctrl+Q');
    XmNfontList	    = menu_font;
    XmNuserData = 20;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
    XmNactivateCallback = procedure foe_activate_getobj (foe_ctx);
    XmNhelpCallback = procedure foe_activate_getobj (foe_ctx);
  };
};

object push_delete :	XmPushButton {
  arguments {
    XmNlabelString = compound_string("Delete");
    XmNmnemonic = keysym('D');
    XmNfontList	    = menu_font;
    XmNuserData = 21;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
    XmNactivateCallback = procedure foe_activate_delete(foe_ctx);
    XmNhelpCallback = procedure foe_activate_delete(foe_ctx);
  };
}; !Push_button
object push_changetext :	XmPushButton {
  arguments {
    XmNlabelString = compound_string("Change Text");
    XmNmnemonic = keysym('h');
    XmNaccelerator = "Ctrl<Key>T";
    XmNacceleratorText = compound_string('Ctrl+T');
    XmNfontList	    = menu_font;
    XmNuserData = 22;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
    XmNactivateCallback = procedure foe_activate_changetext(foe_ctx);
    XmNhelpCallback = procedure foe_activate_changetext(foe_ctx);
  };
};
object push_expand : XmPushButton {
  arguments {
    XmNlabelString = compound_string("Expand Object");
    XmNmnemonic = keysym('x');
    XmNaccelerator = "Ctrl<Key>Right";
    XmNacceleratorText = compound_string('Ctrl+Right');
    XmNfontList	    = menu_font;
    XmNuserData = 23;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
    XmNactivateCallback = procedure foe_activate_expand (foe_ctx);
    XmNhelpCallback = procedure foe_activate_expand (foe_ctx);
  };
};
object push_compress : XmPushButton {
  arguments {
    XmNlabelString = compound_string("Compress Object");
    XmNmnemonic = keysym('m');
    XmNaccelerator = "Ctrl<Key>Left";
    XmNacceleratorText = compound_string('Ctrl+Left');
    XmNfontList	    = menu_font;
    XmNuserData = 24;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
    XmNactivateCallback = procedure foe_activate_compress (foe_ctx);
    XmNhelpCallback = procedure foe_activate_compress (foe_ctx);
  };
};


!
! ** Search Menu **
!
object search_entry : XmCascadeButton {
  arguments {
    XmNlabelString = compound_string("Search");
    XmNmnemonic = keysym('S');
    XmNfontList	    = menu_font;
    XmNuserData = 25;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
  };
  controls {
    XmPulldownMenu {
      controls {
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Object");
	    XmNmnemonic = keysym('O');
	    XmNfontList	    = menu_font;
	  };
	  callbacks {
	    XmNactivateCallback = procedure foe_activate_searchobject (foe_ctx);
	    XmNhelpCallback = procedure foe_activate_searchobject (foe_ctx);
	  };
	};
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("String");
	    XmNmnemonic = keysym('S');
	    XmNaccelerator = "Ctrl<Key>F";
	    XmNacceleratorText = compound_string('Ctrl+F');
	    XmNfontList	    = menu_font;
	  };
	  callbacks {
	    XmNactivateCallback = procedure foe_activate_searchstring (foe_ctx);
	    XmNhelpCallback = procedure foe_activate_searchstring (foe_ctx);
	  };
	};
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Next");
	    XmNmnemonic = keysym('N');
	    XmNaccelerator = "Ctrl<Key>G";
	    XmNacceleratorText = compound_string('Ctrl+G');
	    XmNfontList	    = menu_font;
	  };
	  callbacks {
	    XmNactivateCallback = procedure foe_activate_searchnext (foe_ctx);
	    XmNhelpCallback = procedure foe_activate_searchnext (foe_ctx);
	  };
	};
      }; 
    }; 
  };
};


!
! ** View Menu **
!
object view_entry : XmCascadeButton {
  arguments {
    XmNlabelString = compound_string("View");
    XmNmnemonic = keysym('V');
    XmNfontList	    = menu_font;
    XmNuserData = 26;
  };
  callbacks {
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
  };
  controls {
    XmPulldownMenu {
      controls {
	XmCascadeButton {
	  arguments {
	    XmNlabelString = compound_string("Palette");
	    XmNmnemonic = keysym('C');
	    XmNfontList	    = menu_font;
	  };
	  controls {
	    XmPulldownMenu {
	      arguments { 
		XmNradioBehavior = true; 
		XmNradioAlwaysOne = true;
	      };
	      controls {
		XmToggleButton {
		  arguments {
		    XmNlabelString = compound_string("Object");
		    XmNmnemonic = keysym('J');
		    XmNaccelerator = "Ctrl<Key>J";
		    XmNacceleratorText = compound_string('Ctrl+J');
		    XmNfontList	    = menu_font;
		    XmNuserData = 27;
		  };
		  callbacks {
		    XmNvalueChangedCallback = procedure foe_activate_palette_object(foe_ctx);
		    MrmNcreateCallback = procedure foe_create_palette_object(foe_ctx);
		    XmNhelpCallback = procedure foe_activate_palette_object(foe_ctx);
		  };
		}; 
		XmToggleButton {
		  arguments {
		    XmNlabelString = compound_string("Connection");
		    XmNmnemonic = keysym('N');
		    XmNaccelerator = "Ctrl<Key>N";
		    XmNacceleratorText = compound_string('Ctrl+N');
		    XmNfontList	    = menu_font;
		  };
		  callbacks {
		    XmNvalueChangedCallback = procedure foe_activate_palette_con(foe_ctx);
		    XmNhelpCallback = procedure foe_activate_palette_con(foe_ctx);
		  };
		}; 
		XmToggleButton {
		  arguments {
		    XmNlabelString = compound_string("Plant");
		    XmNmnemonic = keysym('L');
		    XmNaccelerator = "Ctrl<Key>L";
		    XmNacceleratorText = compound_string('Ctrl+L');
		    XmNfontList	    = menu_font;
		  };
		  callbacks {
		    XmNvalueChangedCallback = procedure foe_activate_palette_plant(foe_ctx);
		    XmNhelpCallback = procedure foe_activate_palette_plant(foe_ctx);
		  };
		}; 
	      };
	    };
	  };
	};
	XmToggleButton {
	  arguments {
	    XmNlabelString = compound_string("Reference connections");
	    XmNmnemonic = keysym('R');
	    XmNaccelerator = "Ctrl<Key>R";
	    XmNacceleratorText = compound_string('Ctrl+R');
	    XmNfontList	    = menu_font;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure foe_activate_refcon(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_refcon(foe_ctx);
	  };
	};
	XmSeparator {
	};
	XmCascadeButton {
	  arguments {
	    XmNlabelString = compound_string("Grid Size");
	    XmNmnemonic = keysym('G');
	    XmNfontList	    = menu_font;
	  };
	  controls {
	    XmPulldownMenu {
	      arguments  { 
		XmNradioBehavior = true; 
		XmNradioAlwaysOne = true;
	      };
	      controls {
		XmToggleButton {
		  arguments {
		    XmNlabelString = compound_string("  1 ");
		    XmNmnemonic = keysym('1');
		    XmNfontList	    = menu_font;
		  };
		  callbacks {
		    XmNvalueChangedCallback = procedure foe_activate_gridsize1(foe_ctx);
		  };
		};
		XmToggleButton {
		  arguments {
		    XmNlabelString = compound_string("  2 ");
		    XmNmnemonic = keysym('2');
		    XmNfontList	    = menu_font;
		  };
		  callbacks {
		    XmNvalueChangedCallback = procedure foe_activate_gridsize2(foe_ctx);
		  };
		};
		XmToggleButton {
		  arguments {
		    XmNlabelString = compound_string("  3 ");
		    XmNmnemonic = keysym('3');
		    XmNset = true;
		    XmNfontList	    = menu_font;
		  };
		  callbacks {
		    XmNvalueChangedCallback = procedure foe_activate_gridsize3(foe_ctx);
		  };
		};
		XmToggleButton {
		  arguments {
		    XmNlabelString = compound_string("  4 ");
		    XmNmnemonic = keysym('4');
		    XmNfontList	    = menu_font;
		  };
		  callbacks {
		    XmNvalueChangedCallback = procedure foe_activate_gridsize4(foe_ctx);
		  };
		};
		XmToggleButton {
		  arguments {
		    XmNlabelString = compound_string("  5 ");
		    XmNmnemonic = keysym('5');
		    XmNfontList	    = menu_font;
		  };
		  callbacks {
		    XmNvalueChangedCallback = procedure foe_activate_gridsize5(foe_ctx);
		  };
		};
	      };
	    };
	  };  
	};
	XmToggleButton {
	  arguments {
	    XmNlabelString = compound_string("Show Grid");
	    XmNmnemonic = keysym('S');
	    XmNfontList	    = menu_font;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure foe_activate_showgrid(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_showgrid(foe_ctx);
	  };
	}; 
	XmSeparator {
	};
	XmCascadeButton {
	  arguments {
	    XmNlabelString = compound_string("Zoom");
	    XmNmnemonic = keysym('Z');
	    XmNfontList	    = menu_font;
	  };
	  controls {
	    XmPulldownMenu {
	      controls {
		XmPushButton {
		  arguments {
		    XmNlabelString = compound_string("  In ");
		    XmNmnemonic = keysym('I');
		    XmNaccelerator = "Ctrl<Key>I";
		    XmNacceleratorText = compound_string('Ctrl+I');
		    XmNfontList	    = menu_font;
		  };
		  callbacks {
		    XmNactivateCallback = procedure foe_activate_zoomin(foe_ctx);
		  };
		};
		XmPushButton {
		  arguments {
		    XmNlabelString = compound_string("  Out");
		    XmNmnemonic = keysym('O');
		    XmNaccelerator = "Ctrl<Key>O";
		    XmNacceleratorText = compound_string('Ctrl+O');
		    XmNfontList	    = menu_font;
		  };
		  callbacks {
		    XmNactivateCallback = procedure foe_activate_zoomout(foe_ctx);
		  };
		};
		XmPushButton {
		  arguments {
		    XmNlabelString = compound_string("  Reset ");
		    XmNmnemonic = keysym('R');
		    XmNaccelerator = "Ctrl<Key>B";
		    XmNacceleratorText = compound_string('Ctrl+B');
		    XmNfontList	    = menu_font;
		  };
		  callbacks {
		    XmNactivateCallback = procedure foe_activate_unzoom(foe_ctx);
		  };
		};
	      };
	    }; 
	  };
	}; 
	XmSeparator {
	};
	XmToggleButton {
	  arguments {
	    XmNlabelString = compound_string("Show Execute Order");
	    XmNmnemonic = keysym('h');
	    XmNfontList	    = menu_font;
	  };
	  callbacks {
	    XmNvalueChangedCallback = procedure foe_activate_showexeord(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_showexeord(foe_ctx);
	  };
	}; 

	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Redraw");
	    XmNmnemonic = keysym('e');
	    XmNfontList	    = menu_font;
	    XmNuserData = 28;
	  };
	  callbacks {
	    XmNactivateCallback = procedure foe_activate_redraw(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_redraw(foe_ctx);
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	  };
	}; 
      };
    };
  };
};


!
! ** Functions Menu **
!
object functions_entry : XmCascadeButton {
  arguments {
    XmNlabelString = compound_string("Functions");
    XmNmnemonic = keysym('u');
    XmNfontList	    = menu_font;
  };
  callbacks {
  };
  controls {
    XmPulldownMenu {
      controls {
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Open Object...");
	    XmNmnemonic = keysym('O');
	    XmNaccelerator = "Ctrl<Key>A";
	    XmNacceleratorText = compound_string('Ctrl+A');
	    XmNfontList	    = menu_font;
	  };
	  callbacks {
	    XmNactivateCallback = procedure foe_activate_attribute(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_attribute(foe_ctx);
	  };
	};

	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Subwindow...");
	    XmNmnemonic = keysym('S');
	    XmNaccelerator = "Ctrl<Key>W";
	    XmNacceleratorText = compound_string('Ctrl+W');
	    XmNfontList	    = menu_font;
	  };
	  callbacks {
	    XmNactivateCallback = procedure foe_activate_subwindow(foe_ctx);
	    XmNhelpCallback = procedure foe_activate_subwindow(foe_ctx);
	  };
	};

	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("GOE...");
	    XmNfontList	    = menu_font;
	  };
	  callbacks {
	    XmNactivateCallback = procedure foe_activate_search (foe_ctx);
	    XmNhelpCallback = procedure foe_activate_search (foe_ctx);
	  };
	};
      };
    };
  };
};


!
! ** Mode Menu **
!
object mode_entry : XmCascadeButton {
  arguments { 
    XmNlabelString = 'Mode'; 
    XmNmnemonic = keysym('M');
    XmNfontList	    = menu_font;
    XmNuserData = 29;
  };
  callbacks { 
    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
  };
  controls {
    XmPulldownMenu {
      arguments { 
	XmNradioBehavior = false; 
	XmNradioAlwaysOne = false;
      };
      controls {
	XmToggleButton {
	  arguments { 
	    XmNlabelString = 'View'; 
	    XmNmnemonic = keysym('V');
	    !	           XmNaccelerator = "Ctrl<Key>V";
	    !	           XmNacceleratorText = compound_string('Ctrl+V');
	    XmNfontList	    = menu_font;
	    XmNuserData = 30;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	    XmNvalueChangedCallback = procedure foe_activate_view_togg (foe_ctx);
	    XmNhelpCallback = procedure foe_activate_view_togg (foe_ctx);
	  };
	};

	XmToggleButton {
	  arguments { 
	    XmNlabelString = 'Edit'; 
	    XmNmnemonic = keysym('E');
	    XmNaccelerator = "Ctrl<Key>E";
	    XmNacceleratorText = compound_string('Ctrl+E');
	    XmNfontList	    = menu_font;
	    XmNuserData = 31;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	    XmNvalueChangedCallback = procedure foe_activate_edit_togg (foe_ctx);
	    XmNhelpCallback = procedure foe_activate_edit_togg (foe_ctx);
	  };
	};
	XmToggleButton { 
	  arguments { 
	    XmNlabelString = 'Trace'; 
	    XmNmnemonic = keysym('T');
	    XmNfontList	    = menu_font;
	    XmNuserData = 32;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	    XmNvalueChangedCallback = procedure foe_activate_trace_togg (foe_ctx);
	    XmNhelpCallback = procedure foe_activate_trace_togg (foe_ctx);
	  };
	};
	XmToggleButton {
	  arguments { 
	    XmNlabelString = 'Simulate'; 
	    XmNmnemonic = keysym('S');
	    XmNfontList	    = menu_font;
	    XmNuserData = 33;
	  };
	  callbacks {
	    MrmNcreateCallback = procedure foe_create_widget_cb(foe_ctx);
	    XmNvalueChangedCallback = procedure foe_activate_simulate_togg (foe_ctx);
	    XmNhelpCallback = procedure foe_activate_simulate_togg (foe_ctx);
	  };
	};
      };
    };
  };
};

!
! ** Help Menu **
!
object help_entry : XmCascadeButton {
  arguments {
    XmNlabelString = compound_string("Help");
    XmNmnemonic = keysym('H');
    XmNfontList	    = menu_font;
  };
  controls {
    XmPulldownMenu {
      controls {
	XmPushButton {
	  arguments {
	    XmNlabelString = compound_string("Help");
	    XmNmnemonic = keysym('H');
	    XmNfontList	    = menu_font;
	  };
	  callbacks {
	    XmNactivateCallback = procedure foe_activate_help(foe_ctx);
	  };
	};
      };
    };
  };
};

! SG 13.02.91 another orphean 
object   foe_popupmsg : XmQuestionDialog {
  arguments {
    XmNdefaultPosition = true;
    XmNautoUnmanage     = false;
    XmNokLabelString = compound_string("Yes");
    XmNcancelLabelString = compound_string("No");
    XmNhelpLabelString = compound_string("Cancel");
    XmNbuttonFontList	   	= menu_font;
    XmNlabelFontList	   	= menu_font;
    XmNtextFontList	   	= menu_font;
  };
  callbacks {
    XmNokCallback = procedure foe_yes_popupmsg(foe_ctx);
    XmNcancelCallback = procedure foe_no_popupmsg(foe_ctx);
    XmNhelpCallback = procedure foe_cancel_popupmsg(foe_ctx);
  };
};

! SG 24.02.91 another orphean (again!)
object   foe_msgbox : XmInformationDialog {
  arguments {
    XmNdefaultPosition = true;
    !   XmNlabelString = compound_string("I'm a message box");
    XmNbuttonFontList	   	= menu_font;
    XmNlabelFontList	   	= menu_font;
  };
  callbacks {
  };
}; !msgbox

end module;
