/* statussrv_Server.cpp
   Generated by gSOAP 2.7.9d from statussrv_msg.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "statussrv_H.h"

SOAP_SOURCE_STAMP(
    "@(#) statussrv_Server.cpp ver 2.7.9d 2007-06-29 12:20:02 GMT")

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap* soap)
{
#ifndef WITH_FASTCGI
  unsigned int k = soap->max_keep_alive;
#endif

  do {
#ifdef WITH_FASTCGI
    if (FCGI_Accept() < 0) {
      soap->error = SOAP_EOF;
      return soap_send_fault(soap);
    }
#endif

    soap_begin(soap);

#ifndef WITH_FASTCGI
    if (soap->max_keep_alive > 0 && !--k)
      soap->keep_alive = 0;
#endif

    if (soap_begin_recv(soap)) {
      if (soap->error < SOAP_STOP) {
#ifdef WITH_FASTCGI
        soap_send_fault(soap);
#else
        return soap_send_fault(soap);
#endif
      }
      soap_closesock(soap);

      continue;
    }

    if (soap_envelope_begin_in(soap) || soap_recv_header(soap)
        || soap_body_begin_in(soap) || soap_serve_request(soap)
        || (soap->fserveloop && soap->fserveloop(soap))) {
#ifdef WITH_FASTCGI
      soap_send_fault(soap);
#else
      return soap_send_fault(soap);
#endif
    }

#ifdef WITH_FASTCGI
  } while (1);
#else
  } while (soap->keep_alive);
#endif
  return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap* soap)
{
  soap_peek_element(soap);
  if (!soap_match_tag(soap, soap->tag, "s0:GetStatus"))
    return soap_serve___s0__GetStatus(soap);
  if (!soap_match_tag(soap, soap->tag, "s0:GetExtStatus"))
    return soap_serve___s0__GetExtStatus(soap);
  if (!soap_match_tag(soap, soap->tag, "s0:Restart"))
    return soap_serve___s0__Restart(soap);
  if (!soap_match_tag(soap, soap->tag, "s0:XttStart"))
    return soap_serve___s0__XttStart(soap);
  if (!soap_match_tag(soap, soap->tag, "s0:RtMonStart"))
    return soap_serve___s0__RtMonStart(soap);
  return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___s0__GetStatus(struct soap* soap)
{
  struct __s0__GetStatus soap_tmp___s0__GetStatus;
  _s0__GetStatusResponse s0__GetStatusResponse;
  s0__GetStatusResponse.soap_default(soap);
  soap_default___s0__GetStatus(soap, &soap_tmp___s0__GetStatus);
  soap->encodingStyle = NULL;
  if (!soap_get___s0__GetStatus(
          soap, &soap_tmp___s0__GetStatus, "-s0:GetStatus", NULL))
    return soap->error;
  if (soap_body_end_in(soap) || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap->error;
  soap->error = __s0__GetStatus(
      soap, soap_tmp___s0__GetStatus.s0__GetStatus, &s0__GetStatusResponse);
  if (soap->error)
    return soap->error;
  soap_serializeheader(soap);
  s0__GetStatusResponse.soap_serialize(soap);
  if (soap_begin_count(soap))
    return soap->error;
  if (soap->mode & SOAP_IO_LENGTH) {
    if (soap_envelope_begin_out(soap) || soap_putheader(soap)
        || soap_body_begin_out(soap)
        || s0__GetStatusResponse.soap_put(soap, "s0:GetStatusResponse", "")
        || soap_body_end_out(soap) || soap_envelope_end_out(soap))
      return soap->error;
  };
  if (soap_end_count(soap) || soap_response(soap, SOAP_OK)
      || soap_envelope_begin_out(soap) || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || s0__GetStatusResponse.soap_put(soap, "s0:GetStatusResponse", "")
      || soap_body_end_out(soap) || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap->error;
  return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___s0__GetExtStatus(struct soap* soap)
{
  struct __s0__GetExtStatus soap_tmp___s0__GetExtStatus;
  _s0__GetExtStatusResponse s0__GetExtStatusResponse;
  s0__GetExtStatusResponse.soap_default(soap);
  soap_default___s0__GetExtStatus(soap, &soap_tmp___s0__GetExtStatus);
  soap->encodingStyle = NULL;
  if (!soap_get___s0__GetExtStatus(
          soap, &soap_tmp___s0__GetExtStatus, "-s0:GetExtStatus", NULL))
    return soap->error;
  if (soap_body_end_in(soap) || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap->error;
  soap->error = __s0__GetExtStatus(soap,
      soap_tmp___s0__GetExtStatus.s0__GetExtStatus, &s0__GetExtStatusResponse);
  if (soap->error)
    return soap->error;
  soap_serializeheader(soap);
  s0__GetExtStatusResponse.soap_serialize(soap);
  if (soap_begin_count(soap))
    return soap->error;
  if (soap->mode & SOAP_IO_LENGTH) {
    if (soap_envelope_begin_out(soap) || soap_putheader(soap)
        || soap_body_begin_out(soap)
        || s0__GetExtStatusResponse.soap_put(
               soap, "s0:GetExtStatusResponse", "")
        || soap_body_end_out(soap) || soap_envelope_end_out(soap))
      return soap->error;
  };
  if (soap_end_count(soap) || soap_response(soap, SOAP_OK)
      || soap_envelope_begin_out(soap) || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || s0__GetExtStatusResponse.soap_put(soap, "s0:GetExtStatusResponse", "")
      || soap_body_end_out(soap) || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap->error;
  return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___s0__Restart(struct soap* soap)
{
  struct __s0__Restart soap_tmp___s0__Restart;
  _s0__RestartResponse s0__RestartResponse;
  s0__RestartResponse.soap_default(soap);
  soap_default___s0__Restart(soap, &soap_tmp___s0__Restart);
  soap->encodingStyle = NULL;
  if (!soap_get___s0__Restart(
          soap, &soap_tmp___s0__Restart, "-s0:Restart", NULL))
    return soap->error;
  if (soap_body_end_in(soap) || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap->error;
  soap->error = __s0__Restart(
      soap, soap_tmp___s0__Restart.s0__Restart, &s0__RestartResponse);
  if (soap->error)
    return soap->error;
  soap_serializeheader(soap);
  s0__RestartResponse.soap_serialize(soap);
  if (soap_begin_count(soap))
    return soap->error;
  if (soap->mode & SOAP_IO_LENGTH) {
    if (soap_envelope_begin_out(soap) || soap_putheader(soap)
        || soap_body_begin_out(soap)
        || s0__RestartResponse.soap_put(soap, "s0:RestartResponse", "")
        || soap_body_end_out(soap) || soap_envelope_end_out(soap))
      return soap->error;
  };
  if (soap_end_count(soap) || soap_response(soap, SOAP_OK)
      || soap_envelope_begin_out(soap) || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || s0__RestartResponse.soap_put(soap, "s0:RestartResponse", "")
      || soap_body_end_out(soap) || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap->error;
  return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___s0__XttStart(struct soap* soap)
{
  struct __s0__XttStart soap_tmp___s0__XttStart;
  _s0__XttStartResponse s0__XttStartResponse;
  s0__XttStartResponse.soap_default(soap);
  soap_default___s0__XttStart(soap, &soap_tmp___s0__XttStart);
  soap->encodingStyle = NULL;
  if (!soap_get___s0__XttStart(
          soap, &soap_tmp___s0__XttStart, "-s0:XttStart", NULL))
    return soap->error;
  if (soap_body_end_in(soap) || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap->error;
  soap->error = __s0__XttStart(
      soap, soap_tmp___s0__XttStart.s0__XttStart, &s0__XttStartResponse);
  if (soap->error)
    return soap->error;
  soap_serializeheader(soap);
  s0__XttStartResponse.soap_serialize(soap);
  if (soap_begin_count(soap))
    return soap->error;
  if (soap->mode & SOAP_IO_LENGTH) {
    if (soap_envelope_begin_out(soap) || soap_putheader(soap)
        || soap_body_begin_out(soap)
        || s0__XttStartResponse.soap_put(soap, "s0:XttStartResponse", "")
        || soap_body_end_out(soap) || soap_envelope_end_out(soap))
      return soap->error;
  };
  if (soap_end_count(soap) || soap_response(soap, SOAP_OK)
      || soap_envelope_begin_out(soap) || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || s0__XttStartResponse.soap_put(soap, "s0:XttStartResponse", "")
      || soap_body_end_out(soap) || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap->error;
  return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___s0__RtMonStart(struct soap* soap)
{
  struct __s0__RtMonStart soap_tmp___s0__RtMonStart;
  _s0__RtMonStartResponse s0__RtMonStartResponse;
  s0__RtMonStartResponse.soap_default(soap);
  soap_default___s0__RtMonStart(soap, &soap_tmp___s0__RtMonStart);
  soap->encodingStyle = NULL;
  if (!soap_get___s0__RtMonStart(
          soap, &soap_tmp___s0__RtMonStart, "-s0:RtMonStart", NULL))
    return soap->error;
  if (soap_body_end_in(soap) || soap_envelope_end_in(soap)
      || soap_end_recv(soap))
    return soap->error;
  soap->error = __s0__RtMonStart(
      soap, soap_tmp___s0__RtMonStart.s0__RtMonStart, &s0__RtMonStartResponse);
  if (soap->error)
    return soap->error;
  soap_serializeheader(soap);
  s0__RtMonStartResponse.soap_serialize(soap);
  if (soap_begin_count(soap))
    return soap->error;
  if (soap->mode & SOAP_IO_LENGTH) {
    if (soap_envelope_begin_out(soap) || soap_putheader(soap)
        || soap_body_begin_out(soap)
        || s0__RtMonStartResponse.soap_put(soap, "s0:RtMonStartResponse", "")
        || soap_body_end_out(soap) || soap_envelope_end_out(soap))
      return soap->error;
  };
  if (soap_end_count(soap) || soap_response(soap, SOAP_OK)
      || soap_envelope_begin_out(soap) || soap_putheader(soap)
      || soap_body_begin_out(soap)
      || s0__RtMonStartResponse.soap_put(soap, "s0:RtMonStartResponse", "")
      || soap_body_end_out(soap) || soap_envelope_end_out(soap)
      || soap_end_send(soap))
    return soap->error;
  return soap_closesock(soap);
}

/* End of statussrv_Server.cpp */
