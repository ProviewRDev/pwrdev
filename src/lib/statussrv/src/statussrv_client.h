/*
 * ProviewR   Open Source Process Control.
 * Copyright (C) 2005-2025 SSAB EMEA AB.
 *
 * This file is part of ProviewR.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProviewR. If not, see <http://www.gnu.org/licenses/>
 *
 * Linking ProviewR statically or dynamically with other modules is
 * making a combined work based on ProviewR. Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * In addition, as a special exception, the copyright holders of
 * ProviewR give you permission to, from the build function in the
 * ProviewR Configurator, combine ProviewR with modules generated by the
 * ProviewR PLC Editor to a PLC program, regardless of the license
 * terms of these modules. You may copy and distribute the resulting
 * combined work under the terms of your choice, provided that every
 * copy of the combined work is accompanied by a complete copy of
 * the source code of ProviewR (the version used to produce the
 * combined work), being distributed under the terms of the GNU
 * General Public License plus this exception.
 */

#ifndef statussrv_client_h
#define statussrv_client_h

#include <string.h>
#include "statussrv_net.h"

class statussrv_client {
public:
  pwr_tStatus m_sts;
  unsigned short m_port;
  int m_busid;
  int m_sock;
  unsigned int m_reconnect_limit;
  char m_address[20];
  unsigned int m_trans_id;
  int m_expected_msgs;
  int m_msgs_lost;
  pwr_tTime m_last_try_connect_time;
  pwr_tTime m_timeout_time;
  unsigned int m_response_time;
  float m_max_timeout;
  int m_timeout;
  statussrv_client() : m_port(3889), m_busid(0), m_sock(0), m_reconnect_limit(500), m_trans_id(0),
		    m_expected_msgs(0), m_last_try_connect_time(pwr_cNTime),
		    m_timeout_time(pwr_cNTime), m_response_time(500), m_max_timeout(2), 
		    m_timeout(0) {
    strcpy(m_address, "127.0.0.1");
  }
  int server_connect();
  int send_request(stssrv_eMsgType type);
  pwr_tStatus receive(stssrv_eMsgType *type, char **msg);
  void set_busid(int busid) {
    m_busid = busid;
  }
  void set_address(char *address) {
    strncpy(m_address, address, sizeof(m_address));
  }
  static void get_port(pwr_tStatus *sts, unsigned short *port);
};


#endif
